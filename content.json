{"meta":{"title":"空山新雨","subtitle":null,"description":"分享技术与管理的点滴","author":"ronwxy","url":"http://blog.jboost.cn","root":"/"},"pages":[{"title":"关于我","date":"2019-06-05T08:11:27.000Z","updated":"2019-06-10T07:36:24.249Z","comments":true,"path":"about/index.html","permalink":"http://blog.jboost.cn/about/index.html","excerpt":"","text":"上海交通大学计算机应用技术硕士毕业，十多年软件技术研发经验 多年软件及互联网行业从业经验。从世界500强到国企，到民企，再到创业公司，经历过几百人参与的跨国大项目，也从0到1主管研发过多款互联网产品 以技术负责人身份主导过多个项目的微服务架构实践，负责过日均TB级大数据平台的研发与运维 多年技术团队管理经验，担任过技术主管，技术经理，技术总监等职务，目前在一公司担任技术总监、研发副总职位 曾利用空闲时间整理过一些技术分享，但终究由于阶段性太忙或其它原因未能坚持。 虽然现在较少写代码，但一直有意愿将多年企业产品与项目技术实践及团队管理的经验分享出来，一方面给有需求的软件与互联网行业技术人员（尤其是计算机相关专业，并有志于从事软件技术工作的高校学生）以参考，另一方面也是对自己技术与经验的梳理、总结。于是花了点时间整了这个博客，希望能坚持下来。 我的github地址，里面有文章涉及源码或其它项目，欢迎follow、打星 为了能及时收到更新的分享文章，欢迎关注我的微信公众号"}],"posts":[{"title":"Spring Boot从入门到实战：Spring Boot自定义属性","slug":"springboot-properties","date":"2019-06-10T10:47:51.000Z","updated":"2019-06-10T11:56:56.303Z","comments":true,"path":"2019/06/10/springboot-properties.html","link":"","permalink":"http://blog.jboost.cn/2019/06/10/springboot-properties.html","excerpt":"Web项目开发中，经常需要自定义一些属性，如数据库连接，第三方服务接口地址，第三方服务的appKey、appSecret等，以及针对不同环境，这些属性的值还需要有相应的调整，如开发环境、测试环境、生产环境所用数据库不同，则针对不同环境的同一属性需要配置不同的值。","text":"Web项目开发中，经常需要自定义一些属性，如数据库连接，第三方服务接口地址，第三方服务的appKey、appSecret等，以及针对不同环境，这些属性的值还需要有相应的调整，如开发环境、测试环境、生产环境所用数据库不同，则针对不同环境的同一属性需要配置不同的值。 传统自定义属性配置及访问（参考Github示例测试类）在传统的Spring Web应用中，自定义属性一般是通过在类路径中（如resources目录）添加一个类似my.properties配置文件（文件名自定义），然后在xml配置中通过 1&lt;util:properties id=\"myProps\" location=\"classpath:my.properties\"/&gt; 引入属性文件。再定义一个Bean来读取这些属性，Bean配置： 12345678&lt;bean class=\"org.springframework.beans.factory.config.MethodInvokingFactoryBean\"&gt; &lt;property name=\"staticMethod\" value=\"cn.jboost.springboot.properties.MyPropertiesUtil.init\"/&gt; &lt;property name=\"arguments\"&gt; &lt;list&gt; &lt;ref bean=\"myProps\"/&gt; &lt;/list&gt; &lt;/property&gt;&lt;/bean&gt; Bean定义：123456789101112public class MyPropertiesUtil &#123; private static Properties properties; public static void init(Properties props) &#123; properties = props; &#125; public static String getValue(String key) &#123; return properties.getProperty(key); &#125;&#125; 在其它需要访问的地方通过 MyPropertiesUtil.getValue() 方法来访问具体某个属性的值。 Spring Boot自定义属性配置及优先级在Spring Boot中，可以在多个地方配置属性，包括.properties文件，.yaml文件，环境变量， 系统属性，命令行参数等， 这些属性都会被Spring Boot加载到Environment中，可通过@Value注解，Environment实例，或 @ConfigurationProperties注解的类来访问。 属性加载优先级顺序： 如果有使用devtools，devtools 全局设置的属性（用户目录 ~/.spring-bootdevtools.properties） 测试类的注解@TestPropertySource 测试类注解 @SpringBootTest#properties 配置的属性 命令行参数 SPRING_APPLICATION_JSON里的属性（环境变量或系统属性） ServletConfig初始化参数 ServletContext初始化参数 JNDI参数 java:comp/env Java系统属性 System.getProperties() 操作系统环境变量 RandomValuePropertySource 配置的属性 random.* jar包外部的applictaion-{profile}.properties，applictaion-{profile}.yml配置文件 jar包内部的applictaion-{profile}.properties，applictaion-{profile}.yml配置文件 jar包外部的applictaion.properties，applictaion.yml配置文件 jar包内部的applictaion.properties，applictaion.yml配置文件 @Configuration类上的 @PropertySource注解指定的配置文件 默认属性： SpringApplication.setDefaultProperties 上述属性配置，除了粗体标注的外，其它一般应用较少。序号低的配置优先级高于序号高的配置，即如果存在相同属性配置 ，则序号低的配置会覆盖序号高的配置。applictaion-{profile}.properties 一般用于具体某个环境特有的属性配置，如application-dev.properties用于开发环境，可通过 spring.profiles.active=dev指定加载dev环境配置 常用属性配置方式 命令行参数启动Spring Boot应用时，可以指定命令行参数，如：1java -jar springboot-properties.jar --my.name=jboost@command_line 该参数值将会覆盖应用在其它地方配置的同名属性值。命令行参数放在xx.jar 的后面。 可以通过SpringApplication.setAddCommandLineProperties(false) 禁用命令行参数配置 Java系统属性同样在启动Spring Boot应用时，可以指定Java系统属性，一般见于自定义jvm参数，如：1java -Dmy.name=jboost@system_properties -jar springboot-properties.jar Java系统属性放在java命令之后。 操作系统环境变量（实际应用其实较少）配置过JAVA_HOME的应该理解何为环境变量。某些操作系统可能不支持.分隔的属性名，可以改为以下划线连接。Spring Boot将myName, my.name, MY_NAME视为等效。 应用属性配置文件（.properties文件或 .yml文件）.properties文件属性配置格式： 123my.name=jboostmy.list[0]=aaa //配置列表my.list[1]=bbb .yml文件属性配置格式： 12345my: name: devlink list: //配置列表 - aaa - bbb yml中，属性名与值之间冒号后面必须有空格。 应用属性配置文件位置： jar包所在当前目录下的子目录/config（外置属性文件） jar包所在当前目录（外置属性文件） classpath根目录下的子目录/config（内置属性文件） classpath根目录（内置属性文件） 序号低的优先级高于序号高的优先级，即jar包外的配置优先级高于jar包内的配置。同一目录下，.properties文件的优先级高于.yml文件。application-{profile}.properties的优先级高于application.properties。 Spring Boot自定义属性访问方式（参考Github示例测试类） 类中属性上添加 @Value(“${xx}”) 注解方式。如：12@Value(\"$&#123;my.name&#125;\")private String name; 可以指定默认值，如 @Value(“${my.name:jboost}”)， 当my.name未配置时，默认使用值”jboost” 通过@ConfigurationProperties注解的类来访问。如定义：12345678@Component@ConfigurationProperties(prefix = \"my\")public class MyConfigProperties &#123; private String name; private String website; //省略了getter、setter函数&#125; 然后在需要访问的Bean中，通过@Autowired 注入MyConfigProperties实例，通过getName()方法即可访问my.name属性值。123456789@Autowiredprivate MyConfigProperties myConfigProperties;@Testpublic void testConfigurationProperties()&#123; System.out.println(\"test @ConfigurationProperties ==========\"); System.out.println(myConfigProperties.getName()); System.out.println(myConfigProperties.getWebsite());&#125; 通过Environment 实例访问。如：123456789@Autowiredprivate Environment env;@Testpublic void testEnvironment()&#123; System.out.println(\"test Environment ==========\"); System.out.println(env.getProperty(\"my.name\")); System.out.println(env.getProperty(\"my.website\", \"default value\"));&#125; 另外也可以通过 spring-boot-starter-actuator 的接口来查看项目加载的属性配置，在pom.xml中加入 spring-boot-starter-actuator 依赖，因为 spring-boot-starter-actuator 在2.x版本中，出于安全性考虑，将actuator 控件中的端口，只默认开放/health 和/info 两个端口，其他端口默认关闭，因此需要添加配置management.endpoints.web.exposure.include= *，management.endpoints.web.exposure.exclude=beans,trace，management.endpoint.health.show-details=ALWAYS，启动项目后，访问 http://localhost:8080/actuator/env ，返回的 propertySources 即为加载的所有属性源，优先级从上往下依次降低，与上文所述优先级相符 本文示例项目源码地址：Github地址 ——————————————————————————————————————————————————————————————— 欢迎关注我的微信公众号，及时获取最新分享","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://blog.jboost.cn/categories/SpringBoot/"}],"tags":[{"name":"java, springboot","slug":"java-springboot","permalink":"http://blog.jboost.cn/tags/java-springboot/"}]},{"title":"Spring Boot从入门到实战：第一个Spring Boot应用","slug":"springboot-firstapp","date":"2019-06-06T12:46:50.000Z","updated":"2019-06-10T11:28:58.322Z","comments":true,"path":"2019/06/06/springboot-firstapp.html","link":"","permalink":"http://blog.jboost.cn/2019/06/06/springboot-firstapp.html","excerpt":"Spring Boot应用可以通过如下三种方法创建： 通过 https://start.spring.io/ 网站创建 通过 Spring Initializr 创建 自主创建","text":"Spring Boot应用可以通过如下三种方法创建： 通过 https://start.spring.io/ 网站创建 通过 Spring Initializr 创建 自主创建 推荐开发工具 JDK 1.8+ IntelliJ IDEA maven 3.3+ 在开始之前，先确认是否安装上述工具，在命令行输入 java -version 查看JDK是否正确安装， 输入 mvn -version 查看maven是否正确安装，如果未正确安装，请先查阅相关文档完成安装。12345678910111213PS D:\\&gt; java -versionjava version \"1.8.0_201\"Java(TM) SE Runtime Environment (build 1.8.0_201-b09)Java HotSpot(TM) 64-Bit Server VM (build 25.201-b09, mixed mode)PS D:\\&gt;PS D:\\&gt;PS D:\\&gt; mvn -versionApache Maven 3.6.0 (97c98ec64a1fdfee7767ce5ffb20918da4f719f3; 2018-10-25T02:41:47+08:00)Maven home: D:\\tool\\apache-maven-3.6.0\\bin\\..Java version: 1.8.0_201, vendor: Oracle Corporation, runtime: C:\\Program Files\\Java\\jdk1.8.0_201\\jreDefault locale: zh_CN, platform encoding: GBKOS name: \"windows 10\", version: \"10.0\", arch: \"amd64\", family: \"windows\"PS D:\\&gt; 1. 通过 https://start.spring.io/ 网站创建进入 https://start.spring.io/，填写对应的信息，如下图所示其中project选 Maven Project， Spring Boot版本选 2.1.5 版， Project Metadata部分， Group一般用你域名的倒序字符串，Artifact即项目名称，选择Packaging类型为Jar，Java版本为8，在Dependencies部分输入Web，选中第一个Spring Web Starter，然后点击“Generate the project”按钮，下载生成的项目。解压项目，在IntelliJ IDEA中 File -&gt; Open 选中项目解压目录打开，即可看到生成的项目结构如下图具体各文件含义后面详述。 2. 通过Spring Initializr创建（推荐）IntelliJ IDEA中File -&gt; New -&gt; Project...打开新建项目窗口（这里也可以选择New Module, IDEA的Project类似于Eclipse的Workspace，Module则类似于Eclipse的Project，有时候为了将一些项目统一管理，可以建一个Project，然后在Project内部建立Module），如下图所示 选择Spring Initializr，点击Next，填写相应信息， 如下图所示 点击Next，选择Spring Boot版本以及相应依赖，如下图（这里选择2.1.5版本及Spring Web Starter依赖） 然后依次点击Next, Finish完成项目创建。可以看到创建的项目结构与第一种方法一致。 有的旧IDEA版本下项目可能不能编译，IDE未将其识别为maven项目，只需在pom.xml文件上右键，点击Add as Maven project即可。 3. 自主创建自主创建即像普通Java Maven项目一样，先创建maven项目，然后参考1、2方法中创建的项目结构与目录，手动进行添加。 上述三种创建方法，第1种需要网站生成再下载解压导入，第2种直接基于IDE创建，第3种完全自主手动创建。实际开发中推荐采用第2种创建初始项目原型，再根据具体需求删除或添加相应目录与文件。 4. 项目结构通过上述方法创建的项目，结构如下图所示 其中 SpringbootFirstappApplication 为项目入口类，通过SpringApplication.run()方法来启动项目 入口类上的注解 @SpringBootApplication 表明，这是一个Spring Boot项目，它会为你自动做一些Spring Boot项目的处理 resources 下的static目录为静态资源目录，可以放置js，css，img之类的资源，templates目录可放置模板文件，一般做前后端分离开发，这两个目录可删除 application.properties 文件为项目的配置文件，可在该文件中配置项目所需要的各项配置属性 SpringbootFirstappApplicationTests 生成的测试类，可基于此进行单元测试编写 pom.xml即为maven配置文档，可看到项目已继承spring-boot-starter-parent，并且引入了spring-boot-starter-web，spring-boot-starter-test两项依赖，以及spring-boot-maven-plugin 5. 运行 上述创建的项目可直接运行，大致有如下几种运行方式： 直接在项目入口类SpringbootFirstappApplication中右键，点击Run &#39;SpringbootFirstappAp...&#39;运行 在项目根目录下打开终端，或IDEA的Terminal中执行mvn spring-boot:run（前提是项目pom.xml文件中引入了spring-boot-maven-plugin） 使用mvn package打包，然后通过java -jar target\\springboot-firstapp-1.0.0-SNAPSHOT.jar 启动（一般用于远程环境的部署启动） 如果打包成war，将war包部署到tomcat等Servlet容器运行 项目启动后，从启动日志可看出默认端口为8080，但打开 http://localhost:8080 会显示一个404报错页面，这是因为我们还没有编写任何服务。下面我们添加一个非常简单的Rest服务接口，在项目的根包下（我这里是cn.jboost.springboot.firstapp，实际项目中一般会创建一个controller的子包）添加HelloController类，代码如下 1234567@RestController(\"/hello\")public class HelloController &#123; @GetMapping public String hello(@RequestParam(name = \"name\")String name)&#123; return \"您好，\" + name; &#125;&#125; 其中@RestController注解会将返回结果以字符串的方式解析，@GetMapping等效于@RequestMapping(method = {RequestMethod.GET})重启应用，然后浏览器地址栏中输入 http://localhost:8080/hello?name=jboost， 页面输出如下图： 至此，一个可运行的Web项目即已搭建完成，是不是非常简单。 本文示例项目源码地址：Github地址 ——————————————————————————————————————————————————————————————— 欢迎关注我的微信公众号，及时获取最新分享","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://blog.jboost.cn/categories/SpringBoot/"}],"tags":[{"name":"java, springboot","slug":"java-springboot","permalink":"http://blog.jboost.cn/tags/java-springboot/"}]},{"title":"Spring Boot从入门到实战：Spring Boot简介","slug":"springboot-overview","date":"2019-06-06T06:29:02.000Z","updated":"2019-06-10T07:36:24.247Z","comments":true,"path":"2019/06/06/springboot-overview.html","link":"","permalink":"http://blog.jboost.cn/2019/06/06/springboot-overview.html","excerpt":"Spring Boot这几年非常流行，差不多是基于Spring框架应用开发的首选，同时在微服务架构领域，如Spring Cloud 框架中，Spring Boot也是基础，因此掌握Spring Boot，应成为Java开发人员必不可少的技能。","text":"Spring Boot这几年非常流行，差不多是基于Spring框架应用开发的首选，同时在微服务架构领域，如Spring Cloud 框架中，Spring Boot也是基础，因此掌握Spring Boot，应成为Java开发人员必不可少的技能。 简述传统的基于Spring的Java Web应用，需要配置 web.xml, applicationContext.xml 等大量xml配置信息，然后将应用打成war包放入web应用服务器(如Tomcat, Jetty等)中运行。有过实践经验的开发者应能体会到这个过程繁杂且重复。Spring Boot将这种繁杂且重复的工作通过自动化配置等手段实现，从而将开发者从复杂的配置工作中解放出来，能够更专注于业务逻辑的开发。因此，Spring Boot并不是Spring的替代解决方案，它本身并不提供Spring框架的核心特性以及扩展功能，而是和Spring框架紧密结合用于提升Spring开发者体验，提高开发效率的的工具框架。截至本文，Spring Boot最新GA版本为2.1.5。 特性Spring Boot框架大致包括如下特性： 自动化配置。Spring Boot 通过autoconfiguration的方式（后面会详细讨论何为autoconfiguration）来简化配置管理。比如如果需要访问数据库，则只需要引入相应的starter依赖包，Spring Boot便会自动为你配置访问数据库所需要的Bean，如 DataSource， JdbcTemplate等。使用Spring Boot，项目中几乎不需要任何 xml 配置文件。 内嵌的Web服务容器。Spring Boot内嵌了Tomcat、Jetty、Undertow。因此，Spring Boot应用可以像普通java应用一样打成jar包直接通过 java -jar 执行，而不需传统web应用一样需要打成war包部署到独立的web服务容器中。 简化依赖管理。Spring Boot官方提供了大量的starter依赖包，帮你管理了使用某个功能所需要的依赖，开发者只需要引入starter依赖，即可使用对应的功能。如spring-boot-starter-web，spring-boot-starter-jdbc等。同时自己也可以自定义starter，为某些通用功能提供模块化共享支持。 提供生产环境级的应用配置、度量指标、操作控制接口。Spring Boot的spring-boot-starter-actuator提供了查看应用配置信息，获取应用运行指标，以及控制应用（如关闭应用）三种类型的接口。通过这些接口，可以排查问题，监控服务运行情况等。 Spring Boot的这些特性，使得应用Spring Boot开发Web应用非常便捷、高效，因此在快速应用开发（Rapid Application Development）领域以及微服务架构方面，Spring Boot都是比较好的选择。 工具该序列涉及的开发工具包括但不限于： JDK 1.8+ , 一般用的是1.8 Maven 3.3+ , 我们用的是Maven3.6.0 IntelliJ IDEA Ultimate Edition， 需要激活，参考这里 MySQL，可选，数据库访问示例需要 Redis， 可选，缓存示例需要 ——————————————————————————————————————————————————————————————— 欢迎关注我的微信公众号，及时获取最新分享","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://blog.jboost.cn/categories/SpringBoot/"}],"tags":[{"name":"java, springboot","slug":"java-springboot","permalink":"http://blog.jboost.cn/tags/java-springboot/"}]},{"title":"写在前面","slug":"ahead","date":"2019-06-05T08:48:37.000Z","updated":"2019-06-10T07:36:24.244Z","comments":true,"path":"2019/06/05/ahead.html","link":"","permalink":"http://blog.jboost.cn/2019/06/05/ahead.html","excerpt":"","text":"一点感悟在软件与互联网技术领域从业多年，从一个一知半解的职场菜鸟成长为行业“老司机”，也从一个邯郸学步的技术新手晋升成为能带领团队披荆斩棘，在技术范畴能掌握话语权的技术管理者。其间也与大多数同行一样，踩过不少坑，加过不少班，背过不少锅……，但同时，也为自己不断成长、进步——包括技术、能力层面，也包括薪酬、职位层面，而感到欣慰。但技术领域日新月异，接触的越多，越发现自己的无知，因此 Stay hungry，Stay foolish，保持持续学习的热情，永远不要满足于现状，才能保持自身竞争力，不至于在年龄增长时，出现所谓的“中年危机”。 一点初衷大学期间也曾玩过新浪博客，写过一些心路历程与人生感悟（^_^），随着年龄的增长，逐渐失去了用文字来抒发情感的激情。工作后，开始接触技术博客，也断断续续写过一些分享，但终因阶段性忙或懒惰，没能坚持下来。与之前抒发情感与感悟不同，技术博客更多的是一种经验的自我梳理总结与分享。一方面为那些踏入职场不久实践经验较缺乏的同行提供参考，另一方面也是对自我日常技术工作的整理，以达到“好记性不如烂笔头”的效果。因此，虽然现今从事一线编码工作相对较少，心中一直还是有一个将以往及现在所接触的实践经验记录与分享出来的想法。于是，花了点时间整了这个博客，希望能坚持下去。 一点期望凡事做了，总希望有所回报。整理文章其实需要花费不少时间与精力，因此也希望发出来的分享能为大家带来切实的收获，获得大家的肯定与良性反馈。有更好建议，也欢迎大家通过留言或其它方式与我交流。希望这是一个好的开始，加油！","categories":[],"tags":[]}]}