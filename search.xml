<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kubernetes笔记（六）：了解控制器 —— Deployment</title>
      <link href="/k8s6-deploy.html"/>
      <url>/k8s6-deploy.html</url>
      
        <content type="html"><![CDATA[<p>Pod（容器组）是 Kubernetes 中最小的调度单元，可以通过 yaml 定义文件直接创建一个 Pod。但 Pod 本身并不具备自我恢复（self-healing）功能。如果一个 Pod 所在的节点出现故障，或者调度程序自身出现问题，以及节点资源不够或节点进入维护而驱逐 Pod 时，Pod 将被删除，且不能自我恢复。</p><p>因此，Kubernetes 中我们一般不直接创建 Pod， 而是通过 Controller（控制器）来管理 Pod。</p><a id="more"></a><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><p>Controller 能为 Pod 提供如下特性：</p><ul><li>水平扩展，控制 Pod 运行的副本数</li><li>rollout，即版本更新</li><li>self-healing，即自我恢复。当节点出现故障时，控制器可以自动地在另一个节点调度一个配置完全一样的 Pod，以替换故障节点上的 Pod。</li></ul><p>Kubernetes 中支持的控制器包括：</p><ul><li>ReplicationController：用来维护一个数量稳定的 Pod 副本集合的控制器</li><li>ReplicaSet：是 ReplicationController 的升级版，比 ReplicationController 多一个特性：支持基于集合的选择器。 不支持滚动更新（RollingUpdate）</li><li>Deployment：包含了 ReplicaSet，可通过声明式、滚动更新的方式更新 ReplicaSet 及其 Pod。对于无状态应用，推荐使用 Deployment 部署</li><li>StatefulSet：用于管理有状态的应用程序</li><li>DaemonSet：在节点上以守护进程的方式运行一个指定的 Pod 副本，例如监控节点、收集节点上的日志时，可使用 DaemonSet</li><li>CronJob：按照预定的时间计划创建 Job，类似于 linux 的crontab</li><li>Job：使用 Job 执行任务，执行完后结束</li></ul><h2 id="ReplicaSet"><a href="#ReplicaSet" class="headerlink" title="ReplicaSet"></a>ReplicaSet</h2><p>Kubernetes 中，虽然一般使用 Deployment 来管理 Pod， 但 Deployment 中也是通过 ReplicaSet 来维护 Pod 的副本集合的，因此此处也对 ReplicaSet 进行简单介绍。</p><p>在 ReplicaSet 的定义中，包含三部分：</p><ol><li>selector： 标签选择器，用于指定哪些 Pod 归该 ReplicaSet 管理，通过 <code>matchLabels</code> 来与 Pod 的 label 匹配。</li><li>replicas： 期望的 Pod 副本数，指定该 ReplicaSet 应该维持多少个 Pod 副本，默认为1。</li><li>template： Pod 定义模板，ReplicaSet 使用该模板的定义来创建 Pod。</li></ol><p>ReplicaSet 的示例定义文档如下所示，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span>  <span class="comment"># api版本</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicaSet</span>     <span class="comment"># 资源类型</span></span><br><span class="line"><span class="attr">metadata:</span>            <span class="comment"># 元数据定义</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ds</span>     <span class="comment"># ReplicaSet 名称</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span>        <span class="comment"># Pod 副本数量，默认1</span></span><br><span class="line">  <span class="attr">selector:</span>          <span class="comment"># 标签选择器</span></span><br><span class="line">     <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span>          <span class="comment"># Pod 定义模板</span></span><br><span class="line">    <span class="attr">metadata:</span>        <span class="comment"># Pod 元数据定义</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span>   <span class="comment"># Pod 标签</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span>    <span class="comment"># 容器定义</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><p>ReplicaSet 通过创建、删除 Pod 容器组来确保符合 selector 选择器的 Pod 数量等于 replicas 指定的数量。 ReplicaSet 创建的 Pod 中，都有一个字段 <code>metadata.ownerReferences</code> 用于标识该 Pod 从属于哪一个 ReplicaSet。可通过 <code>kubectl get pod pod-name -o yaml</code> 来查看 Pod 的 ownerReference。</p><p>ReplicaSet 通过 selector 字段的定义，识别哪些 Pod 应该由其管理， 不论该 Pod 是否由该 ReplicaSet 创建，即只要 selector 匹配， 通过外部定义创建的 Pod 也会被该 ReplicaSet 管理。因此需要注意 <code>.spec.selector.matchLabels</code> 与 <code>.spec.template.metadata.labels</code> 的定义一致， 且避免与其他控制器的 selector 重合，造成混乱。</p><p>ReplicaSet 不支持滚动更新，所以对于无状态应用，一般使用 Deployment来部署， 而不直接使用 ReplicaSet。ReplicaSet 主要是被用作 Deployment 中负责 Pod 创建、删除、更新的一种手段。</p><h2 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h2><p>Deployment 对象包含 ReplicaSet 作为从属对象，并且可通过声明式、滚动更新的方式来更新 ReplicaSet 及其 Pod。ReplicaSet 现在主要是被用作 Deployment 中负责 Pod 创建、删除、更新的一种手段。使用 Deployment 时，无需关心由 Deployment 创建的 ReplicaSet，Deployment 将处理所有与之相关的细节。同时，Deployment 还能以“声明式”的方式管理 Pod 和 ReplicaSet （其本质是将一些特定场景的一系列运维步骤固化下来，以便快速准确无误的执行），并提供版本（revision）回退功能。</p><p>Deployment 定义示例，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span>        <span class="comment"># 对象类型，固定为 Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deploy</span>    <span class="comment"># Deployment 名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span>    <span class="comment"># 命名空间，默认为 default</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span>          <span class="comment"># 标签</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">4</span>           <span class="comment"># Pod 副本数，默认1</span></span><br><span class="line">  <span class="attr">strategy:</span>  </span><br><span class="line">    <span class="attr">rollingUpdate:</span>      <span class="comment"># 升级策略为滚动升级，由于replicas为4,则整个升级过程pod个数在3-5个之间</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">1</span>       <span class="comment"># 滚动升级时超过 replicas 的最大 pod 数，也可以为百分比（replicas的百分比），默认为1</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">1</span> <span class="comment"># 滚动升级时不可用的最大 pod 数，也可为百分比（replicas的百分比），默认为1</span></span><br><span class="line">  <span class="attr">selector:</span>             <span class="comment"># 标签选择器，通过标签选择该 Deployment 管理的 Pod</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span>             <span class="comment"># Pod 定义模板</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span>      <span class="comment"># Pod 标签</span></span><br><span class="line">    <span class="attr">spec:</span>               <span class="comment"># 定义容器模板，可以包含多个容器</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>可通过 <code>kubectl explain xxx</code> 来查看支持哪些配置选项，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看 deployment 配置项</span></span><br><span class="line">[root@kmaster ~]# kubectl explain deployment</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 deployment.spec 模块的配置项</span></span><br><span class="line">[root@kmaster ~]# kubectl explain deployment.spec</span><br><span class="line">KIND:     Deployment</span><br><span class="line">VERSION:  apps/v1</span><br><span class="line"></span><br><span class="line">RESOURCE: spec &lt;Object&gt;</span><br><span class="line"></span><br><span class="line">DESCRIPTION:</span><br><span class="line">     Specification of the desired behavior of the Deployment.</span><br><span class="line"></span><br><span class="line">     DeploymentSpec is the specification of the desired behavior of the</span><br><span class="line">     Deployment.</span><br><span class="line"></span><br><span class="line">FIELDS:</span><br><span class="line">   minReadySeconds&lt;integer&gt;</span><br><span class="line">     Minimum number of seconds for which a newly created pod should be ready</span><br><span class="line">     without any of its container crashing, for it to be considered available.</span><br><span class="line">     Defaults to 0 (pod will be considered available as soon as it is ready)</span><br><span class="line"></span><br><span class="line">   paused&lt;boolean&gt;</span><br><span class="line">     Indicates that the deployment is paused.</span><br><span class="line"></span><br><span class="line">   progressDeadlineSeconds&lt;integer&gt;</span><br><span class="line">     The maximum time in seconds for a deployment to make progress before it is</span><br><span class="line">     considered to be failed. The deployment controller will continue to process</span><br><span class="line">     failed deployments and a condition with a ProgressDeadlineExceeded reason</span><br><span class="line">     will be surfaced in the deployment status. Note that progress will not be</span><br><span class="line">     estimated during the time a deployment is paused. Defaults to 600s.</span><br><span class="line"></span><br><span class="line">   replicas&lt;integer&gt;</span><br><span class="line">     Number of desired pods. This is a pointer to distinguish between explicit</span><br><span class="line">     zero and not specified. Defaults to 1.</span><br><span class="line"></span><br><span class="line">   revisionHistoryLimit&lt;integer&gt;</span><br><span class="line">     The number of old ReplicaSets to retain to allow rollback. This is a</span><br><span class="line">     pointer to distinguish between explicit zero and not specified. Defaults to</span><br><span class="line">     10.</span><br><span class="line"></span><br><span class="line">   selector&lt;Object&gt; -required-</span><br><span class="line">     Label selector for pods. Existing ReplicaSets whose pods are selected by</span><br><span class="line">     this will be the ones affected by this deployment. It must match the pod</span><br><span class="line">     template's labels.</span><br><span class="line"></span><br><span class="line">   strategy&lt;Object&gt;</span><br><span class="line">     The deployment strategy to use to replace existing pods with new ones.</span><br><span class="line"></span><br><span class="line">   template&lt;Object&gt; -required-</span><br></pre></td></tr></table></figure><p>其它配置项说明：</p><ul><li><code>.spec.minReadySeconds</code>：用来控制应用升级的速度。升级过程中，新创建的 Pod 一旦成功响应了就绪探测即被认为是可用状态，然后进行下一轮的替换。 <code>.spec.minReadySeconds</code> 定义了在新的 Pod 对象创建后至少需要等待多长的时间才能会被认为其就绪，在该段时间内，更新操作会被阻塞。</li><li><code>.spec.progressDeadlineSeconds</code>：用来指定在系统报告 Deployment 失败 —— 表现为状态中的 <code>type=Progressing、Status=False、 Reason=ProgressDeadlineExceeded</code> 前可以等待的 Deployment 进行的秒数。Deployment controller 会继续重试该 Deployment。如果设置该参数，该值必须大于 <code>.spec.minReadySeconds</code>。</li><li><code>.spec.revisionHistoryLimit</code>：用来指定可以保留的旧的 ReplicaSet 或 revision（版本） 的数量。默认所有旧的 Replicaset 都会被保留。如果删除了一个旧的 RepelicaSet，则 Deployment 将无法再回退到那个 revison。如果将该值设置为0，所有具有0个 Pod 副本的 ReplicaSet 都会被删除，这时候 Deployment 将无法回退，因为 revision history 都被清理掉了。</li></ul><h3 id="1-创建"><a href="#1-创建" class="headerlink" title="1. 创建"></a>1. 创建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster test]# kubectl apply -f nginx-deploy.yaml --record</span><br></pre></td></tr></table></figure><p><code>--record</code> 会将此次命令写入 Deployment 的 kubernetes.io/change-cause 注解中。可在后面查看某一个 Deployment 版本变化的原因。</p><h3 id="2-查看"><a href="#2-查看" class="headerlink" title="2. 查看"></a>2. 查看</h3><p>创建 Deployment 后，Deployment 控制器将立刻创建一个 ReplicaSet，并由 ReplicaSet 创建所需要的 Pod。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看 Deployment</span></span><br><span class="line">[root@kmaster test]# kubectl get deploy</span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deploy   0/2     2            0           64s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 ReplicaSet</span></span><br><span class="line">[root@kmaster test]# kubectl get rs</span><br><span class="line">NAME                     DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deploy-59c9f8dff   2         2         1       2m16s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 Pod，显示调度的节点，及标签</span></span><br><span class="line">[root@kmaster test]# kubectl get pod -o wide --show-labels</span><br><span class="line">NAME                           READY   STATUS      RESTARTS   AGE     IP            NODE     NOMINATED NODE   READINESS GATES   LABELS</span><br><span class="line">nginx-deploy-59c9f8dff-47bgd   1/1     Running     0          5m14s   10.244.1.91   knode2   &lt;none&gt;           &lt;none&gt;            app=nginx,pod-template-hash=59c9f8dff</span><br><span class="line">nginx-deploy-59c9f8dff-q4zb8   1/1     Running     0          5m14s   10.244.3.47   knode3   &lt;none&gt;           &lt;none&gt;            app=nginx,pod-template-hash=59c9f8dff</span><br></pre></td></tr></table></figure><p><code>pod-template-hash</code> 标签是 Deployment 创建 ReplicaSet 时添加到 ReplicaSet 上的，ReplicaSet 进而将此标签添加到 Pod 上。这个标签用于区分 Deployment 中哪个 ReplicaSet 创建了哪些 Pod。该标签的值是 <code>.spec.template</code> 的 hash 值，不要去修改这个标签。由上可看出 ReplicaSet、 Pod 的命名分别遵循 <code>&lt;Deployment-name&gt;-&lt;Pod-template-hash&gt;</code>、<code>&lt;Deployment-name&gt;-&lt;Pod-template-hash&gt;-xxx</code> 的格式。</p><h3 id="3-发布更新（rollout）"><a href="#3-发布更新（rollout）" class="headerlink" title="3. 发布更新（rollout）"></a>3. 发布更新（rollout）</h3><p>当且仅当 Deployment 的 Pod template（<code>.spec.template</code>）字段中的内容发生变更时（例如标签或容器的镜像被改变），Deployment 的发布更新（rollout）才会被触发。Deployment 中其他字段的变化（例如修改 <code>.spec.replicas</code> 字段）将不会触发 Deployment 的发布更新。</p><p>更新 Deployment 中 Pod 的定义（例如，发布新版本的容器镜像）。此时 Deployment 控制器将为该 Deployment 创建一个新的 ReplicaSet，并且逐步在新的 ReplicaSet 中创建 Pod，在旧的 ReplicaSet 中删除 Pod，以达到滚动更新的效果。</p><p>比如我们将上面 Deployment 的容器镜像进行修改，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 方式一：直接使用 kubectl 命令设置修改 </span></span><br><span class="line">[root@kmaster ~]# kubectl set image deploy nginx-deploy nginx=nginx:1.16.1 --record</span><br><span class="line">deployment.apps/nginx-deploy image updated</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方式二：使用 kubectl edit 编辑yaml修改</span></span><br><span class="line">[root@kmaster ~]# kubectl edit deploy nginx-deploy</span><br></pre></td></tr></table></figure><p>查看发布更新（rollout）的状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster ~]# kubectl rollout status deploy nginx-deploy</span><br><span class="line">Waiting for deployment "nginx-deploy" rollout to finish: 2 out of 4 new replicas have been updated...</span><br></pre></td></tr></table></figure><p>查看 ReplicaSet，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster ~]# kubectl get rs</span><br><span class="line">NAME                     DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deploy-59c9f8dff   1         1         1       3d6h</span><br><span class="line">nginx-deploy-d47dbbb7c   4         4         2       3m41s</span><br></pre></td></tr></table></figure><p>我们可以看到 Deployment 的更新是通过创建一个新的4个副本的 ReplicaSet，并同时将旧的 ReplicaSet 的副本数缩容到0个副本来达成的。</p><p>因为前面我们将 maxSurge， 与 maxUnavailable 都设置为了1， 因此在更新的过程中，任何时刻两个 ReplicaSet 的 Pod 数至多为5个（4 replicas +1 maxSurge），且可用的 Pod 数至少为3个（4 replicas - 1 maxUnavailable）。</p><p>使用 <code>kubectl describe</code> 命令查看 Deployment 的事件部分，如下所示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster ~]# kubectl describe deploy nginx-deploy</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Events:</span><br><span class="line">  Type    Reason             Age    From                   Message</span><br><span class="line">  ----    ------             ----   ----                   -------</span><br><span class="line">  Normal  ScalingReplicaSet  12m    deployment-controller  Scaled up replica set nginx-deploy-d47dbbb7c to 1</span><br><span class="line">  Normal  ScalingReplicaSet  12m    deployment-controller  Scaled down replica set nginx-deploy-59c9f8dff to 3</span><br><span class="line">  Normal  ScalingReplicaSet  12m    deployment-controller  Scaled up replica set nginx-deploy-d47dbbb7c to 2</span><br><span class="line">  Normal  ScalingReplicaSet  10m    deployment-controller  Scaled down replica set nginx-deploy-59c9f8dff to 2</span><br><span class="line">  Normal  ScalingReplicaSet  10m    deployment-controller  Scaled up replica set nginx-deploy-d47dbbb7c to 3</span><br><span class="line">  Normal  ScalingReplicaSet  8m56s  deployment-controller  Scaled down replica set nginx-deploy-59c9f8dff to 1</span><br><span class="line">  Normal  ScalingReplicaSet  8m56s  deployment-controller  Scaled up replica set nginx-deploy-d47dbbb7c to 4</span><br><span class="line">  Normal  ScalingReplicaSet  5m55s  deployment-controller  Scaled down replica set nginx-deploy-59c9f8dff to 0</span><br></pre></td></tr></table></figure><p>当更新了 Deployment 的 Pod Template 时，Deployment Controller 会创建一个新的 ReplicaSet (nginx-deploy-d47dbbb7c) ，并将其 scale up 到 1 个副本，同时将旧的 ReplicaSet（nginx-deploy-59c9f8dff） scale down 到3个副本。接下来 Deployment Controller 继续 scale up 新的 ReplicaSet 并 scale down 旧的 ReplicaSet，直到新的 ReplicaSet 拥有 replicas 个数的 Pod， 旧的 ReplicaSet Pod 数缩放到0。这个过程称为 rollout（发布更新）。</p><p>通过 <code>.spec.strategy</code> 字段，可以指定更新策略，除了上述使用的 RollingUpdate（滚动更新），另一个可取的值为 Recreate（重新创建）。选择重新创建，Deployment 将先删除原有 ReplicaSet 中的所有 Pod，然后再创建新的 ReplicaSet 和新的 Pod，更新过程中将出现一段应用程序不可用的情况。因此，线上环境一般使用 RollingUpdate。</p><h3 id="4-回滚"><a href="#4-回滚" class="headerlink" title="4. 回滚"></a>4. 回滚</h3><p>默认情况下，kubernetes 将保存 Deployment 的所有更新（rollout）历史。可以通过设定 revision history limit（<code>.spec.revisionHistoryLimit</code> 配置项）来指定保存的历史版本数量。</p><p>当且仅当 Deployment 的 <code>.spec.template</code> 字段被修改时（例如修改容器的镜像），kubernetes 才为其创建一个 Deployment revision（版本）。Deployment 的其他更新（例如：修改 <code>.spec.replicas</code> 字段）将不会创建新的 Deployment revision（版本）。</p><p>查看 Deployment 的 revision，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster ~]# kubectl rollout history deploy nginx-deploy</span><br><span class="line">deployment.apps/nginx-deploy</span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         kubectl apply --filename=nginx-deploy.yaml --record=true</span><br><span class="line">2         kubectl set image deploy nginx-deploy nginx=nginx:1.16.1 --record=true</span><br></pre></td></tr></table></figure><p>如果前面更新 Deployment 时没有添加 <code>--record=true</code>，则此处 CHANGE-CAUSE 将为空。</p><p>我们通过将镜像修改为一个不存在的版本来模拟一次失败的更新，并回滚到前一个版本的场景，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 修改镜像版本到一个不存在的值</span></span><br><span class="line">[root@kmaster ~]# kubectl set image deploy nginx-deploy nginx=nginx:1.161 --record</span><br><span class="line">deployment.apps/nginx-deploy image updated</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 查看 ReplicaSet</span></span><br><span class="line">[root@kmaster ~]# kubectl  get rs</span><br><span class="line">NAME                      DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deploy-58f69cfc57   2         2         0       2m7s</span><br><span class="line">nginx-deploy-59c9f8dff    0         0         0       3d7h</span><br><span class="line">nginx-deploy-d47dbbb7c    3         3         3       81m</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 查看 Pod 状态</span></span><br><span class="line">[root@kmaster ~]# kubect get pod</span><br><span class="line">NAME                            READY   STATUS              RESTARTS   AGE</span><br><span class="line">nginx-deploy-58f69cfc57-5968g   0/1     ContainerCreating   0          42s</span><br><span class="line">nginx-deploy-58f69cfc57-tk7c5   0/1     ErrImagePull        0          42s</span><br><span class="line">nginx-deploy-d47dbbb7c-2chgx    1/1     Running             0          77m</span><br><span class="line">nginx-deploy-d47dbbb7c-8fcb9    1/1     Running             0          80m</span><br><span class="line">nginx-deploy-d47dbbb7c-gnwjj    1/1     Running             0          78m</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 查看 Deployment 详情</span></span><br><span class="line">[root@kmaster ~]# kubectl describe deploy nginx-deploy</span><br><span class="line">...</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason             Age    From                   Message</span><br><span class="line">  ----    ------             ----   ----                   -------</span><br><span class="line">  Normal  ScalingReplicaSet  3m57s  deployment-controller  Scaled up replica set nginx-deploy-58f69cfc57 to 1</span><br><span class="line">  Normal  ScalingReplicaSet  3m57s  deployment-controller  Scaled down replica set nginx-deploy-d47dbbb7c to 3</span><br><span class="line">  Normal  ScalingReplicaSet  3m57s  deployment-controller  Scaled up replica set nginx-deploy-58f69cfc57 to 2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5. 查看 Deployment 的历史版本</span></span><br><span class="line">[root@kmaster ~]# kubectl rollout history deploy nginx-deploy</span><br><span class="line">deployment.apps/nginx-deploy </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         kubectl apply --filename=nginx-deploy.yaml --record=true</span><br><span class="line">2         kubectl set image deploy nginx-deploy nginx=nginx:1.16.1 --record=true</span><br><span class="line">3         kubectl set image deploy nginx-deploy nginx=nginx:1.161 --record=true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6. 查看某个版本的详情</span></span><br><span class="line">[root@kmaster ~]# kubectl rollout history deploy nginx-deploy --revision=3</span><br><span class="line">deployment.apps/nginx-deploy with revision #3</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:app=nginx</span><br><span class="line">pod-template-hash=58f69cfc57</span><br><span class="line">  Annotations:kubernetes.io/change-cause: kubectl set image deploy nginx-deploy nginx=nginx:1.161 --record=true</span><br><span class="line">  Containers:</span><br><span class="line">   nginx:</span><br><span class="line">    Image:nginx:1.161</span><br><span class="line">    Port:80/TCP</span><br><span class="line">    Host Port:0/TCP</span><br><span class="line">    Environment:&lt;none&gt;</span><br><span class="line">    Mounts:&lt;none&gt;</span><br><span class="line">  Volumes:&lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 7. 回滚到前一个版本</span></span><br><span class="line">[root@kmaster ~]# kubectl rollout undo deploy nginx-deploy</span><br><span class="line">deployment.apps/nginx-deploy rolled back</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 8. 回滚到指定的版本</span></span><br><span class="line">[root@kmaster ~]# kubectl rollout undo deploy nginx-deploy --to-revision=1</span><br><span class="line">deployment.apps/nginx-deploy rolled back</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 9. 查看历史版本信息</span></span><br><span class="line">[root@kmaster ~]# kubectl rollout history deploy nginx-deploy</span><br><span class="line">deployment.apps/nginx-deploy </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">3         kubectl set image deploy nginx-deploy nginx=nginx:1.161 --record=true</span><br><span class="line">4         kubectl set image deploy nginx-deploy nginx=nginx:1.16.1 --record=true</span><br><span class="line">5         kubectl apply --filename=nginx-deploy.yaml --record=true</span><br></pre></td></tr></table></figure><p>通过 <code>kubectl rollout undo</code> 命令可回滚到上一个版本或指定的版本，上述示例也可看出，回滚到历史版本，会将历史版本的序号设置为最新序号。如前所述，我们可以通过设置 Deployment 的 <code>.spec.revisionHistoryLimit</code> 来指定保留多少个旧的 ReplicaSet（或 revision），超出该数字的将在后台进行垃圾回收。如果该字段被设为 0，Kubernetes 将清理掉该 Deployment 的所有历史版本（revision），此时，将无法对该 Deployment 执行回滚操作了。</p><h3 id="5-伸缩"><a href="#5-伸缩" class="headerlink" title="5. 伸缩"></a>5. 伸缩</h3><p>可以通过 <code>kubectl scale</code> 命令或 <code>kubectl edit</code> 修改定义的方式来对 Deployment 进行伸缩，增加或减少 Pod 的副本数，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将 Pod 数缩放到2个</span></span><br><span class="line">[root@kmaster ~]# kubectl scale deploy nginx-deploy --replicas=2</span><br><span class="line">deployment.apps/nginx-deploy scaled</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 Pod</span></span><br><span class="line">[root@kmaster ~]# kubectl  get pod</span><br><span class="line">NAME                           READY   STATUS        RESTARTS   AGE</span><br><span class="line">nginx-deploy-59c9f8dff-7bpjp   1/1     Running       0          9m48s</span><br><span class="line">nginx-deploy-59c9f8dff-tpxzf   0/1     Terminating   0          8m57s</span><br><span class="line">nginx-deploy-59c9f8dff-v8fgz   0/1     Terminating   0          10m</span><br><span class="line">nginx-deploy-59c9f8dff-w8s9z   1/1     Running       0          10m</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 ReplicaSet，DESIRED 变为2了</span></span><br><span class="line">[root@kmaster ~]# kubectl get rs</span><br><span class="line">NAME                      DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deploy-58f69cfc57   0         0         0       22m</span><br><span class="line">nginx-deploy-59c9f8dff    2         2         2       3d8h</span><br><span class="line">nginx-deploy-d47dbbb7c    0         0         0       102m</span><br></pre></td></tr></table></figure><h3 id="6-自动伸缩（HPA）"><a href="#6-自动伸缩（HPA）" class="headerlink" title="6. 自动伸缩（HPA）"></a>6. 自动伸缩（HPA）</h3><p>如果集群启用了自动伸缩（HPA —— Horizontal Pod Autoscaling），则可以基于 CPU、 内存的使用率在一个最大和最小的区间对 Deployment 实现自动伸缩，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个 HPA</span></span><br><span class="line">[root@kmaster ~]# kubectl autoscale deploy nginx-deploy --min=2 --max=4 --cpu-percent=80</span><br><span class="line">horizontalpodautoscaler.autoscaling/nginx-deploy autoscaled</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 HPA</span></span><br><span class="line">[root@kmaster ~]# kubectl get hpa</span><br><span class="line">NAME           REFERENCE                 TARGETS         MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">nginx-deploy   Deployment/nginx-deploy   &lt;unknown&gt;/80%   2         4         2          16s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除 HPA</span></span><br><span class="line">[root@kmaster ~]# kubectl delete hpa nginx-deploy</span><br><span class="line">horizontalpodautoscaler.autoscaling "nginx-deploy" deleted</span><br></pre></td></tr></table></figure><h3 id="7-暂停与恢复"><a href="#7-暂停与恢复" class="headerlink" title="7. 暂停与恢复"></a>7. 暂停与恢复</h3><p>我们可以将一个 Deployment 暂停（pause），然后在它上面做一个或多个更新，此时 Deployment 并不会触发更新，只有再恢复（resume）该 Deployment，才会执行该时间段内的所有更新。这种做法可以在暂停和恢复中间对 Deployment 做多次更新，而不会触发不必要的滚动更新。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 暂停 Deployment</span></span><br><span class="line">[root@kmaster ~]# kubectl rollout pause deploy nginx-deploy</span><br><span class="line">deployment.apps/nginx-deploy paused</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 更新容器镜像</span></span><br><span class="line">[root@kmaster ~]# kubectl set image deploy nginx-deploy nginx=nginx:1.9.1 --record</span><br><span class="line">deployment.apps/nginx-deploy image updated</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 查看版本历史， 此时并没有触发更新</span></span><br><span class="line">[root@kmaster ~]# kubectl rollout history deploy nginx-deploy</span><br><span class="line">deployment.apps/nginx-deploy </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">3         kubectl set image deploy nginx-deploy nginx=nginx:1.161 --record=true</span><br><span class="line">4         kubectl set image deploy nginx-deploy nginx=nginx:1.16.1 --record=true</span><br><span class="line">5         kubectl apply --filename=nginx-deploy.yaml --record=true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 更新 Resource 限制，同样并不会触发更新</span></span><br><span class="line">[root@kmaster ~]# kubectl set resources deploy nginx-deploy -c=nginx --limits=memory=512Mi,cpu=500m</span><br><span class="line">deployment.apps/nginx-deploy resource requirements updated</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5. 查看修改，Pod 定义已被更新</span></span><br><span class="line">[root@kmaster ~]# kubectl describe deploy nginx-deploy</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:  app=nginx</span><br><span class="line">  Containers:</span><br><span class="line">   nginx:</span><br><span class="line">    Image:      nginx:1.9.1</span><br><span class="line">    Port:       80/TCP</span><br><span class="line">    Host Port:  0/TCP</span><br><span class="line">    Limits:</span><br><span class="line">      cpu:        500m</span><br><span class="line">      memory:     512Mi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6. 恢复 Deployment</span></span><br><span class="line">[root@kmaster ~]# kubectl rollout resume deploy nginx-deploy</span><br><span class="line">deployment.apps/nginx-deploy resumed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 7. 查看版本历史，可见两次修改只做了一次 rollout</span></span><br><span class="line">[root@kmaster ~]# kubectl rollout history deploy nginx-deploy</span><br><span class="line">deployment.apps/nginx-deploy</span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">3         kubectl set image deploy nginx-deploy nginx=nginx:1.161 --record=true</span><br><span class="line">4         kubectl set image deploy nginx-deploy nginx=nginx:1.16.1 --record=true</span><br><span class="line">5         kubectl apply --filename=nginx-deploy.yaml --record=true</span><br><span class="line">6         kubectl set image deploy nginx-deploy nginx=nginx:1.9.1 --record=true</span><br></pre></td></tr></table></figure><p>在更新容器镜像时，因为 Deployment 处于暂停状态，所以并不会生成新的版本（Revision），当 Deployment 恢复时，才将这段时间的更新生效，执行滚动更新，生成新的版本。在暂停中的 Deployment 上做的更新， 因为没有生成版本，因此也不能回滚（rollback）。也不能对处于暂停状态的 Deployment 执行回滚操作，只有在恢复（Resume）之后才能执行回滚操作。</p><h3 id="8-金丝雀发布"><a href="#8-金丝雀发布" class="headerlink" title="8. 金丝雀发布"></a>8. 金丝雀发布</h3><p>金丝雀发布也叫灰度发布。当我们需要发布新版本时，可以针对新版本新建一个 Deployment，与旧版本的 Deployment 同时挂在一个 Service 下（通过 label match）， 通过 Service 的负载均衡将用户请求流量分发到新版 Deployment 的 Pod 上，观察新版运行情况，如果没有问题再将旧版 Deployment 的版本更新到新版完成滚动更新，最后删除新建的 Deployment。很明显这种金丝雀发布具有一定的局限性，无法根据用户或地域来分流，如果要更充分地实现金丝雀发布，则可能需要引入 Istio 等。</p><blockquote><p>金丝雀发布名称的由来： 以前，旷工在下矿洞时面临的一个重要危险是矿井中的毒气，他们想到一个办法来辨别矿井中是否有毒气，矿工们随身携带一只金丝雀下矿井，金丝雀对毒气的抵抗能力比人类要弱，在毒气环境下会先挂掉从而起到预警的作用。它背后的原理是：用较小的代价试错，即使出现了严重的错误（出现了毒气），系统总体的损失也是可承受的或者是非常小的（失去了一只金丝雀）。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Kubernetes 中最小的调度单元是 Pod， 负载创建 Pod 并控制其按一定的副本数运行的是 ReplicaSet， 而 Deployment 可以以“声明式”的方式来管理 Pod 和 ReplicaSet，并提供滚动更新与版本（revision）回退功能。所以，一般使用 Deployment 来部署应用， 而不直接操作 ReplicaSet 或 Pod。</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Kubernetes Ingress 中支持 Websocket/Socket 服务</title>
      <link href="/k8s-tcp-service.html"/>
      <url>/k8s-tcp-service.html</url>
      
        <content type="html"><![CDATA[<p>Kubernetes Ingress 可将集群内部的 Service 通过 HTTP/HTTPS 的方式暴露供外部访问，并通过路径匹配规则定义服务的路由。但是 Ingress 对 TCP/UDP 的服务却支持的不那么好。如果我们服务中有使用 Websocket 或 Socket， 需要暴露给外部访问，在 Kubernetes 中该如何配置呢？</p><a id="more"></a><p>大致有两种方式[见参考文档1]：</p><ol><li>使用 NodePort， 使用节点 IP 与 NodePort 暴露的端口访问</li><li>使用 ClusterIp + Ingress + ConfigMap</li></ol><p>使用 NodePort 将端口直接暴露，需要节点有外网 IP，且该方式可能绕过现有的 TLS， 存在安全性的问题。</p><p>ClusterIp 只能在集群内部访问，由 Ingress 进行代理对外暴露，但对于 TCP/UDP， Ingress 不支持直接代理， 需要借助 ConfigMap 进行映射。 </p><p>NodePort 的方式比较简单， 本文介绍 ClusterIp + Ingress + ConfigMap 的方式。</p><h2 id="创建-ClusterIp-服务"><a href="#创建-ClusterIp-服务" class="headerlink" title="创建 ClusterIp 服务"></a>创建 ClusterIp 服务</h2><p>假设有一个 Websocket/Socket 服务，暴露端口 8828， 针对该服务定义 ClusterIp 配置如下（不声明 type， 默认即为 ClusterIp），</p><figure class="highlight yaml"><figcaption><span>my-websocket-svc.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-websocket-svc</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">develop</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">socket</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8828</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8828</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-websocket</span></span><br></pre></td></tr></table></figure><p>创建 ClusterIp，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster k8s-deploy]# kubectl apply -f my-websocket-svc.yaml</span><br></pre></td></tr></table></figure><h2 id="创建-ConfigMap"><a href="#创建-ConfigMap" class="headerlink" title="创建 ConfigMap"></a>创建 ConfigMap</h2><p>在 ingress-nginx-controller 所在的 namespace 下创建 ConfigMap（如果已经有 ConfigMap 了， 则可在已有 ConfigMap 的 data 部分添加下面配置中的 data 条目）</p><figure class="highlight yaml"><figcaption><span>tcp-service-configmap.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tcp-services</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">8828:</span> <span class="string">"develop/my-websocket-svc:8828"</span></span><br></pre></td></tr></table></figure><p>data 部分的格式为： <code>&lt;namespace/service name&gt;:&lt;service port&gt;:[PROXY]:[PROXY]</code>， <code>[PROXY]:[PROXY]</code> 部分为可选。 上述配置表示将宿主机的 8828 端口 映射到 develop namespace 下 my-websocket-svc 服务的 8828 端口上。</p><p>创建 ConfigMap，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster k8s-deploy]# kubectl apply -f tcp-service-configmap.yaml</span><br></pre></td></tr></table></figure><h2 id="配置-ingress-nginx-controller"><a href="#配置-ingress-nginx-controller" class="headerlink" title="配置 ingress-nginx-controller"></a>配置 ingress-nginx-controller</h2><p>修改 ingress-nginx-controller 的配置，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster ~]# kubectl edit deploy ingress-nginx-controller -n ingress-nginx</span><br></pre></td></tr></table></figure><p>在 <code>.spec.template.spec.containers[].args[]</code> 部分添加 <code>--tcp-services-configmap=$(POD_NAMESPACE)/tcp-services</code> （或针对 UDP， <code>--udp-services-configmap=$(POD_NAMESPACE)/udp-services</code>）， 如下图所示</p><p><img src="/assets/ingress-tcp.png" alt="ingress-tcp"></p><p>在<code>.spec.template.spec.containers[].ports[]</code> 部分添加 port 映射，如图</p><p><img src="/assets/ingress-tcp-port.png" alt="ingress-tcp-port"></p><blockquote><p>经验证，不加该部分 port 映射配置也没问题</p></blockquote><p>保存，应用配置更新，nginx-ingress-controller 将会自动重启 Pod，使配置生效。</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>在 nginx-ingress-controller Pod 所在节点上执行如下命令查看是否监听了 TCP 端口，</p><p><img src="/assets/ingress-tcp-check.png" alt="ingress-tcp-check"></p><p>如上，8828 端口已被 nginx-ingress 监听。</p><p>对于 Websocket 应用， 可使用 wscat 进行调试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;wscat -c ws://域名:8828</span><br><span class="line">Connected (press CTRL+C to quit)</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>wscat 安装： <code>npm install -g wscat</code></p></blockquote><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol><li>注意 ConfigMap 的 namesapce 与 nginx-ingress-controller 一致，否则将 <code>--tcp-services-configmap=$(POD_NAMESPACE)/tcp-services</code> 中的 <code>$(POD_NAMESPACE)</code> 改为 ConfigMap 具体的 namesapce</li><li>如果将 nginx-ingress-controller 绑定了节点，则重启可能导致失败（因为端口分配冲突），可先删除（<code>kubectl delete deploy ingress-nginx-controller -n ingress-nginx</code>），再新建（<code>kubectl apply -f nginx-ingress.yaml</code>），该操作会影响服务可用性，生产环境需慎重</li><li>如果配置后未生效，可通过查看 nginx-ingress-controller Pod 的日志定位原因 <code>kubectl logs ingress-nginx-controller-58fdbbc68d-wqtlr -n ingress-nginx</code></li></ol><p><em>参考文档：</em></p><ol><li><a href="https://www.ibm.com/support/knowledgecenter/en/SSSHTQ/omnibus/helms/all_helms/wip/reference/hlm_expose_probe.html" target="_blank" rel="noopener">https://www.ibm.com/support/knowledgecenter/en/SSSHTQ/omnibus/helms/all_helms/wip/reference/hlm_expose_probe.html</a></li><li><a href="https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/exposing-tcp-udp-services.md" target="_blank" rel="noopener">https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/exposing-tcp-udp-services.md</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes笔记（五）：了解Pod（容器组）</title>
      <link href="/k8s5-pod.html"/>
      <url>/k8s5-pod.html</url>
      
        <content type="html"><![CDATA[<p>Kubernetes 中， 容器总是以 Pod（容器组）的方式进行调度与运行。因此对 Pod 的理解与掌握是学习 Kubernetes 的基础。</p><a id="more"></a><h2 id="理解-Pod"><a href="#理解-Pod" class="headerlink" title="理解 Pod"></a>理解 Pod</h2><p>Pod（容器组）是 Kubernetes 中最小的调度单元，每一个Pod都是某个应用程序的一个运行实例。以前我们的 Web 应用都是以 Tomcat 等 Web 容器进程的形式运行在操作系统中，在 Kubernetes 中，我们需要将 Web 应用打成镜像，以容器的方式运行在 Pod 中。</p><p>Kubernetes 不会直接管理容器，而是通过 Pod 来管理。一个Pod包含如下内容：</p><ol><li>一个或多个容器， 一般是一个，除非多个容器紧密耦合共享资源才放在一个 Pod 中；</li><li>共享的存储资源（如数据卷），一个 Pod 中的容器是可以共享存储空间的；</li><li>一个共享的 IP 地址，Pod 中容器之间可以通过 localhost:port 彼此访问；</li><li>定义容器该如何运行的选项。</li></ol><p>Pod 中的容器可包括两种类型：</p><ol><li>工作容器：就是我们通常运行服务进程的容器</li><li>初始化容器：完成一些初始化操作的容器，初始化容器在工作容器之前运行，所有的初始化容器成功执行后，才开始启动工作容器</li></ol><h2 id="管理-Pod"><a href="#管理-Pod" class="headerlink" title="管理 Pod"></a>管理 Pod</h2><h3 id="创建-Pod"><a href="#创建-Pod" class="headerlink" title="创建 Pod"></a>创建 Pod</h3><p>在 Kubernetes 中，我们一般不直接创建 Pod，而是通过控制器来调度管理（Deployment，StatefulSet，DaemonSet 等），这里为了便于了解，先通过 yaml 配置文件的方式定义 Pod 来直接创建 Pod。定义配置文件 pod-test.yaml 如下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-test</span>  <span class="comment"># pod 名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span> <span class="comment"># pod 创建的 namespace</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span>     <span class="comment"># pod 中容器定义</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">hostPort:</span> <span class="number">8081</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">workdir</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span> <span class="comment"># 重启策略</span></span><br><span class="line">  <span class="attr">volumes:</span>                 <span class="comment"># 数据卷定义</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">workdir</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/tmp</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">Directory</span></span><br></pre></td></tr></table></figure><p>其中 spec 部分的 containers 定义了该 Pod 中运行的容器，从 containers 的复数形式也可以看出一个 Pod 中是可以运行多个容器的。</p><p>执行 <code>kubectl create</code> 或 <code>kubectl apply</code> 命令创建 Pod，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster test]# kubectl create -f pod-test.yaml</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">[root@kmaster test]# kubectl apply -f pod-test.yaml</span><br></pre></td></tr></table></figure><p>该 Pod 创建后将会拉取一个最新的 nginx 镜像，运行一个 nginx 容器，并将容器的 80 端口映射到宿主机的 8081 端口。</p><h3 id="查看-Pod"><a href="#查看-Pod" class="headerlink" title="查看 Pod"></a>查看 Pod</h3><p>可使用 <code>kubectl get pods</code> 命令查看当前 namesapce 下的所有 Pod，加 Pod 名称查看具体某个 Pod。 如果需要查看 Pod 调度到了哪个节点，可加 <code>-o wide</code> 选项，如果查看 yaml 文件信息则可加 <code>-o yaml</code> 选项， 如下所示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster test]# kubectl get pods</span><br><span class="line">NAME                           READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod-test                       1/1     Running   0          116s</span><br><span class="line"></span><br><span class="line">[root@kmaster test]# kubectl get pods pod-test -o wide</span><br><span class="line">NAME                           READY   STATUS    RESTARTS   AGE     IP            NODE     NOMINATED NODE   READINESS GATES</span><br><span class="line">pod-test                       1/1     Running   0          2m19s   10.244.1.42   knode2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">[root@kmaster test]# kubectl get pods pod-test -o yaml</span><br></pre></td></tr></table></figure><p>如果要查看更多的信息，可使用 <code>kubectl describe</code> 命令，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster test]# kubectl describe pod pod-test</span><br></pre></td></tr></table></figure><p>该命令输出内容如下图，</p><p><img src="/assets/describe-pod.png" alt="describe-pod"></p><p>各部分说明：</p><ol><li>Status: Pending， 表示 Pod 的整体状态，当前处于 Pending 状态；</li><li>State: Waiting，Pod 中每个容器都有一个自己的状态 State， 当前容器 nginx 处于 Waiting 状态，Reason: ContainerCreating 表示容器还处于创建中，Ready：False 表明容器还未就绪，还不能对外提供服务；</li><li>Conditions， 这部分聚合了一些状态，第一个 Initialized：True，表明已经完成了初始化；而第二个 Ready：False，表明 Pod 还未就绪；ContainersReady：False，表明容器还未就绪；  PodScheduled：True，表明 Pod 已经被调度到某个具体的节点上了；</li><li>3中不同的状态之间的转换都会发生相应的事件，事件类型包括 Normal 与 Warning 两种， 从上图可看到一个 Pulling image 的 Normal 事件，表示当前正在拉取 Pod 中容器的镜像。</li></ol><p>当 Pod 在调度或运行中出现问题时，我们都可以使用 <code>kubectl describe</code> 命令来进行排查，通过其中的状态及事件来判断问题产生的可能原因。</p><h3 id="进入-Pod-容器"><a href="#进入-Pod-容器" class="headerlink" title="进入 Pod 容器"></a>进入 Pod 容器</h3><p>通过 <code>kubectl exec</code> 命令可进入 Pod， 类似于 <code>docker exec</code>， 如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果 Pod 中只有一个容器</span></span><br><span class="line">[root@kmaster test]# kubectl exec -it pod-test bash</span><br><span class="line">root@pod-test:/#</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果 Pod 中有多个容器</span></span><br><span class="line">kubectl exec -it pod-name -c container-name /bin/bash</span><br></pre></td></tr></table></figure><p>如果一个 Pod 中有多个容器，则需要通过 <code>-c</code> 指定进入哪个容器。</p><h3 id="更新-删除-Pod"><a href="#更新-删除-Pod" class="headerlink" title="更新/删除 Pod"></a>更新/删除 Pod</h3><p>Kubernetes 对 Pod 的更新做了限制，除了更改 Pod 中容器（包括工作容器与初始化容器）的镜像，以及 activeDeadlineSeconds （对 Job 类型的 Pod 定义失败重试的最大时间）， tolerations （Pod 对污点的容忍），修改其它部分将不会产生作用，如我们可以尝试在前面 Pod 定义文档 pod-test.yaml 中将宿主机端口 8081 改为 8082，重新执行 <code>kubectl apply</code>， 将提示如下错误，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster test]# kubectl apply -f pod-test.yaml</span><br><span class="line">The Pod "pod-test" is invalid: spec: Forbidden: pod updates may not change fields other than `spec.containers[*].image`, `spec.initContainers[*].image`, `spec.activeDeadlineSeconds` or `spec.tolerations` (only additions to existing tolerations)</span><br></pre></td></tr></table></figure><p>通过 <code>kubectl delete</code> 命令可删除一个 Pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster test]# kubectl delete pod pod-test</span><br></pre></td></tr></table></figure><p>在 Kubernetes 中，一般不直接创建，更新或删除单个 Pod，而是通过 Kubernetes 的 Controller（控制器）来管理 Pod，包括 ReplicSet（一般也不直接用，推荐Deployment方式）， Deployment，StatefulSet，DaemonSet 等。</p><p>控制器提供如下功能：</p><ol><li>水平伸缩，控制运行 Pod 指定个数的副本</li><li>rollout，即版本更新</li><li>故障恢复，当一个节点出现故障，或资源不够，或进入维护中，控制器会自动在另一个合适的节点调度一个一样的 Pod，以保障 Pod 以一定的副本数运行</li></ol><h2 id="Pod-状态"><a href="#Pod-状态" class="headerlink" title="Pod 状态"></a>Pod 状态</h2><p>Pod状态并不是容器的状态，容器的状态一般包括：</p><p>Waiting： 容器的初始状态，处于 Waiting 状态的容器，表示仍然有对应的操作在执行，例如：拉取镜像、应用 Secrets等<br>Running： 容器处于正常运行的状态<br>Terminated： 容器处于结束运行的状态</p><p>而Pod的状态一般包括：</p><ul><li>Pending： Kubernetes 已经创建并确认该 Pod，可能两种情况： 1. Pod 还未完成调度（例如没有合适的节点）；2. 正在从 docker registry 下载镜像</li><li>Running： 该 Pod 已经被绑定到一个节点，并且该 Pod 所有的容器都已经成功创建，其中至少有一个容器正在运行，或者正在启动/重启</li><li>Succeeded：Pod 中的所有容器都已经成功终止，并且不会再被重启</li><li>Failed：Pod 中的所有容器都已经终止，至少一个容器终止于失败状态：容器的进程退出码不是 0，或者被系统 kill</li><li>Unknown： 因为某些未知原因，不能确定 Pod 的状态，通常的原因是 master 与 Pod 所在节点之间的通信故障</li></ul><p>状态之间的变迁关系如图</p><p><img src="/assets/pod-status-trans.png" alt="pod-status-trans"></p><p>Pod 刚开始处于 Pending 的状态，接下来可能会转换到 Running，也可能转换到 Unknown，甚至可能转换到 Failed。然后，当 Running 执行了一段时间之后，它可以转换到类似像 Successded 或者是 Failed。 当出现 Unknown 这个状态时，可能由于一些状态的恢复，它会重新恢复到 Running 或者 Successded 或者是 Failed。</p><h2 id="重启策略"><a href="#重启策略" class="headerlink" title="重启策略"></a>重启策略</h2><p>定义 Pod 或工作负载时，可以指定 restartPolicy，可选的值有：</p><ol><li>Always：默认值，只要退出就重启</li><li>OnFailure：失败退出时（exit code 不为 0）才重启</li><li>Never： 永远不重启</li></ol><p>restartPolicy 作用于 Pod 中的所有容器。kubelete 将在五分钟内，按照递延的时间间隔（10s, 20s, 40s …）尝试重启已退出的容器，并在十分钟后再次启动这个循环，直到容器成功启动，或者 Pod 被删除。在控制器 Deployment/StatefulSet/DaemonSet 中，只支持 Always 这一个选项，不支持 OnFailure 和 Never 选项。</p><h2 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h2><p>提高应用服务的可用性与稳定性，一般可从两个方面来进行：</p><ol><li>首先是提高应用的可观测性，如对应用的健康状态，资源的使用情况，应用日志等可进行实时的观测</li><li>第二是提高应用的可恢复能力，在应用出现故障时，能通过自动重启等方式进行恢复</li></ol><p>Kubernetes 中对 Pod 的健康检查提供了两种方式：</p><ol><li>Readiness probe，就绪探测，用来判断一个 Pod 是否处于就绪状态，是否能对外提供相应服务了。当Pod处于就绪状态时，负载均衡器才会将流量打到这个 Pod，否则将把流量从这个 Pod 上面摘除。</li><li>Liveness probe，存活探测，用来判断一个 Pod 是否处于存活状态，如果一个 Pod 被探测到不处于存活状态，则由上层判断机制来处理，如果上层配置重启策略为 restart always 的话，Pod 就会被重启。</li></ol><p>Liveness probe 适用场景是支持那些可以重新拉起的应用，而 Readiness probe 主要应对的是启动之后无法立即对外提供服务的应用。</p><p>就绪探测、存活探测目前支持三种不同的探测方式：</p><ol><li>httpGet，通过发送http Get请求来判断，返回状态码在 200-399之间，认为是探测成功</li><li>Exec，通过执行容器中的一个命令来判断服务是否正常，如果命令的退出状态码为 0，表示成功</li><li>tcpSocket，通过容器的IP，端口来进行TCP连接检查，如果TCP连接能被正常建立，则认为成功</li></ol><p>以 httpGet 为例，示例配置文件如下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="comment"># ... 与前同</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">workdir</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">httpHeaders:</span> <span class="comment"># 此处header无意义，仅作示例</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">purpose</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">for-test</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">5</span></span><br><span class="line">  <span class="comment"># ... 与前同</span></span><br></pre></td></tr></table></figure><p>删除之前的 Pod， 重新创建，使用 <code>kubectl describe</code> 查看，可看到 Events 部分如下图，</p><p><img src="/assets/liveness-probe.png" alt="liveness-probe"></p><p>Http 存活探测失败，状态码返回 403， 导致容器重启。出现这个错误的原因是前面做目录挂载时将 nginx 的 html 目录挂载到了宿主机的 /tmp 目录， 而 /tmp 目录没有 index.html 文件，导致请求返回403， 在 Pod 调度到的宿主机 /tmp 目录下创建 index.html 文件即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo '&lt;h1&gt;Hello, K8s!&lt;/h1&gt;' &gt; /tmp/index.html</span><br></pre></td></tr></table></figure><p>其它 Exec，tcpSocket 探测的配置示例如下（配置在 containers 元素下），</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># exec</span></span><br><span class="line"><span class="attr">livenessProbe:</span></span><br><span class="line">  <span class="attr">exec:</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/tmp/healthy</span></span><br><span class="line">  <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">periodSeconds:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tcpSocket</span></span><br><span class="line"><span class="attr">livenessProbe:</span></span><br><span class="line">  <span class="attr">tcpSocket:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>支持的参数说明：</p><ul><li>initialDelaySeconds：延迟探测时间，表示 Pod 启动延迟多久后进行一次检查，比如某个应用启动时间如果较长的话，可以设置该值为略大于启动时间；</li><li>periodSeconds：探测频率，表示探测的时间间隔，正常默认的这个值是 10 秒；</li><li>timeoutSeconds：超时时间，表示探测的超时时间，当超时时间之内没有检测成功，那会认为失败；</li><li>successThreshold：健康阈值，表示当这个 Pod 从探测失败到再一次判断探测成功，所需要的阈值次数，默认情况下是 1 次。如果之前探测失败，接下来的一次探测成功了，就会认为这个 Pod 是处在一个正常的状态；</li><li>failureThreshold： 不健康阈值，与 successThreshold 相对，表示认为探测失败需要重试的次数，默认值是 3。意思是当从一个健康的状态连续探测到 3 次失败，就会认为Pod 的状态处在一个失败的状态。</li></ul><p>readinessProbe 配置与 livenessProbe 类似。阿里云上配置就绪检查如图所示：</p><p><img src="/assets/aliyun-readiness-probe.png" alt="aliyun-readiness-probe"></p><p>健康检查的结果分为三种：</p><ol><li>Success，表示 container 通过了健康检查，也就是 Liveness probe 或 Readiness probe 是正常的一个状态；</li><li>Failure，表示 container 没有通过健康检查。针对 Readiness probe，service 层就会将没有通过 Readiness probe 的 pod 进行摘除，不再分发请求到该 Pod；针对 Liveness probe，就会将这个 pod 进行重新拉起，或者是删除。</li><li>Unknown，表示当前的执行机制没有进行完整的一个执行，可能是因为类似像超时或者像一些脚本没有及时返回，此时 Readiness probe 或 Liveness probe 不做任何操作，会等待下一次的机制来进行检查。</li></ol><p>健康检查的一些实践建议：</p><ol><li>如果容器中的进程在碰到问题时可以自己 crash，就不需要执行存活探测，因为 kubelet 可以自动的根据 Pod 的 restartPolicy（重启策略）来执行对应的动作；</li><li>如果希望在容器的进程无响应后，将容器重启，则指定一个存活探测 livenessProbe，并同时指定 restartPolicy（重启策略）为 Always 或者 OnFailure；</li><li>如果希望在 Pod 确实就绪之后才向其分发服务请求，就指定一个就绪检查 readinessProbe；</li><li>适当调大 exec 探测的超时阈值，因为在容器里面执行一个 shell 脚本，它的执行时长是非常长的，平时在一台虚机上执行可能 3 秒返回的一个脚本在容器里面可能需要 30 秒。可以适当调大超时阈值，来防止由于容器压力比较大的时候出现偶发的超时；</li><li>调整失败判断的次数，3 次的默认值有时候可能不一定是最佳实践，适当调整一下判断的次数也是一个比较好的方式；</li><li>使用 tcpSocket 方式进行判断的时候，如果遇到了 TLS 的服务，那可能会造成后边 TLS 里面有很多这种未鉴权的 tcp 连接，这时候需要自己针对业务场景判断这种连接是否会对业务造成影响。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文对 Pod 的概念与基本的管理操作，Pod 的状态变迁机制与重启策略进行了介绍，对 Pod 的健康检查进行了详细的了解。但在 Kubernetes 中，我们一般不直接创建 Pod，而是通过控制器，如Deployment，StatefulSet，DaemonSet， 因为控制器能为我们提供水平伸缩，rollout（版本更新），self-healing（故障恢复）等能力。我们将在接下来的文章了解控制器。</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器缓存常用策略及Vue应用的Nginx缓存设置</title>
      <link href="/browser-cache.html"/>
      <url>/browser-cache.html</url>
      
        <content type="html"><![CDATA[<p>最近一次移动端Vue应用的上线，导致某些用户使用某些功能时出现问题，经主动清空缓存后恢复。有时候清空微信应用的存储空间缓存仍不能解决问题，此时安卓机可借助微信TBS调试工具 <a href="http://debugx5.qq.com" target="_blank" rel="noopener">http://debugx5.qq.com</a> （微信中打开页面，勾选最下面四个选项清除缓存），但该工具目前只支持安卓手机，苹果机就比较麻烦了。为了找到问题的本质，从根本上避免问题，最近浏览了一些文章，其中有一篇对浏览器缓存的分析及在Nginx中对应的处理策略总结的比较好，这里分享给大家。</p><a id="more"></a><ul><li>原文标题：http常用缓存策略及vue-cli单页面应用服务器端(nginx)如何设置缓存</li><li>原文地址：<a href="http://www.shanhuxueyuan.com/news/detail/125.html" target="_blank" rel="noopener">http://www.shanhuxueyuan.com/news/detail/125.html</a></li></ul><p><em>以下为原文。</em></p><p>关于http或者是浏览器缓存策略，我认为可以分为这三种：</p><ul><li>不使用缓存</li><li>强制使用缓存</li><li>协商使用缓存</li></ul><h2 id="不使用缓存"><a href="#不使用缓存" class="headerlink" title="不使用缓存"></a>不使用缓存</h2><p>有时，我们希望浏览器永远都不要使用缓存，全部到服务器拉取数据，此时即为不使用缓存，我们可以在服务端通过Cache-Control为 no-store实现。</p><p><img src="/assets/httpcache1.png" alt="httpcache1"></p><p>服务器端针对上面文件设置了no-store，可以看到在请求的时候，无论怎么刷新，都是返回200，不会显示304，也不会显示“memory cache”或“disk cache”，说明真的都是从服务器重新拉取数据。</p><p>比如我们想设置html文件不缓存，可以在域名的解析配置中如下设置，当文件后缀为html或htm时add_header Cache-Control “no-store”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name yourdomain.com;</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">    try_files $uri $uri&#x2F; &#x2F;index.html;</span><br><span class="line">    root &#x2F;yourdir&#x2F;;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">    if ($request_filename ~* .*\.(?:htm|html)$)</span><br><span class="line">    &#123;</span><br><span class="line">        add_header Cache-Control &quot;no-store&quot;;  &#x2F;&#x2F;对html文件设置永远不缓存</span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式缺点就是每次都要去服务端拉取文件，即使文件没有更新，很明显这样增加了不必要的带宽消耗。</p><p>如果文件没有更新，我们就使用缓存，只有更新了才去拉取最新文件，这样多好，这就是协商缓存。</p><h2 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h2><p>协商缓存就是浏览器携带文件缓存标识（如Last-Modified或ETag），向服务器发送请求，由服务器根据文件缓存标识来决定是否使用缓存，如果文件没有更新，则告诉浏览器使用本地缓存，如果文件更新了，则直接返回新文件内容。</p><p>可以看出，相比不使用缓存，协商缓存是会大大减少带宽消耗的。</p><ul><li>协商缓存生效，返回304 和 Not Modified</li></ul><p><img src="/assets/httpcache2.png" alt="httpcache2"></p><ul><li>协商缓存无效，返回200和请求文件</li></ul><p><img src="/assets/httpcache3.png" alt="httpcache3"></p><p>我们在浏览器调试页面，可以看到有304的，即是使用了协商缓存</p><p><img src="/assets/httpcache4.png" alt="httpcache4"></p><p>服务器返回的header中会有Last-Modified和ETag标识，而浏览器请求header中会包含If-Modified-Since和If-None-Match</p><p><img src="/assets/httpcache5.png" alt="httpcache5"></p><h3 id="Last-Modified和If-Modified-Since"><a href="#Last-Modified和If-Modified-Since" class="headerlink" title="Last-Modified和If-Modified-Since"></a>Last-Modified和If-Modified-Since</h3><p>在 http 1.0 版本中，第一次请求资源时服务器通过 Last-Modified 来设置响应头的缓存标识，并且把资源最后修改的时间作为值填入，然后将资源返回给浏览器。在第二次请求时，浏览器会首先带上 If-Modified-Since 请求头去访问服务器，服务器会将 If-Modified-Since 中携带的时间与资源修改的时间匹配，如果时间不一致，服务器会返回新的资源，并且将 Last-Modified 值更新，作为响应头返回给浏览器。如果时间一致，表示资源没有更新，服务器返回 304 状态码，浏览器拿到响应状态码后从本地缓存数据库中读取缓存资源。</p><p>这种方式有2个弊端，第一个就是当服务器中的资源增加了一个字符，后来又把这个字符删掉，本身资源文件并没有发生变化，但修改时间发生了变化。当下次请求过来时，服务器也会把这个本来没有变化的资源重新返回给浏览器；第二个就是修改时间的单位为秒，所以存在1s的间隙，即使更新了，也会认为没有更新。</p><h3 id="ETag和If-None-Match"><a href="#ETag和If-None-Match" class="headerlink" title="ETag和If-None-Match"></a>ETag和If-None-Match</h3><p>在 http 1.1 版本中，服务器通过 Etag 来设置响应头缓存标识。Etag 的值由服务端生成，可以认为是文件内容的hash值。在第一次请求时，服务器会将资源和 Etag 一并返回给浏览器，浏览器将两者缓存到本地缓存数据库。在第二次请求时，浏览器会将 Etag 信息放到 If-None-Match 请求头去访问服务器，服务器收到请求后，会将服务器中的文件标识与浏览器发来的标识进行对比，如果不相同，服务器返回更新的资源和新的 Etag ，如果相同，服务器返回 304 状态码，浏览器读取缓存。</p><h3 id="两者对比"><a href="#两者对比" class="headerlink" title="两者对比"></a>两者对比</h3><ul><li>首先在精确度上，Etag要优于Last-Modified。Last-Modified的时间单位是秒，如果某个文件在1秒内改变了多次，那么他们的Last-Modified其实并没有体现出来修改，但是Etag每次都会改变确保了精度；如果是负载均衡的服务器，各个服务器生成的Last-Modified也有可能不一致。</li><li>第二在性能上，Etag要逊于Last-Modified，毕竟Last-Modified只需要记录时间，而Etag需要服务器通过算法来计算出一个hash值。</li><li>第三在优先级上，服务器校验优先考虑Etag</li></ul><h3 id="协商缓存服务端配置"><a href="#协商缓存服务端配置" class="headerlink" title="协商缓存服务端配置"></a>协商缓存服务端配置</h3><p>可以在服务端通过设置Cache-Control为 no-cache或者max-age=0来实现</p><h2 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h2><p>有时我们希望文件强制使用缓存，比如通过vue-cli产生的js和css，文件名上带有hash值，所以如果文件名没有变的时候，我们希望文件永久缓存，这样可以减少网络请求。</p><p>强制缓存整体流程比较简单，就是在第一次访问服务器取到数据之后，在过期时间之内不会再去重复请求。实现这个流程的核心就是如何知道当前时间是否超过了过期时间。</p><p>强制缓存的过期时间通过第一次访问服务器时返回的响应头获取。在 http 1.0 和 http 1.1 版本中通过不同的响应头字段实现。</p><p>在 http 1.0 版本中，强制缓存通过 Expires 响应头来实现。 expires 表示未来资源会过期的时间。也就是说，当发起请求的时间超过了 expires 设定的时间，即表示资源缓存时间到期，会发送请求到服务器重新获取资源。而如果发起请求的时间在 expires 限定的时间之内，浏览器会直接读取本地缓存数据库中的信息（from memory or from disk），两种方式根据浏览器的策略随机获取。</p><p>在 http 1.1 版本中，可以设置Cache-Control中的 max-age=xxx ，来表示缓存的资源将在 xxx 秒后过期。一般来说，为了兼容，两个版本的强制缓存都会被实现。</p><p>为什么有了Expires，后来又增加了max-age呢，这是因为Expires是一个绝对时间，有可能客户端的时间和服务器不一致，导致缓存不能按照预期进行，而max-age则是个相对时间，比如3600s，自浏览器请求后3600s之内，都使用本地缓存，和客户端的时间没关系。</p><h2 id="vue-cli缓存策略"><a href="#vue-cli缓存策略" class="headerlink" title="vue-cli缓存策略"></a>vue-cli缓存策略</h2><p>由于打包后的js、css和图片，一般名称都带有hash值，名称中的hash变了，自然会拉取新文件，所以我们可以将这类文件设置为强制缓存，只要文件名不变，就一直缓存，比如缓存100天或者一年。</p><p>而html文件则不能设为强制缓存，一般html名称是没法带hash值的，所以html如果设置了强制缓存，则永远也没法更新，html不更新，其引用的js、css等名称也不会更新，则整个服务都没有更新，只能让用户清除缓存了。所以针对html文件，我们可以设置协商缓存或者直接不使用缓存，本身html文件都比较小，我是直接使用了不缓存，nginx配置如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name yourdomain.com;</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">    try_files $uri $uri&#x2F; &#x2F;index.html;</span><br><span class="line">    root &#x2F;yourdir&#x2F;;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">    if ($request_filename ~* .*\.(js|css|woff|png|jpg|jpeg)$)</span><br><span class="line">    &#123;</span><br><span class="line">        expires    100d;  &#x2F;&#x2F;js、css、图片缓存100天</span><br><span class="line">        #add_header Cache-Control &quot;max-age &#x3D; 8640000&quot;; &#x2F;&#x2F;或者设置max-age</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ($request_filename ~* .*\.(?:htm|html)$)</span><br><span class="line">    &#123;</span><br><span class="line">        add_header Cache-Control &quot;no-store&quot;;  &#x2F;&#x2F;html不缓存</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个轻量级的基于RateLimiter的分布式限流实现</title>
      <link href="/distributedratelimiter.html"/>
      <url>/distributedratelimiter.html</url>
      
        <content type="html"><![CDATA[<p>上篇文章（<a href="http://blog.jboost.cn/ratelimiter.html">限流算法与Guava RateLimiter解析</a>）对常用的限流算法及Google Guava基于令牌桶算法的实现RateLimiter进行了介绍。RateLimiter通过线程锁控制同步，只适用于单机应用，在分布式环境下，虽然有像阿里Sentinel的限流开源框架，但对于一些小型应用来说未免过重，但限流的需求在小型项目中也是存在的，比如获取手机验证码的控制，对资源消耗较大操作的访问频率控制等。本文介绍最近写的一个基于RateLimiter，适用于分布式环境下的限流实现，并使用spring-boot-starter的形式发布，比较轻量级且“开箱即用”。</p><a id="more"></a><p>本文限流实现包括两种形式：</p><ol><li>基于RateLimiter令牌桶算法的限速控制（严格限制访问速度）</li><li>基于Lua脚本的限量控制（限制一个时间窗口内的访问量，对访问速度没有严格限制）</li></ol><h2 id="限速控制"><a href="#限速控制" class="headerlink" title="限速控制"></a>限速控制</h2><h3 id="1-令牌桶模型"><a href="#1-令牌桶模型" class="headerlink" title="1. 令牌桶模型"></a>1. 令牌桶模型</h3><p>首先定义令牌桶模型，与RateLimiter中类似，包括几个关键属性与关键方法。其中关键属性定义如下，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisPermits</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大存储令牌数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> maxPermits;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前存储令牌数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> storedPermits;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加令牌的时间间隔/毫秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> intervalMillis;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下次请求可以获取令牌的时间，可以是过去（令牌积累）也可以是将来的时间（令牌预消费）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> nextFreeTicketMillis;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>关键方法定义与RateLimiter也大同小异，方法注释基本已描述各方法用途，不再赘述。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建Redis令牌数据模型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> permitsPerSecond     每秒放入的令牌数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> maxBurstSeconds      maxPermits由此字段计算，最大存储maxBurstSeconds秒生成的令牌</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nextFreeTicketMillis 下次请求可以获取令牌的起始时间，默认当前系统时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RedisPermits</span><span class="params">(<span class="keyword">double</span> permitsPerSecond, <span class="keyword">double</span> maxBurstSeconds, Long nextFreeTicketMillis)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.maxPermits = permitsPerSecond * maxBurstSeconds;</span><br><span class="line">    <span class="keyword">this</span>.storedPermits = maxPermits;</span><br><span class="line">    <span class="keyword">this</span>.intervalMillis = TimeUnit.SECONDS.toMillis(<span class="number">1</span>) / permitsPerSecond;</span><br><span class="line">    <span class="keyword">this</span>.nextFreeTicketMillis = nextFreeTicketMillis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于当前时间，若当前时间晚于nextFreeTicketMicros，则计算该段时间内可以生成多少令牌，将生成的令牌加入令牌桶中并更新数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resync</span><span class="params">(<span class="keyword">long</span> nowMillis)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nowMillis &gt; nextFreeTicketMillis) &#123;</span><br><span class="line">        <span class="keyword">double</span> newPermits = (nowMillis - nextFreeTicketMillis) / intervalMillis;</span><br><span class="line">        storedPermits = Math.min(maxPermits, storedPermits + newPermits);</span><br><span class="line">        nextFreeTicketMillis = nowMillis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 保留指定数量令牌，并返回需要等待的时间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">reserveAndGetWaitLength</span><span class="params">(<span class="keyword">long</span> nowMillis, <span class="keyword">int</span> permits)</span> </span>&#123;</span><br><span class="line">    resync(nowMillis);</span><br><span class="line">    <span class="keyword">double</span> storedPermitsToSpend = Math.min(permits, storedPermits); <span class="comment">// 可以消耗的令牌数</span></span><br><span class="line">    <span class="keyword">double</span> freshPermits = permits - storedPermitsToSpend; <span class="comment">// 需要等待的令牌数</span></span><br><span class="line">    <span class="keyword">long</span> waitMillis = (<span class="keyword">long</span>) (freshPermits * intervalMillis); <span class="comment">// 需要等待的时间</span></span><br><span class="line"></span><br><span class="line">    nextFreeTicketMillis = LongMath.saturatedAdd(nextFreeTicketMillis, waitMillis);</span><br><span class="line">    storedPermits -= storedPermitsToSpend;</span><br><span class="line">    <span class="keyword">return</span> waitMillis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 在超时时间内，是否有指定数量的令牌可用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canAcquire</span><span class="params">(<span class="keyword">long</span> nowMillis, <span class="keyword">int</span> permits, <span class="keyword">long</span> timeoutMillis)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> queryEarliestAvailable(nowMillis, permits) &lt;= timeoutMillis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指定数量令牌数可用需等待的时间</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> permits 需保留的令牌数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 指定数量令牌可用的等待时间，如果为0或负数，表示当前可用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">queryEarliestAvailable</span><span class="params">(<span class="keyword">long</span> nowMillis, <span class="keyword">int</span> permits)</span> </span>&#123;</span><br><span class="line">    resync(nowMillis);</span><br><span class="line">    <span class="keyword">double</span> storedPermitsToSpend = Math.min(permits, storedPermits); <span class="comment">// 可以消耗的令牌数</span></span><br><span class="line">    <span class="keyword">double</span> freshPermits = permits - storedPermitsToSpend; <span class="comment">// 需要等待的令牌数</span></span><br><span class="line">    <span class="keyword">long</span> waitMillis = (<span class="keyword">long</span>) (freshPermits * intervalMillis); <span class="comment">// 需要等待的时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> LongMath.saturatedAdd(nextFreeTicketMillis - nowMillis, waitMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-令牌桶控制类"><a href="#2-令牌桶控制类" class="headerlink" title="2. 令牌桶控制类"></a>2. 令牌桶控制类</h3><p>Guava RateLimiter中的控制都在RateLimiter及其子类中（如SmoothBursty），本处涉及到分布式环境下的同步，因此将其解耦，令牌桶模型存储于Redis中，对其同步操作的控制放置在如下控制类，其中同步控制使用到了前面介绍的分布式锁（参考<a href="http://blog.jboost.cn/distributedlock.html">基于Redis分布式锁的正确打开方式</a>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisRateLimiter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个令牌，阻塞一直到获取令牌，返回阻塞等待时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> time 阻塞等待时间/毫秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">acquire</span><span class="params">(String key)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> acquire(key, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定数量的令牌，如果令牌数不够，则一直阻塞，返回阻塞等待的时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> permits 需要获取的令牌数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> time 等待的时间/毫秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException tokens值不能为负数或零</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">acquire</span><span class="params">(String key, <span class="keyword">int</span> permits)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> millisToWait = reserve(key, permits);</span><br><span class="line">        log.info(<span class="string">"acquire &#123;&#125; permits for key[&#123;&#125;], waiting for &#123;&#125;ms"</span>, permits, key, millisToWait);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(millisToWait);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">"Interrupted when trying to acquire &#123;&#125; permits for key[&#123;&#125;]"</span>, permits, key, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> millisToWait;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在指定时间内获取一个令牌，如果获取不到则一直阻塞，直到超时</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 最大等待时间（超时时间），为0则不等待立即返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit    时间单元</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 获取到令牌则true，否则false</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(String key, <span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tryAcquire(key, <span class="number">1</span>, timeout, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在指定时间内获取指定数量的令牌，如果在指定时间内获取不到指定数量的令牌，则直接返回false，</span></span><br><span class="line"><span class="comment">     * 否则阻塞直到能获取到指定数量的令牌</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> permits 需要获取的令牌数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 最大等待时间（超时时间）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit    时间单元</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果在指定时间内能获取到指定令牌数，则true,否则false</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException tokens为负数或零，抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(String key, <span class="keyword">int</span> permits, <span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timeoutMillis = Math.max(unit.toMillis(timeout), <span class="number">0</span>);</span><br><span class="line">        checkPermits(permits);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> millisToWait;</span><br><span class="line">        <span class="keyword">boolean</span> locked = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            locked = lock.lock(key + LOCK_KEY_SUFFIX, WebUtil.getRequestId(), <span class="number">60</span>, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">if</span> (locked) &#123;</span><br><span class="line">                <span class="keyword">long</span> nowMillis = getNowMillis();</span><br><span class="line">                RedisPermits permit = getPermits(key, nowMillis);</span><br><span class="line">                <span class="keyword">if</span> (!permit.canAcquire(nowMillis, permits, timeoutMillis)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    millisToWait = permit.reserveAndGetWaitLength(nowMillis, permits);</span><br><span class="line">                    permitsRedisTemplate.opsForValue().set(key, permit, expire, TimeUnit.SECONDS);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;  <span class="comment">//超时获取不到锁，也返回false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (locked) &#123;</span><br><span class="line">                lock.unLock(key + LOCK_KEY_SUFFIX, WebUtil.getRequestId());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (millisToWait &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(millisToWait);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保留指定的令牌数待用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> permits 需保留的令牌数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> time 令牌可用的等待时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException tokens不能为负数或零</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">reserve</span><span class="params">(String key, <span class="keyword">int</span> permits)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        checkPermits(permits);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock(key + LOCK_KEY_SUFFIX, WebUtil.getRequestId(), <span class="number">60</span>, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">long</span> nowMillis = getNowMillis();</span><br><span class="line">            RedisPermits permit = getPermits(key, nowMillis);</span><br><span class="line">            <span class="keyword">long</span> waitMillis = permit.reserveAndGetWaitLength(nowMillis, permits);</span><br><span class="line">            permitsRedisTemplate.opsForValue().set(key, permit, expire, TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">return</span> waitMillis;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unLock(key + LOCK_KEY_SUFFIX, WebUtil.getRequestId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取令牌桶</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RedisPermits <span class="title">getPermits</span><span class="params">(String key, <span class="keyword">long</span> nowMillis)</span> </span>&#123;</span><br><span class="line">        RedisPermits permit = permitsRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span> (permit == <span class="keyword">null</span>) &#123;</span><br><span class="line">            permit = <span class="keyword">new</span> RedisPermits(permitsPerSecond, maxBurstSeconds, nowMillis);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> permit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取redis服务器时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getNowMillis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String luaScript = <span class="string">"return redis.call('time')"</span>;</span><br><span class="line">        DefaultRedisScript&lt;List&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(luaScript, List<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;String&gt; now = (List&lt;String&gt;)stringRedisTemplate.execute(redisScript, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> now == <span class="keyword">null</span> ? System.currentTimeMillis() : Long.valueOf(now.get(<span class="number">0</span>))*<span class="number">1000</span>+Long.valueOf(now.get(<span class="number">1</span>))/<span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><ol><li>acquire 是阻塞方法，如果没有可用的令牌，则一直阻塞直到获取到令牌。</li><li>tryAcquire 则是非阻塞方法，如果在指定超时时间内获取不到指定数量的令牌，则直接返回false，不阻塞等待。</li><li>getNowMillis 获取Redis服务器时间，避免业务服务器时间不一致导致的问题，如果业务服务器能保障时间同步，则可从本地获取提高效率。</li></ol><h3 id="3-令牌桶控制工厂类"><a href="#3-令牌桶控制工厂类" class="headerlink" title="3. 令牌桶控制工厂类"></a>3. 令牌桶控制工厂类</h3><p>工厂类负责管理令牌桶控制类，将其缓存在本地，这里使用了Guava中的Cache，一方面避免每次都新建控制类提高效率，另一方面通过控制缓存的最大容量来避免像用户粒度的限流占用过多的内存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisRateLimiterFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PermitsRedisTemplate permitsRedisTemplate;</span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="keyword">private</span> DistributedLock distributedLock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Cache&lt;String, RedisRateLimiter&gt; cache = CacheBuilder.newBuilder()</span><br><span class="line">            .initialCapacity(<span class="number">100</span>)  <span class="comment">//初始大小</span></span><br><span class="line">            .maximumSize(<span class="number">10000</span>) <span class="comment">// 缓存的最大容量</span></span><br><span class="line">            .expireAfterAccess(<span class="number">5</span>, TimeUnit.MINUTES) <span class="comment">// 缓存在最后一次访问多久之后失效</span></span><br><span class="line">            .concurrencyLevel(Runtime.getRuntime().availableProcessors()) <span class="comment">// 设置并发级别</span></span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisRateLimiterFactory</span><span class="params">(PermitsRedisTemplate permitsRedisTemplate, StringRedisTemplate stringRedisTemplate, DistributedLock distributedLock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.permitsRedisTemplate = permitsRedisTemplate;</span><br><span class="line">        <span class="keyword">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">        <span class="keyword">this</span>.distributedLock = distributedLock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建RateLimiter</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key              RedisRateLimiter本地缓存key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> permitsPerSecond 每秒放入的令牌数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxBurstSeconds  最大存储maxBurstSeconds秒生成的令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expire           该令牌桶的redis tty/秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> RateLimiter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisRateLimiter <span class="title">build</span><span class="params">(String key, <span class="keyword">double</span> permitsPerSecond, <span class="keyword">double</span> maxBurstSeconds, <span class="keyword">int</span> expire)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cache.getIfPresent(key) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cache.getIfPresent(key) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    cache.put(key, <span class="keyword">new</span> RedisRateLimiter(permitsRedisTemplate, stringRedisTemplate, distributedLock, permitsPerSecond,</span><br><span class="line">                            maxBurstSeconds, expire));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cache.getIfPresent(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-注解支持"><a href="#4-注解支持" class="headerlink" title="4. 注解支持"></a>4. 注解支持</h3><p>定义注解 @RateLimit 如下，表示以每秒rate的速率放置令牌，最多保留burst秒的令牌，取令牌的超时时间为timeout，limitType用于控制key类型，目前支持：</p><ol><li>IP, 根据客户端IP限流</li><li>USER, 根据用户限流，对于Spring Security可从SecurityContextHolder中获取当前用户信息，如userId</li><li>METHOD, 根据方法名全局限流，className.methodName，注意避免同时对同一个类中的同名方法做限流控制，否则需要修改获取key的逻辑</li><li>CUSTOM，自定义，支持表达式解析，如#{id}, #{user.id}</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RateLimit &#123;</span><br><span class="line">    <span class="function">String <span class="title">key</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="function">String <span class="title">prefix</span><span class="params">()</span> <span class="keyword">default</span> "rateLimit:"</span>; <span class="comment">//key前缀</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">expire</span><span class="params">()</span> <span class="keyword">default</span> 60</span>; <span class="comment">// 表示令牌桶模型RedisPermits redis key的过期时间/秒</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">rate</span><span class="params">()</span> <span class="keyword">default</span> 1.0</span>; <span class="comment">// permitsPerSecond值</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">burst</span><span class="params">()</span> <span class="keyword">default</span> 1.0</span>; <span class="comment">// maxBurstSeconds值</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">timeout</span><span class="params">()</span> <span class="keyword">default</span> 0</span>; <span class="comment">// 超时时间/秒</span></span><br><span class="line">    <span class="function">LimitType <span class="title">limitType</span><span class="params">()</span> <span class="keyword">default</span> LimitType.METHOD</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过切面的前置增强来为添加了 @RateLimit 注解的方法提供限流控制，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLimitAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(value = <span class="string">"@annotation(rateLimit)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rateLimit</span><span class="params">(JoinPoint  point, RateLimit rateLimit)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        String key = getKey(point, rateLimit.limitType(), rateLimit.key(), rateLimit.prefix());</span><br><span class="line">        RedisRateLimiter redisRateLimiter = redisRateLimiterFactory.build(key, rateLimit.rate(), rateLimit.burst(), rateLimit.expire());</span><br><span class="line">        <span class="keyword">if</span>(!redisRateLimiter.tryAcquire(key, rateLimit.timeout(), TimeUnit.SECONDS))&#123;</span><br><span class="line">            ExceptionUtil.rethrowClientSideException(LIMIT_MESSAGE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br></pre></td></tr></table></figure><h2 id="限量控制"><a href="#限量控制" class="headerlink" title="限量控制"></a>限量控制</h2><h3 id="1-限量控制类"><a href="#1-限量控制类" class="headerlink" title="1. 限量控制类"></a>1. 限量控制类</h3><p>限制一个时间窗口内的访问量，可使用计数器算法，借助Lua脚本执行的原子性来实现。</p><p>Lua脚本逻辑：</p><ol><li>以需要控制的对象为key（如方法，用户ID，或IP等），当前访问次数为Value，时间窗口值为缓存的过期时间</li><li>如果key存在则将其增1，判断当前值是否大于访问量限制值，如果大于则返回0，表示该时间窗口内已达访问量上限，如果小于则返回1表示允许访问</li><li>如果key不存在，则将其初始化为1，并设置过期时间，返回1表示允许访问</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCountLimiter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LUA_SCRIPT = <span class="string">"local c \nc = redis.call('get',KEYS[1]) \nif c and redis.call('incr',KEYS[1]) &gt; tonumber(ARGV[1]) then return 0 end"</span></span><br><span class="line">            + <span class="string">" \nif c then return 1 else \nredis.call('set', KEYS[1], 1) \nredis.call('expire', KEYS[1], tonumber(ARGV[2])) \nreturn 1 end"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SUCCESS_RESULT = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FAIL_RESULT = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisCountLimiter</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否允许访问</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key redis key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit 限制次数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expire 时间段/秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 获取成功true，否则false</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(String key, <span class="keyword">int</span> limit, <span class="keyword">int</span> expire)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        RedisScript&lt;Number&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(LUA_SCRIPT, Number<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Number result = stringRedisTemplate.execute(redisScript, Collections.singletonList(key), String.valueOf(limit), String.valueOf(expire));</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="keyword">null</span> &amp;&amp; result.intValue() == SUCCESS_RESULT) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-注解支持"><a href="#2-注解支持" class="headerlink" title="2. 注解支持"></a>2. 注解支持</h3><p>定义注解 @CountLimit 如下，表示在period时间窗口内，最多允许访问limit次，limitType用于控制key类型，取值与 @RateLimit 同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CountLimit &#123;</span><br><span class="line">    <span class="function">String <span class="title">key</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="function">String <span class="title">prefix</span><span class="params">()</span> <span class="keyword">default</span> "countLimit:"</span>; <span class="comment">//key前缀</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">limit</span><span class="params">()</span> <span class="keyword">default</span> 1</span>;  <span class="comment">// expire时间段内限制访问次数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">period</span><span class="params">()</span> <span class="keyword">default</span> 1</span>; <span class="comment">// 表示时间段/秒</span></span><br><span class="line">    <span class="function">LimitType <span class="title">limitType</span><span class="params">()</span> <span class="keyword">default</span> LimitType.METHOD</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样采用前值增强来为添加了 @CountLimit 注解的方法提供限流控制，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span>(value = <span class="string">"@annotation(countLimit)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countLimit</span><span class="params">(JoinPoint  point, CountLimit countLimit)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    String key = getKey(point, countLimit.limitType(), countLimit.key(), countLimit.prefix());</span><br><span class="line">    <span class="keyword">if</span> (!redisCountLimiter.tryAcquire(key, countLimit.limit(), countLimit.period())) &#123;</span><br><span class="line">        ExceptionUtil.rethrowClientSideException(LIMIT_MESSAGE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>1.添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jboost.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>limiter-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.配置redis相关参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">limiter-demo</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="comment">#数据库索引</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.92</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="comment">#连接超时时间</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure><p>3.测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"limiter"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LimiterController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解形式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/count"</span>)</span><br><span class="line">    <span class="meta">@CountLimit</span>(key = <span class="string">"#&#123;key&#125;"</span>, limit = <span class="number">2</span>, period = <span class="number">10</span>, limitType = LimitType.CUSTOM)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testCountLimit</span><span class="params">(@RequestParam(<span class="string">"key"</span>)</span> String key)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test count limiter..."</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解形式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/rate"</span>)</span><br><span class="line">    <span class="meta">@RateLimit</span>(rate = <span class="number">1.0</span>/<span class="number">5</span>, burst = <span class="number">5.0</span>, expire = <span class="number">120</span>, timeout = <span class="number">0</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRateLimit</span><span class="params">(@RequestParam(<span class="string">"key"</span>)</span> String key)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test rate limiter..."</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisRateLimiterFactory redisRateLimiterFactory;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码段形式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/rate2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRateLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RedisRateLimiter limiter = redisRateLimiterFactory.build(<span class="string">"LimiterController.testRateLimit"</span>, <span class="number">1.0</span>/<span class="number">30</span>, <span class="number">30</span>, <span class="number">120</span>);</span><br><span class="line">        <span class="keyword">if</span>(!limiter.tryAcquire(<span class="string">"app.limiter"</span>, <span class="number">0</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">            System.out.println(LocalDateTime.now());</span><br><span class="line">            ExceptionUtil.rethrowClientSideException(<span class="string">"您的访问过于频繁，请稍后重试"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test rate limiter 2..."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.验证</p><p>启动测试项目，浏览器中访问 <a href="http://localhost:8080/limiter/rate?key=test" target="_blank" rel="noopener">http://localhost:8080/limiter/rate?key=test</a> ，第一次访问成功，如图</p><p><img src="/assets/ratelimiter1.png" alt="ratelimiter1"></p><p>持续刷新，将返回如下错误，直到5s之后再返回成功，限制5秒1次的访问速度</p><p><img src="/assets/ratelimiter2.png" alt="ratelimiter2"></p><p>注解的使用</p><ol><li>限流类型LimitType支持IP（客户端IP）、用户（userId）、方法（className.methodName）、自定义（CUSTOM）几种形式，默认为METHOD</li><li>LimitType为CUSTOM时，需要手动指定key（其它key自动为ip，userid，或methodname），key支持表达式形式，如#{id}, #{user.id}</li><li>针对某个时间窗口内限制访问一次的场景，既可以使用 @CountLimit， 也可以使用 @RateLimit，比如验证码一分钟内只允许获取一次，以下两种形式都能达到目的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同一个手机号码60s内最多访问一次</span></span><br><span class="line"><span class="meta">@CountLimit</span>(key = <span class="string">"#&#123;params.phone&#125;"</span>, limit = <span class="number">1</span>, period = <span class="number">60</span>, limitType = LimitType.CUSTOM)</span><br><span class="line"><span class="comment">//以1/60的速度放置令牌，最多保存60s的令牌（也就是最多保存一个），控制访问速度为1/60个每秒（1个每分钟）</span></span><br><span class="line"><span class="meta">@RateLimit</span>(key = <span class="string">"#&#123;params.phone&#125;"</span>, rate = <span class="number">1.0</span>/<span class="number">60</span>, burst = <span class="number">60</span>, expire = <span class="number">120</span>, limitType = LimitType.CUSTOM)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了适用于分布式环境的基于RateLimiter令牌桶算法的限速控制与基于计数器算法的限量控制，可应用于中小型项目中有相关需求的场景（注：本实现未做压力测试，如果用户并发量较大需验证效果）。</p><ul><li>本文完整代码见：<a href="https://github.com/ronwxy/base-spring-boot" target="_blank" rel="noopener">https://github.com/ronwxy/base-spring-boot</a> ，目录 spring-boot-autoconfigure/src/main/java/cn/jboost/springboot/autoconfig/limiter</li><li>示例项目代码地址：<a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-limiter" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-limiter</a></li></ul><p>如果觉得有帮助，别忘了给个star ^_^。作者公众号：半路雨歌，欢迎关注查看更多干货文章。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
            <tag> RateLimiter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>限流算法与Guava RateLimiter解析</title>
      <link href="/ratelimiter.html"/>
      <url>/ratelimiter.html</url>
      
        <content type="html"><![CDATA[<p>在分布式系统中，应对高并发访问时，缓存、限流、降级是保护系统正常运行的常用方法。当请求量突发暴涨时，如果不加以限制访问，则可能导致整个系统崩溃，服务不可用。同时有一些业务场景，比如短信验证码，或者其它第三方API调用，也需要提供必要的访问限制支持。还有一些资源消耗过大的请求，比如数据导出等（参考 <a href="http://blog.jboost.cn/issue-cpu-high.html">记一次线上Java服务CPU 100%处理过程</a> ），也有限制访问频率的需求。</p><a id="more"></a><p>常见的限流算法有令牌桶算法，漏桶算法，与计数器算法。本文主要对三个算法的基本原理及Google Guava包中令牌桶算法的实现RateLimiter进行介绍，下一篇文章介绍最近写的一个以RateLimiter为参考的分布式限流实现及计数器限流实现。</p><h2 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h2><p>令牌桶算法的原理就是以一个恒定的速度往桶里放入令牌，每一个请求的处理都需要从桶里先获取一个令牌，当桶里没有令牌时，则请求不会被处理，要么排队等待，要么降级处理，要么直接拒绝服务。当桶里令牌满时，新添加的令牌会被丢弃或拒绝。</p><p>令牌桶算法的处理示意图如下（图片来自网络）</p><p><img src="/assets/token-bucket.png" alt="token-bucket"></p><p>令牌桶算法主要是可以控制请求的平均处理速率，它允许预消费，即可以提前消费令牌，以应对突发请求，但是后面的请求需要为预消费买单（等待更长的时间），以满足请求处理的平均速率是一定的。</p><h2 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h2><p>漏桶算法的原理是水（请求）先进入漏桶中，漏桶以一定的速度出水（处理请求），当水流入速度大于流出速度导致水在桶内逐渐堆积直到桶满时，水会溢出（请求被拒绝）。</p><p>漏桶算法的处理示意图如下（图片来自网络）</p><p><img src="/assets/leaky-bucket.png" alt="leaky-bucket"></p><p>漏桶算法主要是控制请求的处理速率，平滑网络上的突发流量，请求可以以任意速度进入漏桶中，但请求的处理则以恒定的速度进行。</p><h2 id="计数器算法"><a href="#计数器算法" class="headerlink" title="计数器算法"></a>计数器算法</h2><p>计数器算法是限流算法中最简单的一种算法，限制在一个时间窗口内，至多处理多少个请求。比如每分钟最多处理10个请求，则从第一个请求进来的时间为起点，60s的时间窗口内只允许最多处理10个请求。下一个时间窗口又以前一时间窗口过后第一个请求进来的时间为起点。常见的比如一分钟内只能获取一次短信验证码的功能可以通过计数器算法来实现。</p><h2 id="Guava-RateLimiter解析"><a href="#Guava-RateLimiter解析" class="headerlink" title="Guava RateLimiter解析"></a>Guava RateLimiter解析</h2><p>Guava是Google开源的一个工具包，其中的RateLimiter是实现了令牌桶算法的一个限流工具类。在pom.xml中添加guava依赖，即可使用RateLimiter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>29.0-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如下测试代码示例了RateLimiter的用法,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    RateLimiter rateLimiter = RateLimiter.create(<span class="number">1</span>); <span class="comment">//创建一个每秒产生一个令牌的令牌桶</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">double</span> waitTime = rateLimiter.acquire(i); <span class="comment">//一次获取i个令牌</span></span><br><span class="line">        System.out.println(<span class="string">"acquire:"</span> + i + <span class="string">" waitTime:"</span> + waitTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后，输出如下，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">acquire:1 waitTime:0.0</span><br><span class="line">acquire:2 waitTime:0.997729</span><br><span class="line">acquire:3 waitTime:1.998076</span><br><span class="line">acquire:4 waitTime:3.000303</span><br><span class="line">acquire:5 waitTime:4.000223</span><br></pre></td></tr></table></figure><p>第一次获取一个令牌时，等待0s立即可获取到（这里之所以不需要等待是因为令牌桶的预消费特性），第二次获取两个令牌，等待时间1s，这个1s就是前面获取一个令牌时因为预消费没有等待延到这次来等待的时间，这次获取两个又是预消费，所以下一次获取（取3个时）就要等待这次预消费需要的2s了，依此类推。可见预消费不需要等待的时间都由下一次来买单，以保障一定的平均处理速率（上例为1s一次）。</p><p>RateLimiter有两种实现：</p><ol><li>SmoothBursty： 令牌的生成速度恒定。使用 <code>RateLimiter.create(double permitsPerSecond)</code> 创建的是 SmoothBursty 实例。</li><li>SmoothWarmingUp：令牌的生成速度持续提升，直到达到一个稳定的值。WarmingUp，顾名思义就是有一个热身的过程。使用 <code>RateLimiter.create(double permitsPerSecond, long warmupPeriod, TimeUnit unit)</code> 时创建就是 SmoothWarmingUp 实例，其中 warmupPeriod 就是热身达到稳定速度的时间。</li></ol><p>类结构如下</p><p><img src="/assets/ratelimiter-struct.png" alt="ratelimiter-struct"></p><p>关键属性及方法解析（以 SmoothBursty 为例）</p><p>1.关键属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 桶中当前拥有的令牌数. */</span></span><br><span class="line"><span class="keyword">double</span> storedPermits;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 桶中最多可以保存多少秒存入的令牌数 */</span></span><br><span class="line"><span class="keyword">double</span> maxBurstSeconds;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 桶中能存储的最大令牌数，等于storedPermits*maxBurstSeconds. */</span></span><br><span class="line"><span class="keyword">double</span> maxPermits;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 放入令牌的时间间隔*/</span></span><br><span class="line"><span class="keyword">double</span> stableIntervalMicros;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 下次可获取令牌的时间点，可以是过去也可以是将来的时间点*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> nextFreeTicketMicros = <span class="number">0L</span>;</span><br></pre></td></tr></table></figure><p>2.关键方法</p><p>调用 <code>RateLimiter.create(double permitsPerSecond)</code> 方法时，创建的是 SmoothBursty 实例，默认设置 maxBurstSeconds 为1s。SleepingStopwatch 是guava中的一个时钟类实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@VisibleForTesting</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> RateLimiter <span class="title">create</span><span class="params">(<span class="keyword">double</span> permitsPerSecond, SleepingStopwatch stopwatch)</span> </span>&#123;</span><br><span class="line">    RateLimiter rateLimiter = <span class="keyword">new</span> SmoothBursty(stopwatch, <span class="number">1.0</span> <span class="comment">/* maxBurstSeconds */</span>);</span><br><span class="line">    rateLimiter.setRate(permitsPerSecond);</span><br><span class="line">    <span class="keyword">return</span> rateLimiter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SmoothBursty(SleepingStopwatch stopwatch, <span class="keyword">double</span> maxBurstSeconds) &#123;</span><br><span class="line">  <span class="keyword">super</span>(stopwatch);</span><br><span class="line">  <span class="keyword">this</span>.maxBurstSeconds = maxBurstSeconds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并通过调用 <code>SmoothBursty.doSetRate(double, long)</code> 方法进行初始化，该方法中:</p><ol><li>调用 <code>resync(nowMicros)</code> 对 storedPermits 与 nextFreeTicketMicros 进行了调整——如果当前时间晚于 nextFreeTicketMicros，则计算这段时间内产生的令牌数，累加到 storedPermits 上，并更新下次可获取令牌时间 nextFreeTicketMicros 为当前时间。</li><li>计算 stableIntervalMicros 的值，1/permitsPerSecond。</li><li>调用 <code>doSetRate(double, double)</code> 方法计算 maxPermits 值（maxBurstSeconds*permitsPerSecond），并根据旧的 maxPermits 值对 storedPermits 进行调整。</li></ol><p>源码如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doSetRate</span><span class="params">(<span class="keyword">double</span> permitsPerSecond, <span class="keyword">long</span> nowMicros)</span> </span>&#123;</span><br><span class="line">    resync(nowMicros);</span><br><span class="line">    <span class="keyword">double</span> stableIntervalMicros = SECONDS.toMicros(<span class="number">1L</span>) / permitsPerSecond;</span><br><span class="line">    <span class="keyword">this</span>.stableIntervalMicros = stableIntervalMicros;</span><br><span class="line">    doSetRate(permitsPerSecond, stableIntervalMicros);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Updates &#123;<span class="doctag">@code</span> storedPermits&#125; and &#123;<span class="doctag">@code</span> nextFreeTicketMicros&#125; based on the current time. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resync</span><span class="params">(<span class="keyword">long</span> nowMicros)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// if nextFreeTicket is in the past, resync to now</span></span><br><span class="line">    <span class="keyword">if</span> (nowMicros &gt; nextFreeTicketMicros) &#123;</span><br><span class="line">    <span class="keyword">double</span> newPermits = (nowMicros - nextFreeTicketMicros) / coolDownIntervalMicros();</span><br><span class="line">    storedPermits = min(maxPermits, storedPermits + newPermits);</span><br><span class="line">    nextFreeTicketMicros = nowMicros;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSetRate</span><span class="params">(<span class="keyword">double</span> permitsPerSecond, <span class="keyword">double</span> stableIntervalMicros)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> oldMaxPermits = <span class="keyword">this</span>.maxPermits;</span><br><span class="line">    maxPermits = maxBurstSeconds * permitsPerSecond;</span><br><span class="line">    <span class="keyword">if</span> (oldMaxPermits == Double.POSITIVE_INFINITY) &#123;</span><br><span class="line">        <span class="comment">// if we don't special-case this, we would get storedPermits == NaN, below</span></span><br><span class="line">        storedPermits = maxPermits;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        storedPermits =</span><br><span class="line">            (oldMaxPermits == <span class="number">0.0</span>)</span><br><span class="line">                ? <span class="number">0.0</span> <span class="comment">// initial state</span></span><br><span class="line">                : storedPermits * maxPermits / oldMaxPermits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 <code>acquire(int)</code> 方法获取指定数量的令牌时，</p><ol><li>调用 <code>reserve(int)</code> 方法，该方法最终调用 <code>reserveEarliestAvailable(int, long)</code> 来更新下次可取令牌时间点与当前存储的令牌数，并返回本次可取令牌的时间点，根据该时间点计算需要等待的时间</li><li>阻塞等待1中返回的等待时间</li><li>返回等待的时间（秒）</li></ol><p>源码如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 获取指定数量（permits）的令牌，阻塞直到获取到令牌，返回等待的时间*/</span></span><br><span class="line"><span class="meta">@CanIgnoreReturnValue</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> permits)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> microsToWait = reserve(permits);</span><br><span class="line">    stopwatch.sleepMicrosUninterruptibly(microsToWait);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> * microsToWait / SECONDS.toMicros(<span class="number">1L</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">reserve</span><span class="params">(<span class="keyword">int</span> permits)</span> </span>&#123;</span><br><span class="line">    checkPermits(permits);</span><br><span class="line">    <span class="keyword">synchronized</span> (mutex()) &#123;</span><br><span class="line">        <span class="keyword">return</span> reserveAndGetWaitLength(permits, stopwatch.readMicros());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 返回需要等待的时间*/</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">reserveAndGetWaitLength</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">long</span> nowMicros)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> momentAvailable = reserveEarliestAvailable(permits, nowMicros);</span><br><span class="line">    <span class="keyword">return</span> max(momentAvailable - nowMicros, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 针对此次需要获取的令牌数更新下次可取令牌时间点与存储的令牌数，返回本次可取令牌的时间点*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">reserveEarliestAvailable</span><span class="params">(<span class="keyword">int</span> requiredPermits, <span class="keyword">long</span> nowMicros)</span> </span>&#123;</span><br><span class="line">    resync(nowMicros); <span class="comment">// 更新当前数据</span></span><br><span class="line">    <span class="keyword">long</span> returnValue = nextFreeTicketMicros;</span><br><span class="line">    <span class="keyword">double</span> storedPermitsToSpend = min(requiredPermits, <span class="keyword">this</span>.storedPermits); <span class="comment">// 本次可消费的令牌数</span></span><br><span class="line">    <span class="keyword">double</span> freshPermits = requiredPermits - storedPermitsToSpend; <span class="comment">// 需要新增的令牌数</span></span><br><span class="line">    <span class="keyword">long</span> waitMicros =</span><br><span class="line">        storedPermitsToWaitTime(<span class="keyword">this</span>.storedPermits, storedPermitsToSpend)</span><br><span class="line">            + (<span class="keyword">long</span>) (freshPermits * stableIntervalMicros); <span class="comment">// 需要等待的时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.nextFreeTicketMicros = LongMath.saturatedAdd(nextFreeTicketMicros, waitMicros); <span class="comment">// 更新下次可取令牌的时间点</span></span><br><span class="line">    <span class="keyword">this</span>.storedPermits -= storedPermitsToSpend; <span class="comment">// 更新当前存储的令牌数</span></span><br><span class="line">    <span class="keyword">return</span> returnValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>acquire(int)</code> 方法是获取不到令牌时一直阻塞，直到获取到令牌，<code>tryAcquire(int,long,TimeUnit)</code> 方法则是在指定超时时间内尝试获取令牌，如果获取到或超时时间到则返回是否获取成功</p><ol><li>先判断是否能在指定超时时间内获取到令牌，通过 <code>nextFreeTicketMicros &lt;= timeoutMicros + nowMicros</code> 是否为true来判断，即可取令牌时间早于当前时间加超时时间则可取（预消费的特性），否则不可获取。</li><li>如果不可获取，立即返回false。</li><li>如果可获取，则调用 <code>reserveAndGetWaitLength(permits, nowMicros)</code> 来更新下次可取令牌时间点与当前存储的令牌数，返回等待时间（逻辑与前面相同），并阻塞等待相应的时间，返回true。</li></ol><p>源码如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> timeoutMicros = max(unit.toMicros(timeout), <span class="number">0</span>);</span><br><span class="line">    checkPermits(permits);</span><br><span class="line">    <span class="keyword">long</span> microsToWait;</span><br><span class="line">    <span class="keyword">synchronized</span> (mutex()) &#123;</span><br><span class="line">        <span class="keyword">long</span> nowMicros = stopwatch.readMicros();</span><br><span class="line">        <span class="keyword">if</span> (!canAcquire(nowMicros, timeoutMicros)) &#123; <span class="comment">//判断是否能在超时时间内获取指定数量的令牌</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            microsToWait = reserveAndGetWaitLength(permits, nowMicros);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stopwatch.sleepMicrosUninterruptibly(microsToWait);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">canAcquire</span><span class="params">(<span class="keyword">long</span> nowMicros, <span class="keyword">long</span> timeoutMicros)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> queryEarliestAvailable(nowMicros) - timeoutMicros &lt;= nowMicros; <span class="comment">//只要可取时间小于当前时间+超时时间，则可获取（可预消费的特性！）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">queryEarliestAvailable</span><span class="params">(<span class="keyword">long</span> nowMicros)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nextFreeTicketMicros;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是 SmoothBursty 实现的基本处理流程。注意两点：</p><ol><li>RateLimiter 通过限制后面请求的等待时间，来支持一定程度的突发请求——预消费的特性。</li><li>RateLimiter 令牌桶的实现并不是起一个线程不断往桶里放令牌，而是以一种延迟计算的方式（参考<code>resync</code>函数），在每次获取令牌之前计算该段时间内可以产生多少令牌，将产生的令牌加入令牌桶中并更新数据来实现，比起一个线程来不断往桶里放令牌高效得多。（想想如果需要针对每个用户限制某个接口的访问，则针对每个用户都得创建一个RateLimiter，并起一个线程来控制令牌存放的话，如果在线用户数有几十上百万，起线程来控制是一件多么恐怖的事情）</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了限流的三种基本算法，其中令牌桶算法与漏桶算法主要用来限制请求处理的速度，可将其归为限速，计数器算法则是用来限制一个时间窗口内请求处理的数量，可将其归为限量（对速度不限制）。Guava 的 RateLimiter 是令牌桶算法的一种实现，但 RateLimiter 只适用于单机应用，在分布式环境下就不适用了。虽然已有一些开源项目可用于分布式环境下的限流管理，如阿里的Sentinel，但对于小型项目来说，引入Sentinel可能显得有点过重，但限流的需求在小型项目中也是存在的，下一篇文章就介绍下基于 RateLimiter 的分布式下的限流实现。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 限流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Redis分布式锁的正确打开方式</title>
      <link href="/distributedlock.html"/>
      <url>/distributedlock.html</url>
      
        <content type="html"><![CDATA[<p>分布式锁是在分布式环境下（多个JVM进程）控制多个客户端对某一资源的同步访问的一种实现，与之相对应的是线程锁，线程锁控制的是同一个JVM进程内多个线程之间的同步。分布式锁的一般实现方法是在应用服务器之外通过一个共享的存储服务器存储锁资源，同一时刻只有一个客户端能占有锁资源来完成。通常有基于Zookeeper，Redis，或数据库三种实现形式。本文介绍基于Redis的实现方案。</p><a id="more"></a><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>基于Redis实现分布式锁需要满足如下几点要求：</p><ol><li>在分布式集群中，被分布式锁控制的方法或代码段同一时刻只能被一个客户端上面的一个线程执行，也就是互斥</li><li>锁信息需要设置过期时间，避免一个线程长期占有（比如在做解锁操作前异常退出）而导致死锁</li><li>加锁与解锁必须一致，谁加的锁，就由谁来解（或过期超时），一个客户端不能解开另一个客户端加的锁</li><li>加锁与解锁的过程必须保证原子性</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="1-加锁实现"><a href="#1-加锁实现" class="headerlink" title="1. 加锁实现"></a>1. 加锁实现</h3><p>基于Redis的分布式锁加锁操作一般使用 <code>SETNX</code> 命令，其含义是“将 key 的值设为 value ，当且仅当 key 不存在。若给定的 key 已经存在，则 SETNX 不做任何动作”。<br>在 Spring Boot 中，可以使用 StringRedisTemplate 来实现，如下，一行代码即可实现加锁过程。（下列代码给出两种调用形式——立即返回加锁结果与给定超时时间获取加锁结果）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 尝试获取锁（立即返回）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key  锁的redis key</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> value 锁的value</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> expire 过期时间/秒</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 是否获取成功</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(String key, String value, <span class="keyword">long</span> expire)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stringRedisTemplate.opsForValue().setIfAbsent(key, value, expire, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 尝试获取锁，并至多等待timeout时长</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key  锁的redis key</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> value 锁的value</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> expire 过期时间/秒</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> timeout 超时时长</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> unit    时间单位</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 是否获取成功</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(String key, String value, <span class="keyword">long</span> expire, <span class="keyword">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> waitMillis = unit.toMillis(timeout);</span><br><span class="line">    <span class="keyword">long</span> waitAlready = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!stringRedisTemplate.opsForValue().setIfAbsent(key, value, expire, TimeUnit.SECONDS) &amp;&amp; waitAlready &lt; waitMillis) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(waitMillisPer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">"Interrupted when trying to get a lock. key: &#123;&#125;"</span>, key, e);</span><br><span class="line">        &#125;</span><br><span class="line">        waitAlready += waitMillisPer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (waitAlready &lt; waitMillis) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    log.warn(<span class="string">"&lt;====== lock &#123;&#125; failed after waiting for &#123;&#125; ms"</span>, key, waitAlready);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述实现如何满足前面提到的几点要求：</p><ol><li>客户端互斥： 可以将expire过期时间设置为大于同步代码的执行时间，比如同步代码块执行时间为1s，则可将expire设置为3s或5s。避免同步代码执行过程中expire时间到，其它客户端又可以获取锁执行同步代码块。</li><li>通过设置过期时间expire来避免某个客户端长期占有锁。</li><li>通过value来控制谁加的锁，由谁解的逻辑，比如可以使用requestId作为value，requestId唯一标记一次请求。</li><li>setIfAbsent方法 底层通过调用 Redis 的 <code>SETNX</code> 命令，操作具备原子性。</li></ol><p><strong>错误示例：</strong></p><p>网上有如下实现，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(String key, String value, <span class="keyword">long</span> expire)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> result = stringRedisTemplate.opsForValue().setIfAbsent(key, value);</span><br><span class="line">    <span class="keyword">if</span>(result) &#123;</span><br><span class="line">        stringRedisTemplate.expire(key, expire, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该实现的问题是如果在result为true，但还没成功设置expire时，程序异常退出了，将导致该锁一直被占用而导致死锁，不满足第二点要求。</p><h3 id="2-解锁实现"><a href="#2-解锁实现" class="headerlink" title="2. 解锁实现"></a>2. 解锁实现</h3><p>解锁也需要满足前面所述的四个要求，实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RELEASE_LOCK_LUA_SCRIPT = <span class="string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long RELEASE_LOCK_SUCCESS_RESULT = <span class="number">1L</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 释放锁</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key  锁的redis key</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> value 锁的value</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">unLock</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">    DefaultRedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(RELEASE_LOCK_LUA_SCRIPT, Long<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">long</span> result = stringRedisTemplate.execute(redisScript, Collections.singletonList(key), value);</span><br><span class="line">    <span class="keyword">return</span> Objects.equals(result, RELEASE_LOCK_SUCCESS_RESULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段实现使用一个Lua脚本来实现解锁操作，保证操作的原子性。传入的value值需与该线程加锁时的value一致，可以使用requestId（具体实现下面给出）。</p><p><strong>错误示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">unLock</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        String oldValue = stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span>(value.equals(oldValue)) &#123;</span><br><span class="line">            stringRedisTemplate.delete(key);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该实现先获取锁的当前值，判断两值相等则删除。考虑一种极端情况，如果在判断为true时，刚好该锁过期时间到，另一个客户端加锁成功，则接下来的delete将不管三七二十一将别人加的锁直接删掉了，不满足第三点要求。该示例主要是因为没有保证解锁操作的原子性导致。</p><h3 id="3-注解支持"><a href="#3-注解支持" class="headerlink" title="3. 注解支持"></a>3. 注解支持</h3><p>为了方便使用，添加一个注解，可以放于方法上控制方法在分布式环境中的同步执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 标注在方法上的分布式锁注解</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DistributedLockable &#123;</span><br><span class="line">    <span class="function">String <span class="title">key</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">prefix</span><span class="params">()</span> <span class="keyword">default</span> "disLock:"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">expire</span><span class="params">()</span> <span class="keyword">default</span> 10L</span>; <span class="comment">// 默认10s过期</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加一个切面来解析注解的处理，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 分布式锁注解处理切面</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedLockAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DistributedLock lock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DistributedLockAspect</span><span class="params">(DistributedLock lock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lock = lock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在方法上执行同步锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around</span>(value = <span class="string">"@annotation(lockable)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">distLock</span><span class="params">(ProceedingJoinPoint point, DistributedLockable lockable)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> locked = <span class="keyword">false</span>;</span><br><span class="line">        String key = lockable.prefix() + lockable.key();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            locked = lock.lock(key, WebUtil.getRequestId(), lockable.expire());</span><br><span class="line">            <span class="keyword">if</span>(locked) &#123;</span><br><span class="line">                <span class="keyword">return</span> point.proceed();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">"Did not get a lock for key &#123;&#125;"</span>, key);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(locked) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!lock.unLock(key, WebUtil.getRequestId()))&#123;</span><br><span class="line">                    log.warn(<span class="string">"Unlock &#123;&#125; failed, maybe locked by another client already. "</span>, lockable.key());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RequestId 的实现如下，通过注册一个Filter，在请求开始时生成一个uuid存于ThreadLocal中，在请求返回时清除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REQ_ID_HEADER = <span class="string">"Req-Id"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; reqIdThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setRequestId</span><span class="params">(String requestId)</span> </span>&#123;</span><br><span class="line">        reqIdThreadLocal.set(requestId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRequestId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String requestId = reqIdThreadLocal.get();</span><br><span class="line">        <span class="keyword">if</span>(requestId == <span class="keyword">null</span>) &#123;</span><br><span class="line">            requestId = ObjectId.next();</span><br><span class="line">            reqIdThreadLocal.set(requestId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> requestId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeRequestId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        reqIdThreadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestIdFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;</span><br><span class="line">        String reqId = httpServletRequest.getHeader(WebUtil.REQ_ID_HEADER);</span><br><span class="line">        <span class="comment">//没有则生成一个</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(reqId)) &#123;</span><br><span class="line">            reqId = ObjectId.next();</span><br><span class="line">        &#125;</span><br><span class="line">        WebUtil.setRequestId(reqId);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            WebUtil.removeRequestId();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在配置类中注册Filter</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加RequestId</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">requestIdFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RequestIdFilter reqestIdFilter = <span class="keyword">new</span> RequestIdFilter();</span><br><span class="line">    FilterRegistrationBean registrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    registrationBean.setFilter(reqestIdFilter);</span><br><span class="line">    List&lt;String&gt; urlPatterns = Collections.singletonList(<span class="string">"/*"</span>);</span><br><span class="line">    registrationBean.setUrlPatterns(urlPatterns);</span><br><span class="line">    registrationBean.setOrder(Ordered.HIGHEST_PRECEDENCE + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-使用注解"><a href="#4-使用注解" class="headerlink" title="4. 使用注解"></a>4. 使用注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DistributedLockable</span>(key = <span class="string">"test"</span>, expire = <span class="number">10</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"线程-"</span>+Thread.currentThread().getName()+<span class="string">"开始执行..."</span> + LocalDateTime.now());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"线程-"</span>+Thread.currentThread().getName()+<span class="string">"结束执行..."</span> + LocalDateTime.now());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文给出了基于Redis的分布式锁的实现方案与常见的错误示例。要保障分布式锁的正确运行，需满足本文所提的四个要求，尤其注意保证加锁解锁操作的原子性，设置过期时间，及对同一个锁的加锁解锁线程一致。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
            <tag> RateLimiter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次线上Java服务CPU 100%处理过程</title>
      <link href="/issue-cpu-high.html"/>
      <url>/issue-cpu-high.html</url>
      
        <content type="html"><![CDATA[<h2 id="告警"><a href="#告警" class="headerlink" title="告警"></a>告警</h2><p>正在开会，突然钉钉告警声响个不停，同时市场人员反馈客户在投诉系统登不进了，报504错误。查看钉钉上的告警信息，几台业务服务器节点全部报CPU超过告警阈值，达100%。</p><p>赶紧从会上下来，SSH登录服务器，使用 <code>top</code> 命令查看，几个Java进程CPU占用达到180%，190%，这几个Java进程对应同一个业务服务的几个Pod（或容器）。</p><a id="more"></a><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><ol><li><p>使用 <code>docker stats</code> 命令查看本节点容器资源使用情况，对占用CPU很高的容器使用 <code>docker exec -it &lt;容器ID&gt; bash</code> 进入。</p></li><li><p>在容器内部执行 <code>top</code> 命令查看，定位到占用CPU高的进程ID，使用 <code>top -Hp &lt;进程ID&gt;</code> 定位到占用CPU高的线程ID。</p></li><li><p>使用 <code>jstack &lt;进程ID&gt; &gt; jstack.txt</code> 将进程的线程栈打印输出。</p></li><li><p>退出容器， 使用 <code>docker cp &lt;容器ID&gt;:/usr/local/tomcat/jstack.txt ./</code> 命令将jstack文件复制到宿主机，便于查看。获取到jstack信息后，赶紧重启服务让服务恢复可用。</p></li><li><p>将2中占用CPU高的线程ID使用 <code>pringf &#39;%x\n&#39; &lt;线程ID&gt;</code> 命令将线程ID转换为十六进制形式。假设线程ID为133，则得到十六进制85。在jstack.txt文件中定位到 <code>nid=0x85</code>的位置，该位置即为占用CPU高线程的执行栈信息。如下图所示，</p></li></ol><p><img src="/assets/jstack.png" alt="jstack"></p><ol start="6"><li>与同事确认，该处为使用一个框架的excel导出功能，并且，导出excel时没有分页，没有限制！！！查看SQL查询记录，该导出功能一次导出50w条数据，并且每条数据都需要做转换计算，更为糟糕的是，操作者因为导出时久久没有响应，于是连续点击，几分钟内发起了10多次的导出请求。。。于是，CPU被打满，服务崩溃了，我也崩溃了。。</li></ol><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>对于此类耗资源的操作，一定要做好相应的限制。比如可以限制请求量，控制最大分页大小，同时可以限制访问频率，比如同一用户一分钟内最多请求多少次。</p><h2 id="再发"><a href="#再发" class="headerlink" title="再发"></a>再发</h2><p>服务重启后恢复。到了下午，又一台服务器节点CPU告警，依前面步骤定位到占用CPU高的线程，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"GC task thread#0 (ParallelGC)" os_prio=0 tid=0x00007fa114020800 nid=0x10 runnable </span><br><span class="line"></span><br><span class="line">"GC task thread#1 (ParallelGC)" os_prio=0 tid=0x00007fa114022000 nid=0x11 runnable</span><br></pre></td></tr></table></figure><p>使用命令 <code>jstat -gcutil &lt;进程ID&gt; 2000 10</code> 查看GC情况，如图</p><p><img src="/assets/jstat.png" alt="jstat"></p><p>发现Full GC次数达到1000多次，且还在不断增长，同时Eden区，Old区已经被占满（也可使用<code>jmap -heap &lt;进程ID&gt;</code>查看堆内存各区的占用情况），使用jmap将内存使用情况dump出来，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -dump:format=b,file=./jmap.dump 13</span><br></pre></td></tr></table></figure><p>退出容器，使用 <code>docker cp &lt;容器ID&gt;:/usr/local/tomcat/jmap.dump ./</code> 将dump文件复制到宿主机目录，下载到本地，使用 MemoryAnalyzer（下载地址：<a href="https://www.eclipse.org/mat/downloads.php" target="_blank" rel="noopener">https://www.eclipse.org/mat/downloads.php</a> ）打开，如图</p><p><img src="/assets/jmap-mat.png" alt="jmap-mat"></p><blockquote><p>如果dump文件比较大，需要增大MemoryAnalyzer.ini配置文件中的-Xmx值</p></blockquote><p>发现占用内存最多的是char[], String对象，通过右键可以查看引用对象，但点开貌似也看不出所以然来，进入内存泄露报告页面，如图</p><p><img src="/assets/mat-leak-suspects.png" alt="mat-leak-suspects"></p><p>该页面统计了堆内存的占用情况，并且给出疑似泄露点，在上图中点开“see stacktrace”链接，进入线程栈页面，</p><p><img src="/assets/mat-thread-stack.png" alt="mat-thread-stack"></p><p>似曾熟悉的画面，还是跟excel导出有关，数据太多，导致内存溢出。。。于是GC频繁，于是CPU爆了。根源还是同一个。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文以处理一次线上服务CPU 100%的实战过程示例了在遇到Java服务造成服务器CPU消耗过高或内存溢出的一般处理方法，希望对大家定位线上类似问题提供参考。同时，开发实现功能时需要考虑的更深远一些，不能停留在解决当前的场景，需要考虑数据量不断增大时，你的实现是否还能适用。俗话说，初级程序员解决当前问题，中级程序员解决两年后的问题，高级程序员解决五年后的问题，^_^。</p>]]></content>
      
      
      <categories>
          
          <category> 案例解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx反向代理导致session失效的问题处理</title>
      <link href="/nginx-proxy.html"/>
      <url>/nginx-proxy.html</url>
      
        <content type="html"><![CDATA[<p>一同事求援：后台系统的登录成功了，但不能成功登进系统，仍然跳转到登录页，但同一套代码另一个环境却没有问题。</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>经了解，他对同一个项目使用tomcat部署了两个环境，一个在开发服务器上，一个在他本机，两个环境代码配置完全相同。两边通过同一个nginx进行反向代理，nginx配置大致如下，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;health&#x2F; &#123;</span><br><span class="line">    proxy_pass  http:&#x2F;&#x2F;192.168.40.159:8081&#x2F;health&#x2F;;  #无问题的配置</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">location &#x2F;health-dev&#x2F; &#123;</span><br><span class="line">    proxy_pass  http:&#x2F;&#x2F;192.168.40.202:8080&#x2F;health&#x2F;;  #有问题的配置</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个反向代理到开发环境，一个反向代理到本机服务。</p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>既然代码配置完全相同，那么问题很大可能就出现在nginx的反向代理上。</p><p>因为两边location路径不同（即浏览器路径不同），但是反向代理的服务端路径却相同，结合session的基本原理，如下图，</p><p><img src="/assets/httpsession.png" alt="httpsession"></p><ol><li>当浏览器第一次打开页面时，服务端会为这次会话创建一个session，并将session id通过response的header传递给浏览器，header一般为 <code>Set-Cookie: JSESSIONID=xxxxx; Path=xxxx</code></li><li>浏览器接收到响应后，如果header Set-Cookie 中path的值与浏览器地址路径匹配，则将该header值存于浏览器的Cookie中</li><li>浏览器在下次请求服务器时，将Cookie中的JSESSIONID值通过request的header上报给服务端，header一般为 <code>Cookie: JSESSIONID=xxxx;</code></li><li>服务端可通过该JSESSIONID来定位到对应的session</li></ol><p>nginx反向代理按这种方式配置时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;health-dev&#x2F; &#123;</span><br><span class="line">    proxy_pass  http:&#x2F;&#x2F;192.168.40.202:8080&#x2F;health&#x2F;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器访问 <code>http://www.domian.com/health-dev</code> 时，服务端返回的 <code>Set-Cookie</code> 的 Path 值为 <code>/health</code>（因为中间有反向代理，服务端并不知道代理前的路径是啥，是按最终请求服务端的路径设置），如图</p><p><img src="/assets/nginx-proxy-cookie-1.png" alt="nginx-proxy-cookie-1"></p><p>因为浏览器访问地址的路径 <code>/health-dev</code> 与 <code>Set-Cookie</code> 的 Path <code>/health</code> 不匹配，所以浏览器并不会将其值存入Cookie中，如图</p><p><img src="/assets/nginx-proxy-cookie-2.png" alt="nginx-proxy-cookie-2"></p><p>因此在下次请求服务器时，浏览器无法设置request <code>Cookie</code> header的 <code>JSESSIONID</code> 值，服务器无法定位到对应的session，因此会将其当做第一次请求，创建一个新的session，如此反复，因此就算你登录认证通过了，但服务器返回的登录凭证（JSESSIONID）浏览器不会保存，并在下次请求时携带，导致服务器认为你是一个新的请求，当然就会又跳到登录页面了。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>nginx有一个命令 <code>proxy_cookie_path</code>（参考： <a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cookie_path" target="_blank" rel="noopener">proxy_cookie_path</a>）可将服务器返回的 <code>Set-Cookie</code> 中的path进行修改，格式为 <code>proxy_cookie_path 原路径 目标路径</code>，我们在配置中添加 <code>proxy_cookie_path</code> 如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;health-dev&#x2F; &#123;</span><br><span class="line">    proxy_pass  http:&#x2F;&#x2F;192.168.40.202:8080&#x2F;health&#x2F;;</span><br><span class="line">    proxy_cookie_path  &#x2F;health &#x2F;health-dev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启nginx，问题解决。</p>]]></content>
      
      
      <categories>
          
          <category> 案例解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes笔记（四）：详解Namespace与资源限制ResourceQuota，LimitRange</title>
      <link href="/k8s4-namespace.html"/>
      <url>/k8s4-namespace.html</url>
      
        <content type="html"><![CDATA[<p>前面我们对K8s的基本组件与概念有了个大致的印象，并且基于K8s实现了一个初步的CI/CD流程，但对里面涉及的各个对象（如Namespace, Pod, Deployment, Service, Ingress, PVC等）及各对象的管理可能还缺乏深入的理解与实践，接下来的文章就让我们一起深入K8s的各组件内部来一探究竟吧。下图是基于个人的理解梳理的一个K8s结构图，示例了各个组件（只包含了主要组件）如何协同。</p><a id="more"></a><p><img src="/assets/k8s-struct.png" alt="k8s-struct"></p><p>后续几篇文章围绕该图涉及组件进行整理介绍，本文主要探究Namespace及与Namespace管理相关的资源限制ResourceQuota/LimitRange部分。</p><h2 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>Namespace即命名空间，主要有两个方面的作用：</p><ol><li>资源隔离：可为不同的团队/用户（或项目）提供虚拟的集群空间，共享同一个Kubernetes集群的资源。比如可以为团队A创建一个Namespace ns-a，团队A的项目都部署运行在 ns-a 中，团队B创建另一个Namespace ns-b，其项目都部署运行在 ns-b 中，或者为开发、测试、生产环境创建不同的Namespace，以做到彼此之间相互隔离，互不影响。我们可以使用 ResourceQuota 与 Resource LimitRange 来指定与限制 各个namesapce的资源分配与使用</li><li>权限控制：可以指定某个namespace哪些用户可以访问，哪些用户不能访问</li></ol><p>Kubernetes 安装成功后，默认会创建三个namespace：</p><ul><li>default：默认的namespace，如果创建Kubernetes对象时不指定 metadata.namespace，该对象将在default namespace下创建</li><li>kube-system：Kubernetes系统创建的对象放在此namespace下，我们前面说的kube-apiserver，etcd，kube-proxy等都在该namespace下</li><li>kube-public：顾名思义，共享的namespace，所有用户对该namespace都是可读的。主要是为集群做预留，一般都不在该namespace下创建对象</li></ul><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>1.查看namesapce</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get namespaces</span><br><span class="line">kubectl get namesapce</span><br><span class="line">kubectl get ns               # 三个操作等效</span><br><span class="line">kubectl get ns --show-labels # 显示namespace的label</span><br></pre></td></tr></table></figure><p>使用namesapces,namesapce,ns都是可以的。如下列出了当前集群中的所有namespace</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster ~]# kubectl get ns</span><br><span class="line">NAME                   STATUS   AGE</span><br><span class="line">default                Active   34d</span><br><span class="line">develop                Active   17d</span><br><span class="line">ingress-nginx          Active   33d</span><br><span class="line">kube-node-lease        Active   34d</span><br><span class="line">kube-public            Active   34d</span><br><span class="line">kube-system            Active   34d</span><br><span class="line">kubernetes-dashboard   Active   31d</span><br><span class="line">pre-release            Active   17d</span><br></pre></td></tr></table></figure><p>可以使用 <code>kubectl describe</code> 命令来查看某个namespace的概要信息，如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster ~]# kubectl describe ns default</span><br><span class="line">Name:         default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Status:       Active</span><br><span class="line"></span><br><span class="line">No resource quota.</span><br><span class="line"></span><br><span class="line">No resource limits.</span><br></pre></td></tr></table></figure><p>2.创建namespace</p><p>有两种方式：通过yaml定义文件创建或直接使用命令创建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 方式1. 通过yaml定义文件创建</span></span><br><span class="line">[root@kmaster ~]# vim test-namespace.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: test     # namespace的名称</span><br><span class="line">  labels:</span><br><span class="line">    name: ns-test</span><br><span class="line">[root@kmaster ~]# kubectl create -f ./test-namespace.yaml  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方式2. 直接使用命令创建</span></span><br><span class="line">[root@kmaster ~]# kubectl create ns test</span><br></pre></td></tr></table></figure><p>3.在namesapce中创建对象</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 在yaml中通过metadata.namesapce 指定</span></span><br><span class="line">[root@kmaster ~]# kubectl get deploy my-nginx -o yaml</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    run: my-nginx</span><br><span class="line">  name: my-nginx</span><br><span class="line">  namespace: test  # 指定namespace</span><br><span class="line">spec:</span><br><span class="line">  ...</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 在命令中通过 -n 或 --namesapce 指定</span></span><br><span class="line">[root@kmaster ~]# kubectl run dev-nginx --image=nginx:latest --replicas=3 -n test</span><br></pre></td></tr></table></figure><p>4.设定kubectl namesapce上下文</p><p>kubectl上下文即集群、namespace、用户的组合，设定kubectl上下文，即可以以上下文指定的用户，在上下文指定的集群与namespace中进行操作管理。查看当前集群kubectl上下文</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前kubectl上下文</span></span><br><span class="line">[root@kmaster ~]# kubectl config view</span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: DATA+OMITTED</span><br><span class="line">    server: https://192.168.40.111:6443</span><br><span class="line">  name: kubernetes</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: kubernetes</span><br><span class="line">    user: kubernetes-admin</span><br><span class="line">  name: kubernetes-admin@kubernetes</span><br><span class="line">current-context: kubernetes-admin@kubernetes</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: kubernetes-admin</span><br><span class="line">  user:</span><br><span class="line">    client-certificate-data: REDACTED</span><br><span class="line">    client-key-data: REDACTED</span><br></pre></td></tr></table></figure><p>可见当前上下文为kubernetes-admin@kubernetes (current-context: kubernetes-admin@kubernetes)。</p><p>创建一个kubectl上下文</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster ~]# kubectl config set-context test --namespace=test --cluster=kubernetes --user=kubernetes-admin</span><br><span class="line">Context "test" created.</span><br></pre></td></tr></table></figure><p>再次执行 <code>kubectl config view</code> 将可以看到上面创建的test上下文。</p><p>切换上下文</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置当前上下文</span></span><br><span class="line">[root@kmaster ~]# kubectl config use-context test</span><br><span class="line">Switched to context "test".</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前所在的上下文</span></span><br><span class="line">[root@kmaster ~]# kubectl config current-context</span><br><span class="line">test</span><br></pre></td></tr></table></figure><p>指定了上下文，后续操作都在该上下文对应的namespace中进行，不需要再显式指定namespace。在上下文中创建对象</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在当前上下文中创建对象</span></span><br><span class="line">[root@kmaster ~]# kubectl run my-nginx --image=nginx:latest --replicas=2</span><br><span class="line">kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed in a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.</span><br><span class="line">deployment.apps/my-nginx created</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看创建的对象，不需要指定namespace</span></span><br><span class="line">[root@kmaster ~]# kubectl get deploy</span><br><span class="line">NAME       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">my-nginx   2/2     2            2           25m</span><br><span class="line">[root@kmaster ~]# kubectl get pod</span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">my-nginx-667764d77b-ldb78   1/1     Running   0          24m</span><br><span class="line">my-nginx-667764d77b-wpgxw   1/1     Running   0          24m</span><br></pre></td></tr></table></figure><p>删除上下文</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster ~]# kubectl config delete-context test</span><br><span class="line">deleted context test from /root/.kube/config</span><br></pre></td></tr></table></figure><p>也可以使用如下命令直接切换默认的namespace</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将默认namespace设置为<span class="built_in">test</span></span></span><br><span class="line">[root@kmaster ~]# kubectl config set-context --current --namespace=test</span><br></pre></td></tr></table></figure><p>5.删除namesapce</p><p>可以使用 <code>kubectl delete ns &lt;namespace名称&gt;</code> 来删除一个namesapce，该操作会删除namespace中的所有内容。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster ~]# kubectl delete ns test</span><br></pre></td></tr></table></figure><h2 id="Resource-Quota"><a href="#Resource-Quota" class="headerlink" title="Resource Quota"></a>Resource Quota</h2><p>Resource Quota即资源配额，限定单个namespace中可使用集群资源的总量，包括两个维度：</p><ol><li>限定某个对象类型（如Pod）可创建对象的总数；</li><li>限定某个对象类型可消耗的计算资源（CPU、内存）与存储资源（存储卷声明）总数</li></ol><p>如果在 namespace 中为计算资源 CPU 和内存设定了 ResourceQuota，用户在创建对象（Pod、Service等）时，必须指定 requests 和 limits；如果在创建或更新对象时申请的资源与 namespace 的 ResourceQuota 冲突，则 apiserver 会返回 HTTP 状态码 403，以及对应的错误提示信息。当集群中总的容量小于各个 namespace 资源配额的总和时，可能会发生资源争夺，此时 Kubernetes 将按照先到先得的方式分配资源。</p><h3 id="对象数量限制"><a href="#对象数量限制" class="headerlink" title="对象数量限制"></a>对象数量限制</h3><p>声明格式为： <code>count/&lt;resource&gt;.&lt;group&gt;</code>， 如下列出各类对象的声明格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">count&#x2F;persistentvolumeclaims </span><br><span class="line">count&#x2F;services</span><br><span class="line">count&#x2F;secrets</span><br><span class="line">count&#x2F;configmaps</span><br><span class="line">count&#x2F;replicationcontrollers</span><br><span class="line">count&#x2F;deployments.apps</span><br><span class="line">count&#x2F;replicasets.apps</span><br><span class="line">count&#x2F;statefulsets.apps</span><br><span class="line">count&#x2F;jobs.batch</span><br><span class="line">count&#x2F;cronjobs.batch</span><br><span class="line">count&#x2F;deployments.extensions</span><br></pre></td></tr></table></figure><h3 id="计算资源限制"><a href="#计算资源限制" class="headerlink" title="计算资源限制"></a>计算资源限制</h3><p>定义CPU、内存请求（requests）、限制（limits）使用的总量，包括</p><ul><li>limits.cpu：namespace中，所有非终止状态的 Pod 的 CPU 限制 resources.limits.cpu 总和不能超过该值</li><li>limits.memory：namespace中，所有非终止状态的 Pod 的内存限制 resources.limits.memory 总和不能超过该值</li><li>requests.cpu：namespace中，所有非终止状态的 Pod 的 CPU 请求 resources.requrest.cpu 总和不能超过该值</li><li>requests.memory：namespace中，所有非终止状态的 Pod 的 CPU 请求 resources.requests.memory 总和不能超过该值</li></ul><h3 id="存储资源限制"><a href="#存储资源限制" class="headerlink" title="存储资源限制"></a>存储资源限制</h3><p>定义存储卷声明请求的存储总量或创建存储卷声明数量的限制，包括</p><ul><li>requests.storage：namespace中，所有存储卷声明（PersistentVolumeClaim）请求的存储总量不能超过该值</li><li>persistentvolumeclaims：namespace中，可以创建的存储卷声明的总数不能超过该值</li><li><code>&lt;storage-class-name&gt;.storageclass.storage.k8s.io/requests.storage</code>：namespace中，所有与指定存储类（StorageClass）关联的存储卷声明请求的存储总量不能超过该值</li><li><code>&lt;storage-class-name&gt;.storageclass.storage.k8s.io/persistentvolumeclaims</code>：namespace中，所有与指定存储类关联的存储卷声明的总数不能超过该值</li></ul><p>除此之外，还可以对本地临时存储资源进行限制定义</p><ul><li>requests.ephemeral-storage：namespace中，所有 Pod 的本地临时存储（local ephemeral storage）请求的总和不能超过该值</li><li>limits.ephemeral-storage：namespace中，所有 Pod 的本地临时存储限定的总和不能超过此值</li></ul><h3 id="实践-1"><a href="#实践-1" class="headerlink" title="实践"></a>实践</h3><p>查看是否开启 Resource Quota 支持，默认一般是开启的。如果没有，可在启动 apiserver 时为参数 –enable-admission-plugins 添加 ResourceQuota 配置项。<br><img src="/assets/resource-quota.png" alt="resource-quota.png"></p><p>1.创建ResourceQuota</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建namespace</span></span><br><span class="line">[root@kmaster ~]# kubectl create namespace test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑ResourceQuota定义文档</span></span><br><span class="line">[root@kmaster ~]# vim quota-test.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ResourceQuota</span><br><span class="line">metadata:</span><br><span class="line">  name: quota-test</span><br><span class="line">  namespace: test</span><br><span class="line">spec:</span><br><span class="line">  hard:</span><br><span class="line">    requests.cpu: "2"</span><br><span class="line">    requests.memory: 2Gi</span><br><span class="line">    limits.cpu: "4"</span><br><span class="line">    limits.memory: 4Gi</span><br><span class="line">    requests.nvidia.com/gpu: 4</span><br><span class="line">    pods: "3"</span><br><span class="line">    services: "6"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建ResourceQuota</span></span><br><span class="line">[root@kmaster ~]# kubectl apply -f quota-test.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看</span></span><br><span class="line">[root@kmaster ~]# kubectl get quota -n test</span><br><span class="line">NAME         CREATED AT</span><br><span class="line">quota-test   2020-05-26T10:31:10Z</span><br><span class="line">[root@kmaster ~]# kubectl describe quota quota-test -n test</span><br><span class="line">Name:                    quota-test</span><br><span class="line">Namespace:               test</span><br><span class="line">Resource                 Used  Hard</span><br><span class="line">--------                 ----  ----</span><br><span class="line">limits.cpu               0     4</span><br><span class="line">limits.memory            0     4Gi</span><br><span class="line">pods                     0     3</span><br><span class="line">requests.cpu             0     2</span><br><span class="line">requests.memory          0     2Gi</span><br><span class="line">requests.nvidia.com/gpu  0     4</span><br><span class="line">services                 0     6</span><br></pre></td></tr></table></figure><p>或者使用kubectl命令，如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster ~]# kubectl create quota quota-test --hard=count/deployments.extensions=2,count/replicasets.extensions=4,count/pods=3,count/secrets=4 --namespace=test</span><br></pre></td></tr></table></figure><p>我们在namespace test中创建了一个ResourceQuota，限制CPU、内存请求为2、2GB，限制CPU、内存限定使用为4、4GB，限制Pod个数为3 等。</p><p>我们来尝试创建一个如下定义的Deployment来测试一下，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个测试deploy</span></span><br><span class="line">[root@kmaster ~]# vim quota-test-deploy.yaml</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: quota-test-deploy</span><br><span class="line">spec:</span><br><span class="line"> selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      purpose: quota-test</span><br><span class="line"> replicas: 3</span><br><span class="line"> template:</span><br><span class="line">   metadata:</span><br><span class="line">     labels:</span><br><span class="line">       purpose: quota-test</span><br><span class="line">   spec:</span><br><span class="line">     containers:</span><br><span class="line">     - name: quota-test</span><br><span class="line">       image: nginx</span><br><span class="line">       resources:</span><br><span class="line">         limits:</span><br><span class="line">           memory: "2Gi"</span><br><span class="line">           cpu: "1"</span><br><span class="line">         requests:</span><br><span class="line">           memory: "500Mi"</span><br><span class="line">           cpu: "500m"</span><br><span class="line">[root@kmaster ~]# kubectl apply -f quota-test-deploy.yaml -n test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看pod</span></span><br><span class="line">[root@kmaster ~]# kubectl get pod -n test</span><br><span class="line">NAME                                 READY   STATUS    RESTARTS   AGE</span><br><span class="line">quota-test-deploy-6b89fdc686-2dthq   1/1     Running   0          3m54s</span><br><span class="line">quota-test-deploy-6b89fdc686-9m2qw   1/1     Running   0          3m54s</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看deploy状态</span></span><br><span class="line">[root@kmaster ~]# kubectl get deploy quota-test-deploy -n test -o yaml</span><br><span class="line">  message: 'pods "quota-test-deploy-6b89fdc686-rmktq" is forbidden: exceeded quota:</span><br><span class="line">        quota-test, requested: limits.memory=2Gi, used: limits.memory=4Gi, limited:</span><br><span class="line">        limits.memory=4Gi'</span><br></pre></td></tr></table></figure><p> replicas: 3定义创建三个Pod副本，但只成功创建了两个Pod，在deploy的status部分（最后一条命令结果），我们可以看到message提示第三个Pod创建时被拒绝，因为内存已达到限定。我们也可以将limits.memory调整为1Gi，将replicas调整为4，来验证对Pod个数的限制。可看到最终只起了三个Pod，status部分message提示 <code>pods &quot;quota-test-deploy-9dc54f95c-gzqw7&quot; is forbidden: exceeded quota:quota-test, requested: pods=1, used: pods=3, limited: pods=3</code>。</p><h2 id="Resource-Limit-Range"><a href="#Resource-Limit-Range" class="headerlink" title="Resource Limit Range"></a>Resource Limit Range</h2><h3 id="理解-1"><a href="#理解-1" class="headerlink" title="理解"></a>理解</h3><p>Resource Quota 是对namespace中总体的资源使用进行限制，Resource Limit Range 则是对具体某个Pod或容器的资源使用进行限制。默认情况下，namespace中Pod或容器的资源消耗是不受限制的，这就可能导致某个容器应用内存泄露耗尽资源影响其它应用的情况。Limit Range可以用来限定namespace内Pod（或容器）可以消耗资源的数量。</p><p>使用LimitRange对象，我们可以：</p><ol><li>限制namespace中每个Pod或容器的最小与最大计算资源</li><li>限制namespace中每个Pod或容器计算资源request、limit之间的比例</li><li>限制namespace中每个存储卷声明（PersistentVolumeClaim）可使用的最小与最大存储空间</li><li>设置namespace中容器默认计算资源的request、limit，并在运行时自动注入到容器中</li></ol><p>如果创建或更新对象（Pod、容器、PersistentVolumeClaim）对资源的请求与LimitRange相冲突，apiserver会返回HTTP状态码403，以及相应的错误提示信息；如果namespace中定义了LimitRange 来限定CPU与内存等计算资源的使用，则用户创建Pod、容器时，必须指定CPU或内存的request与limit，否则将被系统拒绝；当namespace总的limit小于其中Pod、容器的limit之和时，将发生资源争夺，Pod或者容器将不能创建，但不影响已经创建的Pod或容器。</p><h3 id="实践-2"><a href="#实践-2" class="headerlink" title="实践"></a>实践</h3><p>创建一个测试namespace test-limitrange，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建测试namespace</span></span><br><span class="line">[root@kmaster ~]# kubectl create namespace test-limitrange</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换默认的namespace</span></span><br><span class="line">[root@kmaster ~]# kubectl config set-context --current --namespace=test-limitrange</span><br></pre></td></tr></table></figure><p>创建LimitRange定义文件 lr-test.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">LimitRange</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">lr-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">limits:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Container</span>       <span class="comment">#资源类型</span></span><br><span class="line">    <span class="attr">max:</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">"1"</span>            <span class="comment">#限定最大CPU</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">"1Gi"</span>       <span class="comment">#限定最大内存</span></span><br><span class="line">    <span class="attr">min:</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">"100m"</span>         <span class="comment">#限定最小CPU</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">"100Mi"</span>     <span class="comment">#限定最小内存</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">"900m"</span>         <span class="comment">#默认CPU限定</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">"800Mi"</span>     <span class="comment">#默认内存限定</span></span><br><span class="line">    <span class="attr">defaultRequest:</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">"200m"</span>         <span class="comment">#默认CPU请求</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">"200Mi"</span>     <span class="comment">#默认内存请求</span></span><br><span class="line">    <span class="attr">maxLimitRequestRatio:</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="number">2</span>              <span class="comment">#限定CPU limit/request比值最大为2  </span></span><br><span class="line">      <span class="attr">memory:</span> <span class="number">1.5</span>         <span class="comment">#限定内存limit/request比值最大为1.5</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Pod</span></span><br><span class="line">    <span class="attr">max:</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">"2"</span>            <span class="comment">#限定Pod最大CPU</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">"2Gi"</span>       <span class="comment">#限定Pod最大内存</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line">    <span class="attr">max:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">2Gi</span>        <span class="comment">#限定PVC最大的requests.storage</span></span><br><span class="line">    <span class="attr">min:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">1Gi</span>        <span class="comment">#限定PVC最小的requests.storage</span></span><br></pre></td></tr></table></figure><p>该文件定义了在namespace <code>test-limitrange</code> 中，容器、Pod、PVC的资源限制，在该namesapce中，只有满足如下条件，对象才能创建成功</p><ul><li>容器的<code>resources.limits</code>部分CPU必须在100m-1之间，内存必须在100Mi-1Gi之间，否则创建失败</li><li>容器的<code>resources.limits</code>部分CPU与<code>resources.requests</code>部分CPU的比值最大为2，memory比值最大为1.5，否则创建失败</li><li>Pod内所有容器的<code>resources.limits</code>部分CPU总和最大为2，内存总和最大为2Gi，否则创建失败</li><li>PVC的<code>resources.requests.storage</code>最大为2Gi，最小为1Gi，否则创建失败</li></ul><blockquote><p>如果容器定义了<code>resources.requests</code>没有定义<code>resources.limits</code>，则LimitRange中的default部分将作为limit注入到容器中；如果容器定义了<code>resources.limits</code>却没有定义<code>resources.requests</code>，则将requests值也设置为limits的值；如果容器两者都没有定义，则使用LimitRange中default作为limits，defaultRequest作为requests值</p></blockquote><p>创建与查看LimitRange，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建LimitRange</span></span><br><span class="line">[root@kmaster ~]# kubectl apply -f lr-test.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看</span></span><br><span class="line">[root@kmaster ~]# kubectl describe limits lr-test</span><br><span class="line">Name:                  lr-test</span><br><span class="line">Namespace:             test-limitrange</span><br><span class="line">Type                   Resource  Min    Max  Default Request  Default Limit  Max Limit/Request Ratio</span><br><span class="line">----                   --------  ---    ---  ---------------  -------------  -----------------------</span><br><span class="line">Container              cpu       100m   1    200m             900m           2</span><br><span class="line">Container              memory    100Mi  1Gi  200Mi            800Mi          1500m</span><br><span class="line">Pod                    cpu       -      2    -                -              -</span><br><span class="line">Pod                    memory    -      2Gi  -                -              -</span><br><span class="line">PersistentVolumeClaim  storage   1Gi    2Gi  -                -              -</span><br></pre></td></tr></table></figure><p>我们可以创建不同配置的容器或Pod对象来验证，出于篇幅不再列出验证步骤。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文对K8s的Namespace及针对Namespace的资源限制管理ResourceQuota，LimitRange进行了较为深入的探索，其中ResourceQuota对整个Namespace的资源使用情况进行限制，LimitRange则对单个的Pod或容器的资源使用进行限制。Namespace的权限控制可基于RBAC来实现，后续再单独进行梳理介绍。</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> k8s </tag>
            
            <tag> ResourceQuota </tag>
            
            <tag> LimitRange </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决K8s “kernel:unregister_netdevice:waiting for vethxxx to become free. Usage count=1” 的问题（Kernel升级）</title>
      <link href="/k8s-netdevice-issue.html"/>
      <url>/k8s-netdevice-issue.html</url>
      
        <content type="html"><![CDATA[<p>k8s集群运行过程中，经常出现节点上报出类似 “kernel:unregister_netdevice:waiting for vethxxx to become free. Usage count=1” 的错误信息，一方面影响交互，另一方面，对于有些操作比如 <code>docker stop</code>，半天没有响应，处于hang住的状态。</p><a id="more"></a><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>操作系统及内核版本为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-2 ~]# cat /etc/redhat-release </span><br><span class="line">CentOS Linux release 7.6.1810 (Core) </span><br><span class="line"></span><br><span class="line">[root@dev-server-2 ~]# uname -a</span><br><span class="line">Linux dev-server-2 3.10.0-957.el7.x86_64 #1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><p>经常有节点报出类似如下错误</p><p><img src="/assets/docker-bug.png" alt="docker-bug"></p><p>查看一些网上资料，一般都说是Kernel的Bug，并且虽然有些地方说在先前版本已经修复，但是在较高版本上仍有出现。</p><p>有一些解决办法是停止syslog服务，让其不将错误信息显示到控制台，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-2 ~]# systemctl stop rsyslog</span><br></pre></td></tr></table></figure><p>但这只能解决影响交互的问题，对于容器引擎被hang住的问题并没有解决，治标不治本。</p><p>也有人对此Bug的原因进行了追踪分析，判断可能是net_device引用计数器泄露的原因（参考：<a href="https://zhuanlan.zhihu.com/p/66895097" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/66895097</a> ），并给出了修复补丁，尝试着安装给出的补丁，但没有成功。</p><p>查看了目前elrepo的kernel的ml（mainline stable，稳定的主线版本）版本已经到了 5.6.14-1.el7.elrepo， 于是尝试着对kernel进行升级。</p><h2 id="升级Kernel"><a href="#升级Kernel" class="headerlink" title="升级Kernel"></a>升级Kernel</h2><ol><li>更新yum仓库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-2 ~]# yum -y update</span><br></pre></td></tr></table></figure><ol start="2"><li>导入elrepo仓库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">导入elrepo仓库的公钥</span></span><br><span class="line">[root@dev-server-2 ~]# rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line"><span class="meta">#</span><span class="bash">安装ELRepo仓库的yum源</span></span><br><span class="line">[root@dev-server-2 ~]# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br><span class="line"><span class="meta">#</span><span class="bash">查看可用的kerner版本</span></span><br><span class="line">[root@dev-server-2 ~]# yum --disablerepo="*" --enablerepo="elrepo-kernel" list available</span><br></pre></td></tr></table></figure><ol start="3"><li>升级内核</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装最新版的内核</span></span><br><span class="line">[root@dev-server-2 ~]# yum --enablerepo=elrepo-kernel install kernel-ml</span><br></pre></td></tr></table></figure><ol start="4"><li>设置默认启动内核</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看系统已有内核</span></span><br><span class="line">[root@dev-server-2 ~]# sudo awk -F\' '$1=="menuentry " &#123;print i++ " : " $2&#125;' /etc/grub2.cfg</span><br><span class="line">0 : CentOS Linux (5.6.14-1.el7.elrepo.x86_64) 7 (Core)</span><br><span class="line">1 : CentOS Linux (3.10.0-957.el7.x86_64) 7 (Core)</span><br><span class="line">2 : CentOS Linux (0-rescue-f638aa03cdcf42998b077254bde50b53) 7 (Core)</span><br><span class="line"><span class="meta">#</span><span class="bash">设置默认启动内核，其中0为上述查出内核的索引</span></span><br><span class="line">grub2-set-default 0</span><br><span class="line"><span class="meta">#</span><span class="bash">生成grub配置文件</span></span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure><ol start="5"><li>重启验证</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">重启</span></span><br><span class="line">[root@dev-server-2 devuser]# reboot</span><br><span class="line"><span class="meta">#</span><span class="bash">查看当前内核版本</span></span><br><span class="line">[root@dev-server-2 devuser]# uname -a</span><br><span class="line">Linux dev-server-2 5.6.14-1.el7.elrepo.x86_64 #1 SMP Tue May 19 12:17:13 EDT 2020 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><ol start="6"><li>删除旧内核</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看现有内核</span></span><br><span class="line">[root@dev-server-2 devuser]# rpm -qa | grep kernel</span><br><span class="line">kernel-tools-3.10.0-957.el7.x86_64</span><br><span class="line">kernel-headers-3.10.0-1062.1.1.el7.x86_64</span><br><span class="line">kernel-debuginfo-3.10.0-957.el7.x86_64</span><br><span class="line">kernel-tools-libs-3.10.0-957.el7.x86_64</span><br><span class="line">kernel-debuginfo-common-x86_64-3.10.0-957.el7.x86_64</span><br><span class="line">kernel-3.10.0-957.el7.x86_64</span><br><span class="line">kernel-ml-5.6.14-1.el7.elrepo.x86_64</span><br><span class="line"><span class="meta">#</span><span class="bash">删除旧的内核</span></span><br><span class="line">[root@dev-server-2 devuser]# yum remove ernel-tools-3.10.0-957.el7.x86_64 kernel-headers-3.10.0-1062.1.1.el7.x86_64 kernel-debuginfo-3.10.0-957.el7.x86_64 kernel-tools-libs-3.10.0-957.el7.x86_64 kernel-debuginfo-common-x86_64-3.10.0-957.el7.x86_64 kernel-3.10.0-957.el7.x86_64</span><br></pre></td></tr></table></figure><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>通过升级内核重启后，问题目前没有再复现。但是否彻底解决该Bug待进一步跟进（至少不需要重装系统了）。</p><p>参考：</p><ol><li><a href="https://zhuanlan.zhihu.com/p/66895097" target="_blank" rel="noopener">诊断修复 TiDB Operator 在 K8s 测试中遇到的 Linux 内核问题</a></li><li><a href="https://www.cnblogs.com/xzkzzz/p/9627658.html" target="_blank" rel="noopener">Centos7 升级内核版本</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试官：请写一个你认为比较“完美”的单例</title>
      <link href="/patterns-singleton.html"/>
      <url>/patterns-singleton.html</url>
      
        <content type="html"><![CDATA[<p>单例模式是保证一个类的实例有且只有一个，在需要控制资源（如数据库连接池），或资源共享（如有状态的工具类）的场景中比较适用。如果让我们写一个单例实现，估计绝大部分人都觉得自己没问题，但如果需要实现一个比较完美的单例，可能并没有你想象中简单。本文以主人公小雨的一次面试为背景，循序渐进地讨论如何实现一个较为“完美”的单例。本文人物与场景皆为虚构，如有雷同，纯属捏造。</p><a id="more"></a><p>小雨计算机专业毕业三年，对设计模式略有涉猎，能写一些简单的实现，掌握一些基本的JVM知识。在某次面试中，面试官要求现场写代码：请写一个你认为比较“完美”的单例。</p><h2 id="简单的单例实现"><a href="#简单的单例实现" class="headerlink" title="简单的单例实现"></a>简单的单例实现</h2><p>凭借着对单例的理解与印象，小雨写出了下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写完后小雨审视了一遍，总觉得有点太简单了，离“完美”貌似还相差甚远。对，在多线程并发环境下，这个实现就玩不转了，如果两个线程同时调用 getInstance() 方法，同时执行到了 if 判断，则两边都认为 instance 实例为空，都会实例化一个 Singleton 对象，就会导致至少产生两个实例了，小雨心想。嗯，需要解决多线程并发环境下的同步问题，保证单例的线程安全。</p><h2 id="线程安全的单例"><a href="#线程安全的单例" class="headerlink" title="线程安全的单例"></a>线程安全的单例</h2><p>一提到并发同步问题，小雨就想到了锁。加个锁还不简单，synchronized 搞起，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小雨再次审视了一遍，发现貌似每次 getInstance() 被调用时，其它线程必须等待这个线程调用完才能执行（因为有锁锁住了嘛），但是加锁其实是想避免多个线程同时执行实例化操作导致产生多个实例，在单例被实例化后，后续调用 getInstance() 直接返回就行了，每次都加锁释放锁造成了不必要的开销。</p><p>经过一阵思索与回想之后，小雨记起了曾经看过一个叫 Double-Checked Locking 的东东，双重检查锁，嗯，再优化一下,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单例在完成第一次实例化，后续再调用 getInstance() 先判空，如果不为空则直接返回，如果为空，就算两个线程同时判断为空，在同步块中还做了一次双重检查，可以确保只会实例化一次，省去了不必要的加锁开销，同时也保证了线程安全。并且令小雨感到自我满足的是他基于对JVM的一些了解加上了 volatile 关键字来避免实例化时由于指令重排序优化可能导致的问题，真是画龙点睛之笔啊。 简直——完美！</p><div class="note quote">            <p class='p subtitle'>Tips: volatile关键字的语义</p><ol><li>保证变量对所有线程的可见性。对变量写值的时候JMM（Java内存模型）会将当前线程的工作内存值刷新到主内存，读的时候JMM会从主内存读取变量的值而不是从工作内存读取，确保一个变量值被一个线程更新后，另一个线程能立即读取到更新后的值。</li><li>禁止指令重排序优化。JVM在执行程序时为了提高性能，编译器和处理器常常会对指令做重排序，使用 volatile 可以禁止进行指令重排序优化。</li></ol><p>JVM创建一个新的实例时，主要需三步：</p><ol><li>分配内存</li><li>初始化构造器</li><li>将对象引用指向分配的内存地址</li></ol><p>如果一个线程在实例化时JVM做了指令重排，比如先执行了1，再执行3，最后执行2，则另一个线程可能获取到一个还没有完成初始化的对象引用，调用时可能导致问题，使用volatile可以禁止指令重排，避免这种问题。</p>          </div><p>小雨将答案交给面试官，面试官瞄了一眼说道：“基本可用了，但如果我用反射直接调用这个类的构造函数，是不是就不能保证单例了。”  小雨挠挠头，对哦，如果使用反射就可以在运行时改变单例构造器的可见性，直接调用构造器来创建一个新的实例了，比如通过下面这段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;Singleton&gt; constructor = Singleton<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>()</span>;</span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Singleton singleton = constructor.newInstance();</span><br></pre></td></tr></table></figure><p>小雨再次陷入了思考。</p><h2 id="反射安全的单例"><a href="#反射安全的单例" class="headerlink" title="反射安全的单例"></a>反射安全的单例</h2><p>怎么避免反射破坏单例呢，或许可以加一个静态变量来控制,让构造器只有从 getInstance() 内部调用才有效，不通过 getInstance() 直接调用则抛出异常，小雨按这个思路做了一番改造，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Please use getInstance() method to get the single instance."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用静态变量 flag 来控制，只有从 getInstance() 调用构造器才能正常实例化，否则抛出异常。但马上小雨就发现了存在的问题：既然可以通过反射来调用构造器，那么也可以通过反射来改变 flag 的值，这样苦心设置的 flag 控制逻辑不就被打破了吗。看来也没那么“完美”。虽然并不那么完美，但也一定程度上规避了使用反射直接调用构造器的场景，并且貌似也想不出更好的办法了，于是小雨提交了答案。</p><p>面试官露出迷之微笑：“想法挺好，反射的问题基本解决了，但如果我序列化这个单例对象，然后再反序列化出来一个对象，这两个对象还一样吗，还能保证单例吗。如果不能，怎么解决这个问题？”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SerializationSafeSingleton s1 = SerializationSafeSingleton.getInstance();</span><br><span class="line">ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">oos.writeObject(s1);</span><br><span class="line">oos.close();</span><br><span class="line"></span><br><span class="line">ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">SerializationSafeSingleton s2 = (SerializationSafeSingleton) ois.readObject();</span><br><span class="line">ois.close();</span><br></pre></td></tr></table></figure><p>s1 == s2 吗？ 答案是否，如何解决呢。</p><h2 id="序列化安全的单例"><a href="#序列化安全的单例" class="headerlink" title="序列化安全的单例"></a>序列化安全的单例</h2><p>小雨思考了一会，想起了曾经学习序列化知识时接触的 readResolve() 方法，该方法在ObjectInputStream已经读取一个对象并在准备返回前调用，可以用来控制反序列化时直接返回一个对象，替换从流中读取的对象，于是在前面实现的基础上，小雨添加了一个 readResolve() 方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Please use getInstance() method to get the single instance."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法代替了从流中读取对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过几个步骤的逐步改造优化，小雨完成了一个基本具备线程安全、反射安全、序列化安全的单例实现，心想这下应该足够完美了吧。面试官脸上继续保持着迷之微笑：“这个实现看起来还是显得有点复杂，并且也不能完全解决反射安全的问题，想想看还有其它实现方案吗。”</p><h2 id="其它方案"><a href="#其它方案" class="headerlink" title="其它方案"></a>其它方案</h2><p>小雨反复思考，前面的实现是通过加锁来实现线程安全，除此之外，还可以通过类的加载机制来实现线程安全——类的静态属性只会在第一次加载类时初始化，并且在初始化的过程中，JVM是不允许其它线程来访问的，于是又写出了下面两个版本</p><ol><li>静态初始化版本</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该版本借助JVM的类加载机制，本身线程安全，但只要 Singleton 类的某个静态对象（方法或属性）被访问，就会造成实例的初始化，而该实例可能根本不会被用到，造成资源浪费，另一方面也存在反射与序列化的安全性问题，也需要进行相应的处理。</p><ol start="2"><li>静态内部类版本</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该版本只有在调用 getInstance() 才会进行实例化，即延迟加载，避免资源浪费的问题，同时也能保障线程安全，但是同样存在反射与序列化的安全性问题，需要相应处理。</p><p>这貌似跟前面版本的复杂性差不多啊，依然都需要解决反射与安全性的问题，小雨心想，有没有一种既简单又能避免这些问题的方案呢。</p><h2 id="“完美”方案"><a href="#“完美”方案" class="headerlink" title="“完美”方案"></a>“完美”方案</h2><p>一阵苦思冥想之后，小雨突然脑中灵光闪现，枚举！（这也是《Effective Java》的作者推荐的方式啊）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以直接通过 Singleton.INSTANCE 来引用单例，非常简单的实现，并且既是线程安全的，同时也能应对反射与序列化的问题，面试官想要的估计就是它了吧。小雨再次提交了答案，这一次，面试官脸上的迷之微笑逐渐消失了……</p><div class="note quote">            <p class='p subtitle'>Tips：为什么枚举是线程、反射、序列化安全的？</p><ol><li>枚举实际是通过一个继承自Enum的final类来实现（通过反编译class文件可看到具体实现），在static代码块中对其成员进行初始化，因此借助类加载机制来保障其线程安全</li><li>枚举是不支持通过反射实例化的，在Constructor类的newInstance方法中可看到</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((clazz.getModifiers() &amp; Modifier.ENUM) != <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot reflectively create enum objects"</span>);</span><br></pre></td></tr></table></figure>3. 枚举在序列化的时候仅仅是将枚举对象的name属性输出到结果中，反序列化的时候则是通过java.lang.Enum的valueOf方法来根据名字查找枚举对象。并且，编译器是不允许任何对这种序列化机制的定制的，禁用了writeObject、readObject、readObjectNoData、writeReplace和readResolve等方法。枚举通过这种机制保障了序列化安全。          </div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>枚举方案近乎“完美”，但实际中，大部分情况下，我们使用双重检查锁方案或静态内部类方案基本都能满足我们的场景并能很好地运行。并且方案从来没有“完美”，只有更好或更合适。本文只是从单例实现的不断演进的过程中，了解或回顾如反射、序列化、线程安全、Java内存模型（volatile语义）、JVM类加载机制、JVM指令重排序优化等方面的知识，同时也是启示我们在设计或实现的过程中，多从各个角度思考，尽可能全面地考虑问题。或者，在相关面试中能更好地迎合面试官的“完美”期望。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes笔记（三）：Gitlab+Jenkins Pipeline+Docker+k8s+Helm自动化部署实践（干货！）</title>
      <link href="/k8s3-cd.html"/>
      <url>/k8s3-cd.html</url>
      
        <content type="html"><![CDATA[<p>通过前面两篇文章，我们已经有了一个“嗷嗷待哺”的K8s集群环境，也对相关的概念与组件有了一个基本了解（前期对概念有个印象即可，因为只有实践了才能对其有深入理解，所谓“纸上得来终觉浅，绝知此事要躬行”），本文从实践角度介绍如何结合我们常用的Gitlab与Jenkins，通过K8s来实现项目的自动化部署，示例将包括基于SpringBoot的服务端项目与基于Vue.js的Web项目。</p><a id="more"></a><p>本文涉及到的工具与技术包括：</p><ul><li>Gitlab —— 常用的源代码管理系统</li><li>Jenkins, Jenkins Pipeline —— 常用的自动化构建、部署工具，Pipeline以流水线的方式将构建、部署的各个步骤组织起来</li><li>Docker，Dockerfile —— 容器引擎，所有应用最终都要以Docker容器运行，Dockerfile是Docker镜像定义文件</li><li>Kubernetes —— Google开源的容器编排管理系统</li><li>Helm —— Kubernetes的包管理工具，类似Linux的yum，apt，或Node的npm等包管理工具，能将Kubernetes中的应用及相关依赖服务以包（Chart）的形式组织管理</li></ul><p>环境背景：</p><ol><li>已使用Gitlab做源码管理，源码按不同的环境建立了develop（对应开发环境），pre-release（对应测试环境），master（对应生产环境）分支</li><li>已搭建了Jenkins服务</li><li>已有Docker Registry服务，用于Docker镜像存储（基于Docker Registry或Harbor自建，或使用云服务，本文使用阿里云容器镜像服务）</li><li>已搭建了K8s集群</li></ol><p>预期效果：</p><ol><li>分环境部署应用，开发环境、测试环境、生产环境分开来，部署在同一集群的不同namespace，或不同集群中（比如开发测试部署在本地集群的不同namespace中，生产环境部署在云端集群）</li><li>配置尽可能通用化，只需要通过修改少量配置文件的少量配置属性，就能完成新项目的自动化部署配置</li><li>开发测试环境在push代码时自动触发构建与部署，生产环境在master分支上添加版本tag并且push tag后触发自动部署</li><li>整体交互流程如下图</li></ol><p><img src="http://blog.jboost.cn/assets/jenkins-cicd.png" alt="jenkins-cicd"></p><h2 id="项目配置文件"><a href="#项目配置文件" class="headerlink" title="项目配置文件"></a>项目配置文件</h2><p>首先我们需要在项目的根路径中添加一些必要的配置文件，如下图所示</p><p><img src="http://blog.jboost.cn/assets/springboot-ci-structure.png" alt="springboot-ci-structure"></p><p>包括：</p><ol><li>Dockerfile文件，用于构建Docker镜像的文件（参考 <a href="http://blog.jboost.cn/docker-11.html">Docker笔记（十一）：Dockerfile详解与最佳实践</a>）</li><li>Helm相关配置文件，Helm是Kubernetes的包管理工具，可以将应用部署相关的Deployment，Service，Ingress等打包进行发布与管理（Helm的具体介绍我们后面再补充）</li><li>Jenkinsfile文件，Jenkins的pipeline定义文件，定义了各个阶段需执行的任务</li></ol><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>在项目根目录中添加一个Dockerfile文件（文件名就叫Dockerfile），定义如何构建Docker镜像，以Spring Boot项目为例，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">FROM frolvlad&#x2F;alpine-java:jdk8-slim</span><br><span class="line">#在build镜像时可以通过 --build-args profile&#x3D;xxx 进行修改</span><br><span class="line">ARG profile</span><br><span class="line">ENV SPRING_PROFILES_ACTIVE&#x3D;$&#123;profile&#125;</span><br><span class="line">#项目的端口</span><br><span class="line">EXPOSE 8000 </span><br><span class="line">WORKDIR &#x2F;mnt</span><br><span class="line"></span><br><span class="line">#修改时区</span><br><span class="line">RUN sed -i &#39;s&#x2F;dl-cdn.alpinelinux.org&#x2F;mirrors.ustc.edu.cn&#x2F;g&#39; &#x2F;etc&#x2F;apk&#x2F;repositories \</span><br><span class="line">    &amp;&amp; apk add --no-cache tzdata \</span><br><span class="line">    &amp;&amp; ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime \</span><br><span class="line">    &amp;&amp; echo &quot;Asia&#x2F;Shanghai&quot; &gt; &#x2F;etc&#x2F;timezone \</span><br><span class="line">    &amp;&amp; apk del tzdata \</span><br><span class="line">    &amp;&amp; rm -rf &#x2F;var&#x2F;cache&#x2F;apk&#x2F;* &#x2F;tmp&#x2F;* &#x2F;var&#x2F;tmp&#x2F;* $HOME&#x2F;.cache</span><br><span class="line"></span><br><span class="line">COPY .&#x2F;target&#x2F;your-project-name-1.0-SNAPSHOT.jar .&#x2F;app.jar</span><br><span class="line">ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;&#x2F;mnt&#x2F;app.jar&quot;]</span><br></pre></td></tr></table></figure><p>将SPRING_PROFILES_ACTIVE通过参数profile暴露出来，在构建的时候可以通过 –build-args profile=xxx 来进行动态设定，以满足不同环境的镜像构建要求。</p><blockquote><p>SPRING_PROFILES_ACTIVE本可以在Docker容器启动时通过<code>docker run -e SPRING_PROFILES_ACTIVE=xxx</code>来设定，因这里使用Helm进行部署不直接通过<code>docker run</code>运行，因此通过ARG在镜像构建时指定</p></blockquote><h3 id="Helm配置文件"><a href="#Helm配置文件" class="headerlink" title="Helm配置文件"></a>Helm配置文件</h3><p>Helm是Kubernetes的包管理工具，将应用部署相关的Deployment，Service，Ingress等打包进行发布与管理（可以像Docker镜像一样存储于仓库中）。如上图中Helm的配置文件包括：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">helm                                    - chart包的目录名</span><br><span class="line">├── templates                           - k8s配置模版目录</span><br><span class="line">│   ├── deployment.yaml                 - Deployment配置模板，定义如何部署Pod</span><br><span class="line">│   ├── _helpers.tpl                    - 以下划线开头的文件，helm视为公共库定义文件，用于定义通用的子模版、函数、变量等</span><br><span class="line">│   ├── ingress.yaml                    - Ingress配置模板，定义外部如何访问Pod提供的服务，类似于Nginx的域名路径配置</span><br><span class="line">│   ├── NOTES.txt                       - chart包的帮助信息文件，执行helm install命令成功后会输出这个文件的内容</span><br><span class="line">│   └── service.yaml                    - Service配置模板，配置访问Pod的服务抽象，有NodePort与ClusterIp等</span><br><span class="line">|── values.yaml                         - chart包的参数配置文件，各模版文件可以引用这里的参数</span><br><span class="line">├── Chart.yaml                          - chart定义，可以定义chart的名字，版本号等信息</span><br><span class="line">├── charts                              - 依赖的子包目录，里面可以包含多个依赖的chart包，一般不存在依赖，我这里将其删除了</span><br></pre></td></tr></table></figure><p>我们可以在Chart.yaml中定义每个项目的chart名称（类似安装包名），如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v2</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">your-chart-name</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">A</span> <span class="string">Helm</span> <span class="string">chart</span> <span class="string">for</span> <span class="string">Kubernetes</span></span><br><span class="line"></span><br><span class="line"><span class="attr">type:</span> <span class="string">application</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">appVersion:</span> <span class="number">1.16</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>在values.yaml中定义模板文件中需要用到的变量，如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#部署Pod的副本数，即运行多少个容器</span></span><br><span class="line"><span class="attr">replicaCount:</span> <span class="number">1</span></span><br><span class="line"><span class="comment">#容器镜像配置</span></span><br><span class="line"><span class="attr">image:</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/demo/demo</span></span><br><span class="line">  <span class="attr">pullPolicy:</span> <span class="string">Always</span></span><br><span class="line">  <span class="comment"># Overrides the image tag whose default is the chart version.</span></span><br><span class="line">  <span class="attr">tag:</span> <span class="string">"dev"</span></span><br><span class="line"><span class="comment">#镜像仓库访问凭证</span></span><br><span class="line"><span class="attr">imagePullSecrets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">aliyun-registry-secret</span></span><br><span class="line"><span class="comment">#覆盖启动容器名称</span></span><br><span class="line"><span class="attr">nameOverride:</span> <span class="string">""</span></span><br><span class="line"><span class="attr">fullnameOverride:</span> <span class="string">""</span></span><br><span class="line"><span class="comment">#容器的端口暴露及环境变量配置</span></span><br><span class="line"><span class="attr">container:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">  <span class="attr">env:</span> <span class="string">[]</span></span><br><span class="line"><span class="comment">#ServiceAccount，默认不创建</span></span><br><span class="line"><span class="attr">serviceAccount:</span></span><br><span class="line">  <span class="comment"># Specifies whether a service account should be created</span></span><br><span class="line">  <span class="attr">create:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Annotations to add to the service account</span></span><br><span class="line">  <span class="attr">annotations:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="attr">podAnnotations:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">podSecurityContext:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="comment"># fsGroup: 2000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">securityContext:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="comment"># capabilities:</span></span><br><span class="line">  <span class="comment">#   drop:</span></span><br><span class="line">  <span class="comment">#   - ALL</span></span><br><span class="line">  <span class="comment"># readOnlyRootFilesystem: true</span></span><br><span class="line">  <span class="comment"># runAsNonRoot: true</span></span><br><span class="line">  <span class="comment"># runAsUser: 1000</span></span><br><span class="line"><span class="comment">#使用NodePort的service，默认为ClusterIp</span></span><br><span class="line"><span class="attr">service:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"><span class="comment">#外部访问Ingress配置，需要配置hosts部分</span></span><br><span class="line"><span class="attr">ingress:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">annotations:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">    <span class="comment"># kubernetes.io/ingress.class: nginx</span></span><br><span class="line">    <span class="comment"># kubernetes.io/tls-acme: "true"</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">demo.com</span></span><br><span class="line">      <span class="attr">paths:</span> <span class="string">["/demo"]</span></span><br><span class="line">  <span class="attr">tls:</span> <span class="string">[]</span></span><br><span class="line">  <span class="comment">#  - secretName: chart-example-tls</span></span><br><span class="line">  <span class="comment">#    hosts:</span></span><br><span class="line">  <span class="comment">#      - chart-example.local</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#.... 省略了其它默认参数配置</span></span><br></pre></td></tr></table></figure><p>这里在默认生成的基础上添加了container部分，可以在这里指定容器的端口号而不用去改模板文件（让模板文件在各个项目通用，通常不需要做更改），同时添加env的配置，可以在helm部署时往容器里传入环境变量。将Service type从默认的ClusterIp改为了NodePort。部署同类型的不同项目时，只需要根据项目情况配置Chart.yaml与values.yaml两个文件的少量配置项，templates目录下的模板文件可直接复用。</p><p>部署时需要在K8s环境中从Docker镜像仓库拉取镜像，因此需要在K8s中创建镜像仓库访问凭证（imagePullSecrets）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登录Docker Registry生成/root/.docker/config.json文件</span></span><br><span class="line">sudo docker login --username=your-username registry.cn-shenzhen.aliyuncs.com</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建namespace develop（我这里是根据项目的环境分支名称建立namespace）</span></span><br><span class="line">kubectl create namespace develop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在namespace develop中创建一个secret</span></span><br><span class="line">kubectl create secret generic aliyun-registry-secret --from-file=.dockerconfigjson=/root/.docker/config.json  --type=kubernetes.io/dockerconfigjson --namespace=develop</span><br></pre></td></tr></table></figure><h3 id="Jenkinsfile"><a href="#Jenkinsfile" class="headerlink" title="Jenkinsfile"></a>Jenkinsfile</h3><p>Jenkinsfile是Jenkins pipeline配置文件，遵循Groovy语法，对于Spring Boot项目的构建部署， 编写Jenkinsfile脚本文件如下，</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">image_tag = <span class="string">"default"</span>  <span class="comment">//定一个全局变量，存储Docker镜像的tag（版本）</span></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    environment &#123;</span><br><span class="line">        GIT_REPO = <span class="string">"$&#123;env.gitlabSourceRepoName&#125;"</span>  <span class="comment">//从Jenkins Gitlab插件中获取Git项目的名称</span></span><br><span class="line">        GIT_BRANCH = <span class="string">"$&#123;env.gitlabTargetBranch&#125;"</span>  <span class="comment">//项目的分支</span></span><br><span class="line">        GIT_TAG = sh(<span class="string">returnStdout:</span> <span class="literal">true</span>,<span class="string">script:</span> <span class="string">'git describe --tags --always'</span>).trim()  <span class="comment">//commit id或tag名称</span></span><br><span class="line">        DOCKER_REGISTER_CREDS = credentials(<span class="string">'aliyun-docker-repo-creds'</span>) <span class="comment">//docker registry凭证</span></span><br><span class="line">        KUBE_CONFIG_LOCAL = credentials(<span class="string">'local-k8s-kube-config'</span>)  <span class="comment">//开发测试环境的kube凭证</span></span><br><span class="line">        KUBE_CONFIG_PROD = <span class="string">""</span> <span class="comment">//credentials('prod-k8s-kube-config') //生产环境的kube凭证</span></span><br><span class="line"></span><br><span class="line">        DOCKER_REGISTRY = <span class="string">"registry.cn-hangzhou.aliyuncs.com"</span> <span class="comment">//Docker仓库地址</span></span><br><span class="line">        DOCKER_NAMESPACE = <span class="string">"your-namespace"</span>  <span class="comment">//命名空间</span></span><br><span class="line">        DOCKER_IMAGE = <span class="string">"$&#123;DOCKER_REGISTRY&#125;/$&#123;DOCKER_NAMESPACE&#125;/$&#123;GIT_REPO&#125;"</span> <span class="comment">//Docker镜像地址</span></span><br><span class="line"></span><br><span class="line">        INGRESS_HOST_DEV = <span class="string">"dev.your-site.com"</span>    <span class="comment">//开发环境的域名</span></span><br><span class="line">        INGRESS_HOST_TEST = <span class="string">"test.your-site.com"</span>  <span class="comment">//测试环境的域名</span></span><br><span class="line">        INGRESS_HOST_PROD = <span class="string">"prod.your-site.com"</span>  <span class="comment">//生产环境的域名</span></span><br><span class="line">    &#125;</span><br><span class="line">    parameters &#123;</span><br><span class="line">        string(<span class="string">name:</span> <span class="string">'ingress_path'</span>, <span class="string">defaultValue:</span> <span class="string">'/your-path'</span>, <span class="string">description:</span> <span class="string">'服务上下文路径'</span>)</span><br><span class="line">        string(<span class="string">name:</span> <span class="string">'replica_count'</span>, <span class="string">defaultValue:</span> <span class="string">'1'</span>, <span class="string">description:</span> <span class="string">'容器副本数量'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">'Code Analyze'</span>) &#123;</span><br><span class="line">            agent any</span><br><span class="line">            steps &#123;</span><br><span class="line">               echo <span class="string">"1. 代码静态检查"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">'Maven Build'</span>) &#123;</span><br><span class="line">            agent &#123;</span><br><span class="line">                docker &#123;</span><br><span class="line">                    image <span class="string">'maven:3-jdk-8-alpine'</span></span><br><span class="line">                    args <span class="string">'-v $HOME/.m2:/root/.m2'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">"2. 代码编译打包"</span></span><br><span class="line">                sh <span class="string">'mvn clean package -Dfile.encoding=UTF-8 -DskipTests=true'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">'Docker Build'</span>) &#123;</span><br><span class="line">            agent any</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">"3. 构建Docker镜像"</span></span><br><span class="line">                echo <span class="string">"镜像地址： $&#123;DOCKER_IMAGE&#125;"</span></span><br><span class="line">                <span class="comment">//登录Docker仓库</span></span><br><span class="line">                sh <span class="string">"sudo docker login -u $&#123;DOCKER_REGISTER_CREDS_USR&#125; -p $&#123;DOCKER_REGISTER_CREDS_PSW&#125; $&#123;DOCKER_REGISTRY&#125;"</span></span><br><span class="line">                script &#123;</span><br><span class="line">                    <span class="keyword">def</span> profile = <span class="string">"dev"</span></span><br><span class="line">                    <span class="keyword">if</span> (env.gitlabTargetBranch == <span class="string">"develop"</span>) &#123;</span><br><span class="line">                        image_tag = <span class="string">"dev."</span> + env.GIT_TAG</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (env.gitlabTargetBranch == <span class="string">"pre-release"</span>) &#123;</span><br><span class="line">                        image_tag = <span class="string">"test."</span> + env.GIT_TAG</span><br><span class="line">                        profile = <span class="string">"test"</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (env.gitlabTargetBranch == <span class="string">"master"</span>)&#123;</span><br><span class="line">                        <span class="comment">// master分支则直接使用Tag</span></span><br><span class="line">                        image_tag = env.GIT_TAG</span><br><span class="line">                        profile = <span class="string">"prod"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//通过--build-arg将profile进行设置，以区分不同环境进行镜像构建</span></span><br><span class="line">                    sh <span class="string">"docker build  --build-arg profile=$&#123;profile&#125; -t $&#123;DOCKER_IMAGE&#125;:$&#123;image_tag&#125; ."</span></span><br><span class="line">                    sh <span class="string">"sudo docker push $&#123;DOCKER_IMAGE&#125;:$&#123;image_tag&#125;"</span></span><br><span class="line">                    sh <span class="string">"docker rmi $&#123;DOCKER_IMAGE&#125;:$&#123;image_tag&#125;"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">'Helm Deploy'</span>) &#123;</span><br><span class="line">            agent &#123;</span><br><span class="line">                docker &#123;</span><br><span class="line">                    image <span class="string">'lwolf/helm-kubectl-docker'</span></span><br><span class="line">                    args <span class="string">'-u root:root'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">"4. 部署到K8s"</span></span><br><span class="line">                sh <span class="string">"mkdir -p /root/.kube"</span></span><br><span class="line">                script &#123;</span><br><span class="line">                    <span class="keyword">def</span> kube_config = env.KUBE_CONFIG_LOCAL</span><br><span class="line">                    <span class="keyword">def</span> ingress_host = env.INGRESS_HOST_DEV</span><br><span class="line">                    <span class="keyword">if</span> (env.gitlabTargetBranch == <span class="string">"pre-release"</span>) &#123;</span><br><span class="line">                        ingress_host = env.INGRESS_HOST_TEST</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (env.gitlabTargetBranch == <span class="string">"master"</span>)&#123;</span><br><span class="line">                        ingress_host = env.INGRESS_HOST_PROD</span><br><span class="line">                        kube_config = env.KUBE_CONFIG_PROD</span><br><span class="line">                    &#125;</span><br><span class="line">                    sh <span class="string">"echo $&#123;kube_config&#125; | base64 -d &gt; /root/.kube/config"</span></span><br><span class="line">                    <span class="comment">//根据不同环境将服务部署到不同的namespace下，这里使用分支名称</span></span><br><span class="line">                    sh <span class="string">"helm upgrade -i --namespace=$&#123;env.gitlabTargetBranch&#125; --set replicaCount=$&#123;params.replica_count&#125; --set image.repository=$&#123;DOCKER_IMAGE&#125; --set image.tag=$&#123;image_tag&#125; --set nameOverride=$&#123;GIT_REPO&#125; --set ingress.hosts[0].host=$&#123;ingress_host&#125; --set ingress.hosts[0].paths=&#123;$&#123;params.ingress_path&#125;&#125; $&#123;GIT_REPO&#125; ./helm/"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Jenkinsfile定义了整个自动化构建部署的流程：</p><ol><li>Code Analyze，可以使用SonarQube之类的静态代码分析工具完成代码检查，这里先忽略</li><li>Maven Build，启动一个Maven的Docker容器来完成项目的maven构建打包，挂载maven本地仓库目录到宿主机，避免每次都需要重新下载依赖包</li><li>Docker Build，构建Docker镜像，并推送到镜像仓库，不同环境的镜像通过tag区分，开发环境使用dev.commitId的形式，如dev.88f5822，测试环境使用test.commitId，生产环境可以将webhook事件设置为tag push event，直接使用tag名称</li><li>Helm Deploy，使用helm完成新项目的部署，或已有项目的升级，不同环境使用不同的参数配置，如访问域名，K8s集群的访问凭证kube_config等</li></ol><h2 id="Jenkins配置"><a href="#Jenkins配置" class="headerlink" title="Jenkins配置"></a>Jenkins配置</h2><h3 id="Jenkins任务配置"><a href="#Jenkins任务配置" class="headerlink" title="Jenkins任务配置"></a>Jenkins任务配置</h3><p>在Jenkins中创建一个pipeline的任务，如图</p><p><img src="http://blog.jboost.cn/assets/jenkins-pipeline-pro.png" alt="jenkins-pipeline-pro"></p><p>配置构建触发器，将目标分支设置为develop分支，生成一个token，如图</p><p><img src="http://blog.jboost.cn/assets/jenkins-pipeline-config1.png" alt="jenkins-pipeline-config1"></p><p>记下这里的“GitLab webhook URL”及token值，在Gitlab配置中使用。</p><p>配置流水线，选择“Pipeline script from SCM”从项目源码中获取pipeline脚本文件，配置项目Git地址，拉取源码凭证等，如图</p><p><img src="http://blog.jboost.cn/assets/jenkins-pipeline-config2.png" alt="jenkins-pipeline-config2.png"></p><p>保存即完成了项目开发环境的Jenkins配置。测试环境只需将对应的分支修改为pre-release即可</p><h3 id="Jenkins凭据配置"><a href="#Jenkins凭据配置" class="headerlink" title="Jenkins凭据配置"></a>Jenkins凭据配置</h3><p>在Jenkinsfile文件中，我们使用到了两个访问凭证——Docker Registry凭证与本地K8s的kube凭证，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DOCKER_REGISTER_CREDS = credentials('aliyun-docker-repo-creds') //docker registry凭证</span><br><span class="line">KUBE_CONFIG_LOCAL = credentials('local-k8s-kube-config')  //开发测试环境的kube凭证</span><br></pre></td></tr></table></figure><p>这两个凭证需要在Jenkins中创建。</p><p>添加Docker Registry登录凭证,在Jenkins 凭据页面，添加一个用户名密码类型的凭据，如图</p><p><img src="http://blog.jboost.cn/assets/jenkins-cred.png" alt="jenkins-cred"></p><p><img src="http://blog.jboost.cn/assets/jenkins-cred2.png" alt="jenkins-cred2"></p><p>添加K8s集群的访问凭证，在master节点上将/root/.kube/config文件内容进行base64编码，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">base64 /root/.kube/config &gt; kube-config-base64.txt</span><br><span class="line">cat kube-config-base64.txt</span><br></pre></td></tr></table></figure><p>使用编码后的内容在Jenkins中创建一个Secret text类型的凭据，如图</p><p><img src="http://blog.jboost.cn/assets/jenkins-cred3.png" alt="jenkins-cred3"></p><p>在Secret文本框中输入base64编码后的内容。</p><h2 id="Gitlab配置"><a href="#Gitlab配置" class="headerlink" title="Gitlab配置"></a>Gitlab配置</h2><p>在Gitlab项目的 Settings - Integrations 页面配置一个webhook，在URL与Secret Token中填入前面Jenkins触发器部分的“GitLab webhook URL”及token值，选中“Push events”作为触发事件，如图</p><p><img src="http://blog.jboost.cn/assets/gitlab-webhook-config.png" alt="gitlab-webhook-config"></p><p>开发、测试环境选择“Push events”则在开发人员push代码，或merge代码到develop，pre-release分支时，就会触发开发或测试环境的Jenkins pipeline任务完成自动化构建；生产环境选择“Tag push events”，在往master分支push tag时触发自动化构建。如图为pipeline构建视图</p><p><img src="http://blog.jboost.cn/assets/jenkins-build.png" alt="jenkins-build"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍使用Gitlab+Jenkins Pipeline+Docker+Kubernetes+Helm来实现Spring Boot项目的自动化部署，只要稍加修改即可应用于其它基于Spring Boot的项目（具体修改的地方在源码的Readme文件中说明）。</p><p>本文涉及的所有配置文件（包括基于Spring Boot的服务端项目与基于Vue.js的Web项目）可在源码项目中获取（源码地址获取办法：关注公众号“半路雨歌”，首页输入“k8sops”即可）。</p><p>原文地址：<a href="http://blog.jboost.cn/k8s3-cd.html">http://blog.jboost.cn/k8s3-cd.html</a></p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> k8s </tag>
            
            <tag> helm </tag>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes笔记（二）：了解k8s的基本组件与概念</title>
      <link href="/k8s2-concept.html"/>
      <url>/k8s2-concept.html</url>
      
        <content type="html"><![CDATA[<p>前文 <a href="/k8s1-installation.html">Kubernetes笔记（一）：十分钟部署一套K8s环境</a> 介绍了如何快速搭建一个k8s系统。为了继续使用k8s来部署我们的应用，需要先对k8s中的一些基本组件与概念有个了解。</p><a id="more"></a><h2 id="Kubernetes是什么"><a href="#Kubernetes是什么" class="headerlink" title="Kubernetes是什么"></a>Kubernetes是什么</h2><p>Kubernetes是Google于2014年基于其内部Brog系统开源的一个容器编排管理系统，可使用声明式的配置（以yaml文件的形式）自动地执行容器化应用程序的管理，包括部署、伸缩、负载均衡、回滚等。</p><p>kubernetes提供的功能：</p><ul><li>自动发布与伸缩：可以通过声明式的配置文件定义想要部署的容器，Kubernetes将自动进行容器的部署，达到期望的结果；通过指定容器副本数，或者设置根据资源负载情况（如CPU、内存使用率），自动对容器组进行快速的伸缩——增大或缩小容器数量</li><li>滚动升级与灰度发布：采用逐步替换的策略实现滚动升级，使用Kubernetes也可以很轻易地管理系统的灰度发布</li><li>服务发现与负载均衡：Kubernetes通过DNS名称或IP地址暴露容器的访问方式，并且可在同一容器组内实现负载分发与均衡</li><li>存储编排：Kubernetes可以自动挂载指定的存储系统，如local storage/nfs/云存储等</li><li>故障恢复：Kubernetes自动重启已经停机的容器，替换不满足健康检查的容器</li><li>密钥与配置管理：Kubernetes可以存储与管理敏感信息，如Docker Registry的登录凭证，密码，ssh密钥等</li></ul><h2 id="Kubernetes架构"><a href="#Kubernetes架构" class="headerlink" title="Kubernetes架构"></a>Kubernetes架构</h2><p>我们先来看一张Kubernetes的架构图</p><p><img src="/assets/k8s-arch.png" alt="k8s-arch"></p><p>Kubernetes是一套分布式系统， 与大多数分布式系统类似，包含控制节点（master node）与工作节点（worker node）。</p><h3 id="master-node"><a href="#master-node" class="headerlink" title="master node"></a>master node</h3><p>控制节点就是指挥官，负责发号施令的，其上运行一些管理服务来对整个系统进行管理与控制，包括</p><ul><li>apiserver：作为整个系统的对外接口，提供一套Restful API供客户端调用，任何的资源请求/调用操作都是通过kube-apiserver提供的接口进行,如kubectl、kubernetes dashboard等管理工具就是通过apiserver来实现对集群的管理</li><li>kube-scheduler：资源调度器，负责将容器组分配到哪些节点上</li><li>kube-controller-manager：管理控制器，集群中处理常规任务的后台线程，包括节点控制器（负责监听节点停机的事件并作出对应响应）、endpoint-controller（刷新服务与容器组的关联信息）、replication-controller（维护容器组的副本数为指定的数值）、Service Account &amp; Token控制器（负责为新的命名空间创建默认的 Service Account 以及 API Access Token）</li><li>etcd：数据存储，存储集群所有的配置信息</li><li>coredns：实现集群内部通过服务名称进行容器组访问的功能</li></ul><h3 id="worker-node"><a href="#worker-node" class="headerlink" title="worker node"></a>worker node</h3><p>工作节点就是具体干活的小兵，其上也运行一些服务来执行指挥官分派的任务，包括</p><ul><li>kubelet：是工作节点上执行操作的代理程序，负责容器的生命周期管理，定期执行容器健康检查，并上报容器的运行状态</li><li>kube-proxy：是一个具有负载均衡能力的简单的网络访问代理，负责将访问某个服务的请求分配到工作节点的具体某个容器上（kube-proxy也运行于master node上）</li><li>Docker Daemon：这个不难理解，所有服务或容器组都要以Docker容器的形式来运行（但Kubernetes其实不局限于Docker，它支持任何实现了Kubernetes容器引擎接口的容器引擎，如containerd、rktlet）</li></ul><p>另外还有既在master node上也在worker node上运行的网络通信组件 kube-flannel。这些服务组件一般运行在kube-system的命名空间中，如图</p><p><img src="/assets/kube-system.png" alt="kube-system"></p><h2 id="Kubernetes基本概念"><a href="#Kubernetes基本概念" class="headerlink" title="Kubernetes基本概念"></a>Kubernetes基本概念</h2><p>我们再来看第二张图</p><p><img src="/assets/k8s.png" alt="k8s"></p><p>功能组件在上面已经做了介绍。Kubernetes的操作对象主要包括容器组（Pod），服务（Service），副本控制器（replication-controller），及围绕这些的其它辅助对象</p><h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><p>Pod是Kubernetes创建或部署的最小基本单元。一个Pod封装一个或多个应用容器、存储资源、一个独立的网络IP以及管理控制容器运行方式的策略选项。Pod中的每个容器共享网络命名空间（包括IP与端口），Pod内的容器可以使用localhost相互通信。Pod可以指定一组共享存储卷Volumes，Pod中所有容器都可以访问共享的Volumes，Volumes用于数据持久化，防止容器重启丢失数据。</p><h3 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h3><p>Kubernetes使用Volume来解决Pod中容器重启数据丢失的问题，以及Pod中多个容器间数据共享的问题。Kubernetes支持的Volume类型包括：</p><ul><li>emptyDir：当Pod分配到Node上时，将会创建emptyDir，只要Node上的Pod一直运行，Volume就会一直存在。当Pod（不管任何原因）从Node上被删除时，emptyDir也同时会删除，存储的数据也将永久删除，但删除容器不影响emptyDir</li><li>hostPath：hostPath允许挂载Node上的文件系统到Pod里面去。如果Pod需要使用Node上的文件，可以使用hostPath</li><li>nfs: 使用nfs网络文件系统提供的共享目录</li></ul><h3 id="ReplicationController"><a href="#ReplicationController" class="headerlink" title="ReplicationController"></a>ReplicationController</h3><p>ReplicationController确保在任何时候都有按配置的Pod副本数在运行。现在推荐使用配置ReplicaSet（下一代ReplicationController）的Deployment来建立副本管理机制。</p><h3 id="ReplicaSet"><a href="#ReplicaSet" class="headerlink" title="ReplicaSet"></a>ReplicaSet</h3><p>ReplicaSet是下一代ReplicationController，两者的唯一区别是ReplicaSet支持新的基于集合的选择器，而ReplicationController仅支持基于相等选择器的需求。</p><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>Deployment为Pod与ReplicaSet提供了声明式的定义，描述你想要的目标状态是什么，Deployment controller就会帮你将Pod与ReplicaSet的实际状态改变到你想要的目标状态。</p><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>一个Service可以看做一组提供相同服务的Pod的对外访问接口。Kubernetes提供两种类型的Service：</p><ul><li>NodePort： 集群外部可以通过Node IP与Node Port来访问具体某个Pod</li><li>ClusterIP：指通过集群的内部IP暴露服务，服务只能够在集群内部可以访问，这也是默认的 ServiceType</li></ul><h3 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h3><p>Label就是一对key/value，可以附加到各种资源对象上，如Node、Pod、Service等，一个资源对象可以定义任意数量的Label。可以通过Label选择器来选择具备某个（些）Label的资源。</p><h3 id="PV-amp-PVC"><a href="#PV-amp-PVC" class="headerlink" title="PV &amp; PVC"></a>PV &amp; PVC</h3><p>PersistentVolume（PV） 为用户提供了一个存储抽象，由管理员设置，它是集群的一部分。就像节点是集群中的资源一样，PV也是集群中的资源。 PV是Volume之类的卷插件，但具有独立于Pod的生命周期。</p><p>PersistentVolumeClaim（PVC）是用户存储的请求。它与Pod相似。Pod消耗节点资源，PVC消耗PV资源。Pod可以请求特定级别的资源（CPU和内存）。PVC可以请求特定大小和访问模式的存储资源（例如，可以以读/写或只读模式挂载）。</p><h3 id="Secret"><a href="#Secret" class="headerlink" title="Secret"></a>Secret</h3><p>Secret解决了密码、token、密钥等敏感数据的存储问题，Secret的三种类型：</p><ul><li>Service Account ：用来访问Kubernetes API，由Kubernetes自动创建，并且会自动挂载到Pod的/run/secrets/kubernetes.io/serviceaccount目录中</li><li>Opaque ：Base64编码格式的Secret，用来存储密码、密钥等</li><li>kubernetes.io/dockerconfigjson ：用来存储docker registry的认证信息</li></ul><h3 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h3><p>ConfigMap用来保存key/value对的配置数据，这个数据可以在Pods里使用，或者被用来为像controller一样的系统组件存储配置数据。ConfigMap可以方便的处理不含敏感信息的字符串（敏感信息可使用Secret）。</p><h3 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h3><p>Namespace类似于Kubernetes中的虚拟集群，便于不同的分组在共享使用整个集群的资源的同时还能被分别管理。比如我们如果开发测试共用一个Kubernetes集群，则可以将开发环境的服务部署到dev的namespace，测试环境的部署到test的namespace。</p><h3 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h3><p>为集群服务提供外部访问，包括基于Nginx与Traefik两个版本，为服务提供域名绑定访问与路径路由功能。也可以基于Ingress实现服务的灰度发布。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文对Kubernetes中涉及的基本组件与概念进行了整理，对其基本构成有了一个大致的理解与印象。下一篇将从一个实践出发，实现一个基于Gitlab+Jenkins+K8s的CI/CD流程，以对涉及的各个组件进行深入了解与学习。</p><hr><p>相关阅读：</p><ul><li><a href="/k8s1-installation.html">Kubernetes笔记（一）：十分钟部署一套K8s环境</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes笔记（一）：十分钟部署一套K8s环境</title>
      <link href="/k8s1-installation.html"/>
      <url>/k8s1-installation.html</url>
      
        <content type="html"><![CDATA[<p>Kubernetes是Goole开源的一个容器编排引擎，它支持自动化部署、大规模可伸缩、应用容器化管理 —— 百度百科。</p><p>接触K8s也有半年多了，也基于阿里云平台搭建了包含多级服务、目前运行较为稳定的K8s集群（感兴趣的可参考 <a href="https://mp.weixin.qq.com/s/8s-OUUsZI0UyyyTgruEO1A" target="_blank" rel="noopener">k8s云集群混搭模式，可能帮你节省50%以上的服务成本</a>， <a href="https://mp.weixin.qq.com/s/VuSWn7cWacW6i_MtpvQ5Sw" target="_blank" rel="noopener">k8s云集群混搭模式落地分享</a>），但一直没来得及对其进行系统的学习，本系列文章还像以前Docker系列一样，以笔记的形式进行记录与分享，会包括理论与实践，感兴趣的同学可以关注，一起探索下目前较为流行的容器化及服务编排解决方案。</p><a id="more"></a><p>工欲善其事，必先利其器，本文先介绍如何在本地自行搭建一套k8s集群，并且采用我们前面介绍过的Ansible来提高效率（参考 <a href="https://mp.weixin.qq.com/s/JIZE1RvN7Yop5dsOHJvStw" target="_blank" rel="noopener">Ansible简明教程</a>）</p><p>本文所涉及的所有配置文件可在这里找到 <a href="https://github.com/ronwxy/ops/tree/master/k8s/installation" target="_blank" rel="noopener">github</a></p><h2 id="一-准备服务器节点"><a href="#一-准备服务器节点" class="headerlink" title="一. 准备服务器节点"></a>一. 准备服务器节点</h2><p>如果还没有服务器，可以参考 <a href="https://mp.weixin.qq.com/s/FVyzPVwwQ85AC4jlVZvF4g" target="_blank" rel="noopener">ubuntu18.04上搭建KVM虚拟机环境超完整过程</a> 创建虚拟服务器。</p><p>服务器节点IP（hostname）：</p><ul><li>192.168.40.111 (kmaster)</li><li>192.168.40.112 (knode1)</li><li>192.168.40.113 (knode2)</li><li>192.168.40.114 (knode3)</li></ul><p>操作系统版本：</p><ul><li><code>cat /etc/redhat-release</code> : CentOS Linux release 7.6.1810 (Core)</li><li><code>uname -a</code> : 3.10.0-957.el7.x86_64</li></ul><h2 id="二-配置Ansible"><a href="#二-配置Ansible" class="headerlink" title="二. 配置Ansible"></a>二. 配置Ansible</h2><p>如果还没有Ansible环境，可以参考 [Ansible简明教程]<a href="https://mp.weixin.qq.com/s/JIZE1RvN7Yop5dsOHJvStw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/JIZE1RvN7Yop5dsOHJvStw</a>) 搭建。</p><p>1.在Ansible服务器上的/etc/hosts文件中添加k8s服务器节点信息(参考 <a href="https://github.com/ronwxy/ops/blob/master/k8s/installation/basic/hosts" target="_blank" rel="noopener">hosts</a>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">192.168.40.111 kmaster</span><br><span class="line">192.168.40.112 knode1</span><br><span class="line">192.168.40.113 knode2</span><br><span class="line">192.168.40.114 knode3</span><br></pre></td></tr></table></figure><p>2.在Ansible服务器上的/etc/ansible/hosts文件中添加k8s服务器节点（参考 <a href="https://github.com/ronwxy/ops/blob/master/k8s/installation/basic/ansible_hosts" target="_blank" rel="noopener">ansible_hosts</a>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[k8s-all]</span><br><span class="line">kmaster</span><br><span class="line">knode1</span><br><span class="line">knode2</span><br><span class="line">knode3</span><br><span class="line"></span><br><span class="line">[k8s-master]</span><br><span class="line">kmaster</span><br><span class="line"></span><br><span class="line">[k8s-nodes]</span><br><span class="line">knode1</span><br><span class="line">knode2</span><br><span class="line">knode3</span><br></pre></td></tr></table></figure><h2 id="三-修改k8s集群各节点-etc-hosts（非必须）"><a href="#三-修改k8s集群各节点-etc-hosts（非必须）" class="headerlink" title="三. 修改k8s集群各节点/etc/hosts（非必须）"></a>三. 修改k8s集群各节点/etc/hosts（非必须）</h2><p>修改所有主机/etc/hosts文件，添加IP/主机名映射，方便通过主机名ssh访问</p><p>1.创建playbook文件（参考 <a href="https://github.com/ronwxy/ops/blob/master/k8s/installation/basic/set_hosts_playbook.yml" target="_blank" rel="noopener">set_hosts_playbook.yml</a>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim set_hosts_playbook.yml</span><br><span class="line">---</span><br><span class="line">- hosts: k8s-all</span><br><span class="line">  remote_user: root</span><br><span class="line">  </span><br><span class="line">  tasks:</span><br><span class="line">    - name: backup /etc/hosts</span><br><span class="line">      shell: mv /etc/hosts /etc/hosts_bak</span><br><span class="line"></span><br><span class="line">    - name: copy local hosts file to remote</span><br><span class="line">      copy: src=/etc/hosts dest=/etc/ owner=root group=root mode=0644</span><br></pre></td></tr></table></figure><p>2.执行ansible-playbook</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook set_hosts_playbook.yml</span><br></pre></td></tr></table></figure><h2 id="四-安装Docker"><a href="#四-安装Docker" class="headerlink" title="四. 安装Docker"></a>四. 安装Docker</h2><p>在所有主机上安装Docker</p><p>1.创建playbook文件（参考 <a href="https://github.com/ronwxy/ops/blob/master/k8s/installation/basic/install_docker_playbook.yml" target="_blank" rel="noopener">install_docker_playbook.yml</a>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">vim install_docker_playbook.yml</span><br><span class="line">- hosts: k8s-all</span><br><span class="line">  remote_user: root</span><br><span class="line">  vars: </span><br><span class="line">     docker_version: 18.09.2</span><br><span class="line"></span><br><span class="line">  tasks: </span><br><span class="line">     - name: install dependencies</span><br><span class="line">       #shell: yum install -y yum-utils device-mapper-persistent-data lvm2 </span><br><span class="line">       yum: name=&#123;&#123;item&#125;&#125; state=present</span><br><span class="line">       with_items:</span><br><span class="line">          - yum-utils</span><br><span class="line">          - device-mapper-persistent-data</span><br><span class="line">          - lvm2</span><br><span class="line"></span><br><span class="line">     - name: config yum repo</span><br><span class="line">       shell: yum-config-manager --add-repo https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">     - name: install docker</span><br><span class="line">       yum: name=docker-ce-&#123;&#123;docker_version&#125;&#125; state=present</span><br><span class="line"></span><br><span class="line">     - name: start docker</span><br><span class="line">       shell: systemctl enable docker &amp;&amp; systemctl start docker</span><br></pre></td></tr></table></figure><p>2.执行ansible-playbook</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook install_docker_playbook.yml</span><br></pre></td></tr></table></figure><h2 id="五-部署k8s-master"><a href="#五-部署k8s-master" class="headerlink" title="五. 部署k8s master"></a>五. 部署k8s master</h2><p>1.开始部署之前，需要做一些初始化处理：关闭防火墙、关闭selinux、禁用swap、配置k8s阿里云yum源等，所有操作放在脚本 <a href="https://github.com/ronwxy/ops/blob/master/k8s/installation/basic/pre-setup.sh" target="_blank" rel="noopener">pre-setup.sh</a> 中，并在2中playbook中通过script模块执行</p><p>2.创建playbook文件 <a href="https://github.com/ronwxy/ops/blob/master/k8s/installation/basic/deploy_master_playbook.yml" target="_blank" rel="noopener">deploy_master_playbook.yml</a>，只针对master节点，安装kubectl，kubeadm，kubelet，以及flannel（将kube-flannel.yml文件里镜像地址的quay.io改为quay-mirror.qiniu.com避免超时，参考 <a href="https://github.com/ronwxy/ops/blob/master/k8s/installation/basic/kube-flannel.yml" target="_blank" rel="noopener">kube-flannel.yml</a>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">vim deploy_master_playbook.yml</span><br><span class="line">- hosts: k8s-master</span><br><span class="line">  remote_user: root：q</span><br><span class="line">  vars:</span><br><span class="line">    kube_version: 1.16.0-0</span><br><span class="line">    k8s_version: v1.16.0</span><br><span class="line">    k8s_master: 192.168.40.111 </span><br><span class="line">  </span><br><span class="line">  tasks:</span><br><span class="line">    - name: prepare env</span><br><span class="line">      script: ./pre-setup.sh      </span><br><span class="line"></span><br><span class="line">    - name: install kubectl,kubeadm,kubelet</span><br><span class="line">      yum: name=&#123;&#123;item&#125;&#125; state=present</span><br><span class="line">      with_items:</span><br><span class="line">        - kubectl-&#123;&#123;kube_version&#125;&#125;</span><br><span class="line">        - kubeadm-&#123;&#123;kube_version&#125;&#125;</span><br><span class="line">        - kubelet-&#123;&#123;kube_version&#125;&#125;</span><br><span class="line">    </span><br><span class="line">    - name: init k8s</span><br><span class="line">      shell: kubeadm init --image-repository registry.aliyuncs.com/google_containers --kubernetes-version &#123;&#123;k8s_version&#125;&#125; --apiserver-advertise-address &#123;&#123;k8s_master&#125;&#125;  --pod-network-cidr=10.244.0.0/16 --token-ttl 0</span><br><span class="line">    </span><br><span class="line">    - name: config kube</span><br><span class="line">      shell: mkdir -p $HOME/.kube &amp;&amp; cp -i /etc/kubernetes/admin.conf $HOME/.kube/config &amp;&amp; chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line">    </span><br><span class="line">    - name: copy flannel yaml file</span><br><span class="line">      copy: src=./kube-flannel.yml dest=/tmp/ owner=root group=root mode=0644 </span><br><span class="line">    </span><br><span class="line">    - name: install flannel</span><br><span class="line">      shell: kubectl apply -f /tmp/kube-flannel.yml</span><br><span class="line"></span><br><span class="line">    - name: get join command</span><br><span class="line">      shell: kubeadm token create --print-join-command </span><br><span class="line">      register: join_command</span><br><span class="line">    - name: show join command</span><br><span class="line">      debug: var=join_command verbosity=0</span><br></pre></td></tr></table></figure><p>3.执行ansible-playbook</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook deploy_master_playbook.yml</span><br></pre></td></tr></table></figure><p>4.上述命令执行完成会输出节点加入k8s集群的命令，如下图。记下该命令，后面部署node时会用到</p><p><img src="http://blog.jboost.cn/assets/join-command.png" alt="图片"></p><h2 id="六-部署k8s-node"><a href="#六-部署k8s-node" class="headerlink" title="六. 部署k8s node"></a>六. 部署k8s node</h2><p>1.同master一样，开始部署之前，需要做一些初始化处理：关闭防火墙、关闭selinux、禁用swap、配置k8s阿里云yum源等，所有操作放在脚本  <a href="https://github.com/ronwxy/ops/blob/master/k8s/installation/basic/pre-setup.sh" target="_blank" rel="noopener">pre-setup.sh</a> 中，并在2中playbook中通过script模块执行</p><p>2.创建playbook文件 <a href="https://github.com/ronwxy/ops/blob/master/k8s/installation/basic/deploy_nodes_playbook.yml" target="_blank" rel="noopener">deploy_nodes_playbook.yml</a>，针对除master外的其它集群节点，安装kubeadm，kubelet，并将节点加入到k8s集群中，使用的是前面部署master时输出的加入集群命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vim deploy_nodes_playbook.yml</span><br><span class="line">- hosts: k8s-nodes</span><br><span class="line">  remote_user: root</span><br><span class="line">  vars:</span><br><span class="line">     kube_version: 1.16.0-0</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: prepare env</span><br><span class="line">      script: ./pre-setup.sh</span><br><span class="line"></span><br><span class="line">    - name: install kubeadm,kubelet</span><br><span class="line">      yum: name=&#123;&#123;item&#125;&#125; state=present</span><br><span class="line">      with_items:</span><br><span class="line">        - kubeadm-&#123;&#123;kube_version&#125;&#125;</span><br><span class="line">        - kubelet-&#123;&#123;kube_version&#125;&#125;</span><br><span class="line">    </span><br><span class="line">    - name: start kubelt</span><br><span class="line">      shell: systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br><span class="line">   </span><br><span class="line">    - name: join cluster</span><br><span class="line">      shell: kubeadm join 192.168.40.111:6443 --token zgx3ov.zlq3jh12atw1zh8r --discovery-token-ca-cert-hash sha256:60b7c62687974ec5803e0b69cfc7ccc2c4a8236e59c8e8b8a67f726358863fa7</span><br></pre></td></tr></table></figure><p>3.执行ansible-playbook</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook deploy_nodes_playbook.yml</span><br></pre></td></tr></table></figure><p>4.稍等片刻，即可在master节点上通过<code>kubectl get nodes</code>看到加入到集群中的节点，并且status为Ready状态，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster ~]# kubectl get nodes</span><br><span class="line">NAME      STATUS   ROLES    AGE     VERSION</span><br><span class="line">kmaster   Ready    master   37m     v1.16.0</span><br><span class="line">knode1    Ready    &lt;none&gt;   7m1s    v1.16.0</span><br><span class="line">knode2    Ready    &lt;none&gt;   7m1s    v1.16.0</span><br><span class="line">knode3    Ready    &lt;none&gt;   4m12s   v1.16.0</span><br></pre></td></tr></table></figure><p>至此，k8s集群基本部署完成。接下来可安装Ingress与Dashboard。</p><h2 id="七-安装Ingress"><a href="#七-安装Ingress" class="headerlink" title="七. 安装Ingress"></a>七. 安装Ingress</h2><p>Ingress为集群内服务提供外网访问，包括基于Nginx与Traefik两个版本，这里使用比较熟悉的Nginx版本。安装Ingress的操作在master节点进行（因为前面在master节点安装并配置了kubectl，也可在其它安装并配置好了kubectl的节点进行）</p><p>1.下载yaml文件（此目录已包含 <a href="https://github.com/ronwxy/ops/tree/master/k8s/installation/ingress/nginx-ingress.yaml" target="_blank" rel="noopener">nginx-ingress.yaml</a>，并修改了镜像地址，可直接进入第3步） </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O nginx-ingress.yaml https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/baremetal/deploy.yaml</span><br></pre></td></tr></table></figure><p>2.将里面的quay.io修改为quay-mirror.qiniu.com，避免镜像拉取超时。同时在nginx-ingress-controller的Deployment上添加hostNetwork为true及nginx-ingress的标签，以使用宿主机网络与控制Ingress部署的节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim nginx-ingress.yaml</span><br><span class="line">:s/quay.io/quay-mirror.qiniu.com/g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vim nginx-ingress.yaml</span><br><span class="line"></span><br><span class="line">    spec:</span><br><span class="line">      hostNetwork: true</span><br><span class="line">      nodeSelector:</span><br><span class="line">        nginx-ingress: "true"</span><br></pre></td></tr></table></figure><p>3.部署Ingress</p><p>首先在knode1节点上打标签nginx-ingress=true，控制Ingress部署到knode1上，保持IP固定。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster k8s-deploy]# kubectl label node knode1 nginx-ingress=true</span><br><span class="line">node/knode1 labeled</span><br></pre></td></tr></table></figure><p>然后完成nginx-ingress的部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f nginx-ingress.yaml</span><br></pre></td></tr></table></figure><p>4.部署完成，稍等片刻等Pod创建完成，可通过如下命令查看ingress相关Pod情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster k8s-deploy]# kubectl get pods -n ingress-nginx -o wide</span><br><span class="line">NAME                                        READY   STATUS      RESTARTS   AGE   IP               NODE     NOMINATED NODE   READINESS GATES</span><br><span class="line">ingress-nginx-admission-create-drpg5        0/1     Completed   0          79m   10.244.2.2       knode1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">ingress-nginx-admission-patch-db2rt         0/1     Completed   1          79m   10.244.3.2       knode3   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">ingress-nginx-controller-575cffb49c-4xm55   1/1     Running     0          79m   192.168.40.112   knode1   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h2 id="八-安装Kubernetes-Dashboard"><a href="#八-安装Kubernetes-Dashboard" class="headerlink" title="八. 安装Kubernetes Dashboard"></a>八. 安装Kubernetes Dashboard</h2><p>1.下载yaml文件（此目录已包含 <a href="https://github.com/ronwxy/ops/tree/master/k8s/installation/dashboard/kubernetes-dashboard.yaml" target="_blank" rel="noopener">kubernetes-dashboard.yaml</a> 文件，可直接进入第3步）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O kubernetes-dashboard.yaml  https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta5/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure><p>2.修改kubernetes-dashboard.yaml</p><p>将Service type改为NodePort，使得可通过IP访问Dashboard。注释掉默认的Secret（默认的secret权限很有限，看不到多少数据）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8443</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30443</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure><p>3.部署Dashboard，并创建绑定cluster-admin角色的ServiceAccount —— admin-user (参考 <a href="https://github.com/ronwxy/ops/tree/master/k8s/installation/dashboard/kubernetes-dashboard-auth.yaml" target="_blank" rel="noopener">auth.yaml</a>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f kubernetes-dashboard.yaml</span><br><span class="line">kubectl apply -f kubernetes-dashboard-auth.yaml</span><br></pre></td></tr></table></figure><p>4.访问Dashboard</p><p>访问 https://集群任意节点IP:30443，打开Dashboard登录页面，执行如下命令获取登录token</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '&#123;print $1&#125;')</span><br></pre></td></tr></table></figure><p>使用token完成登录，如图</p><p><img src="http://blog.jboost.cn/assets/dashboard-login.png" alt="图片"></p><h2 id="九-解决证书无效问题"><a href="#九-解决证书无效问题" class="headerlink" title="九. 解决证书无效问题"></a>九. 解决证书无效问题</h2><p>安装完后，默认的证书可能无效，在Chrome浏览中无法打开Dashboard，可通过重新生成证书解决。</p><p>1.创建自定义证书 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster ~]# cd /etc/kubernetes/pki/</span><br><span class="line"><span class="meta">#</span><span class="bash">生成私钥</span></span><br><span class="line">[root@kmaster pki]# openssl genrsa -out dashboard.key 2048</span><br><span class="line"><span class="meta">#</span><span class="bash">生成证书</span></span><br><span class="line">[root@kmaster pki]# openssl req -new -key dashboard.key -out dashboard.csr -subj "/O=JBST/CN=kubernetes-dashboard"</span><br><span class="line"><span class="meta">#</span><span class="bash">使用集群的CA来签署证书</span></span><br><span class="line">[root@kmaster pki]# openssl x509 -req -in dashboard.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out dashboard.crt -days 3650</span><br><span class="line"><span class="meta">#</span><span class="bash">查看自创证书</span></span><br><span class="line">[root@kmaster pki]# openssl x509 -in dashboard.crt -noout -text</span><br></pre></td></tr></table></figure><p>2.注释 <a href="https://github.com/ronwxy/ops/tree/master/k8s/installation/dashboard/kubernetes-dashboard.yaml" target="_blank" rel="noopener">kubernetes-dashboard.yaml</a> 中默认的Secret，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#---</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#apiVersion: v1</span></span><br><span class="line"><span class="comment">#kind: Secret</span></span><br><span class="line"><span class="comment">#metadata:</span></span><br><span class="line"><span class="comment">#  labels:</span></span><br><span class="line"><span class="comment">#    k8s-app: kubernetes-dashboard</span></span><br><span class="line"><span class="comment">#  name: kubernetes-dashboard-certs</span></span><br><span class="line"><span class="comment">#  namespace: kubernetes-dashboard</span></span><br><span class="line"><span class="comment">#type: Opaque</span></span><br></pre></td></tr></table></figure><p>3.重新部署Dashboard，并通过自定义证书创建新的Secret</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@kmaster k8s-deploy]# kubectl delete -f kubernetes-dashboard.yaml</span><br><span class="line">[root@kmaster k8s-deploy]# kubectl apply -f kubernetes-dashboard.yaml </span><br><span class="line">[root@kmaster k8s-deploy]# kubectl create secret generic kubernetes-dashboard-certs --from-file=dashboard.crt=/etc/kubernetes/pki/dashboard.crt --from-file=dashboard.key=/etc/kubernetes/pki/dashboard.key  -n kubernetes-dashboard</span><br></pre></td></tr></table></figure><h2 id="十-在本地（win10）管理k8s集群"><a href="#十-在本地（win10）管理k8s集群" class="headerlink" title="十. 在本地（win10）管理k8s集群"></a>十. 在本地（win10）管理k8s集群</h2><p>1.下载kubectl windows版本： <a href="https://storage.googleapis.com/kubernetes-release/release/v1.16.0/bin/windows/amd64/kubectl.exe" target="_blank" rel="noopener">https://storage.googleapis.com/kubernetes-release/release/v1.16.0/bin/windows/amd64/kubectl.exe</a></p><p>2.将kubectl.exe文件所在目录加入系统环境变量的Path中</p><p>3.将master节点上 /etc/kubernetes/admin.conf 的内容拷贝到本地用户目录的 .kube/config 文件中，如 <code>C:\Users\Administrator\.kube\config</code></p><p>4.验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;kubectl get nodes</span><br><span class="line">NAME      STATUS   ROLES    AGE     VERSION</span><br><span class="line">kmaster   Ready    master   4d19h   v1.16.0</span><br><span class="line">knode1    Ready    &lt;none&gt;   4d19h   v1.16.0</span><br><span class="line">knode2    Ready    &lt;none&gt;   4d19h   v1.16.0</span><br><span class="line">knode3    Ready    &lt;none&gt;   4d19h   v1.16.0</span><br></pre></td></tr></table></figure><p>本文所涉及的所有配置文件可在这里找到 <a href="https://github.com/ronwxy/ops/tree/master/k8s/installation" target="_blank" rel="noopener">github</a></p><hr><p>相关阅读：</p><ul><li><a href="https://mp.weixin.qq.com/s/8s-OUUsZI0UyyyTgruEO1A" target="_blank" rel="noopener">k8s云集群混搭模式，可能帮你节省50%以上的服务成本</a></li><li><a href="https://mp.weixin.qq.com/s/VuSWn7cWacW6i_MtpvQ5Sw" target="_blank" rel="noopener">k8s云集群混搭模式落地分享</a></li><li><a href="https://mp.weixin.qq.com/s/JIZE1RvN7Yop5dsOHJvStw" target="_blank" rel="noopener">Ansible简明教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible简明教程</title>
      <link href="/ansible.html"/>
      <url>/ansible.html</url>
      
        <content type="html"><![CDATA[<p>Ansible是当下比较流行的自动化运维工具，可通过SSH协议对远程服务器进行集中化的配置管理、应用部署等，常结合Jenkins来实现自动化部署。</p><a id="more"></a><p>除了Ansible，还有像SaltStack、Fabric（曾经管理100多台服务器上的应用时也曾受益于它）、Puppet等自动化工具。相比之下，Ansible最大的优势就是无需在被管理主机端部署任何客户端代理程序，通过SSH通道就可以进行远程命令的执行或配置的下发，足够轻量级，但同时功能非常强大，且各项功能通过模块来实现，具备良好的扩展性。不足之处是Ansible只支持在Linux系统上安装，不支持Windows。</p><p>如果你需要在多于一台服务器上做相同的操作，那么建议你使用Ansible之类的自动化工具，这将极大提高你的操作效率。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>1.找一台主机用于做管理服务器，在其上安装Ansible</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ansible</span><br></pre></td></tr></table></figure><p>Ansible基于Python实现，一般Linux系统都自带Python，所以可以直接使用yum安装或pip安装。</p><p>安装完后，在/etc/ansible/目录下生成三个主要的文件或目录，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@tool-server ~]# ll /etc/ansible/</span><br><span class="line">total 24</span><br><span class="line">-rw-r--r--. 1 root root 19179 Jan 30  2018 ansible.cfg</span><br><span class="line">-rw-r--r--. 1 root root  1136 Apr 17 15:17 hosts</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jan 30  2018 roles</span><br></pre></td></tr></table></figure><ul><li>ansible.cfg： Ansible的配置文件</li><li>hosts：登记被管理的主机</li><li>roles：角色项目定义目录，主要用于代码复用</li></ul><p>2.在/etc/ansible/hosts文件中添加需要被管理的服务器节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@tool-server ~]# vim /etc/ansible/hosts</span><br><span class="line">[k8s]</span><br><span class="line">192.168.40.201</span><br><span class="line">192.168.40.202</span><br><span class="line">192.168.40.205</span><br><span class="line">192.168.40.206</span><br></pre></td></tr></table></figure><p><code>[k8s]</code>表示将下面的服务器节点分到k8s的组中，后面执行命令时可指定针对某个组执行。</p><p>3.生成SSH KEY，并copy到被管理节点上，实现免密SSH访问</p><p>在管理节点执行 <code>ssh-keygen</code> 生成SSH KEY，然后copy到各被管理节点上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.40.201</span><br></pre></td></tr></table></figure><p>上面命令将<code>~/.ssh/id_rsa.pub</code>文件内容添加到被管理节点的/root/.ssh/authorized_keys文件中，实现管理节点到被管理节点的免密SSH访问。</p><p>4.调试Ansible</p><p>针对k8s服务器组执行ping，验证Ansible到各被管理节点的连通性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@tool-server ~]# ansible k8s -m ping</span><br><span class="line">192.168.40.201 | SUCCESS =&gt; &#123;</span><br><span class="line">    "changed": false,</span><br><span class="line">    "ping": "pong"</span><br><span class="line">&#125;</span><br><span class="line">192.168.40.205 | SUCCESS =&gt; &#123;</span><br><span class="line">    "changed": false,</span><br><span class="line">    "ping": "pong"</span><br><span class="line">&#125;</span><br><span class="line">192.168.40.202 | SUCCESS =&gt; &#123;</span><br><span class="line">    "changed": false,</span><br><span class="line">    "ping": "pong"</span><br><span class="line">&#125;</span><br><span class="line">192.168.40.206 | SUCCESS =&gt; &#123;</span><br><span class="line">    "changed": false,</span><br><span class="line">    "ping": "pong"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ansible只需要在管理主机上安装，然后打通管理主机到各被管理主机的SSH免密访问即可进行集中化的管理控制，不需在被管理主机安装任何代理程序。</p><h2 id="Ansible命令"><a href="#Ansible命令" class="headerlink" title="Ansible命令"></a>Ansible命令</h2><p>Ansible的命令格式为， <code>ansible 主机群组名 -m 命令模块名 -a &quot;批量执行的操作&quot;</code></p><p>其中-m不是必须的，默认为command模块，-a也不是必须的，表示命令模块的参数，比如前面的ping模块就没有参数。</p><p>可以使用 <code>ansible-doc -l</code> 列出所有可用的命令模块， <code>ansible-doc -s 模块名</code> 查看指定模块的参数信息</p><p>常用命令模块</p><p>1.command<br>command是Ansible的默认模块，不指定-m参数时默认使用command。command可以运行远程主机权限范围内的所有shell命令，但不支持管道操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看k8s分组主机内存使用情况</span></span><br><span class="line">ansible k8s -m command -a "free -g"</span><br></pre></td></tr></table></figure><p>2.shell<br>shell基本与command相同，但shell支持管道操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">shell支持管道操作 |grep Mem</span></span><br><span class="line">ansible k8s -m shell -a "free -g|grep Mem"</span><br></pre></td></tr></table></figure><p>3.script<br>script就是在远程主机上执行管理端存储的shell脚本文件，相当于scp+shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /root/echo.sh为管理端本地shell脚本</span></span><br><span class="line">ansible k8s -m script -a "/root/echo.sh"</span><br></pre></td></tr></table></figure><p>4.copy<br>copy实现管理端到远程主机的文件拷贝，相当于scp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">拷贝本地echo.sh文件到k8s组中远程主机的/tmp目录下，所属用户、组为 root ，权限为 0755</span></span><br><span class="line">ansible k8s -m copy -a "src=/root/echo.sh dest=/tmp/ owner=root group=root mode=0755"</span><br></pre></td></tr></table></figure><p>5.yum<br>软件包安装或删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible k8s -m yum -a "name=wget state=latest"</span><br></pre></td></tr></table></figure><p>其中state有如下取值：</p><ul><li>针对安装，可取值“present，installed，latest”，present，installed即普通安装，两者无区别，latest是使用yum mirror上最新的版本进行安装</li><li>针对删除，可取值“absent，removed”，两者无差别</li></ul><p>6.service<br>对远程主机的服务进行管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible k8s -m service -a "name=nginx state=stoped"</span><br></pre></td></tr></table></figure><p>state可取值“started/stopped/restarted/reloaded”。</p><p>7.get_url<br>在远程主机上下载指定URL到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible k8s -m get_url -a "url=http://www.baidu.com dest=/tmp/index.html mode=0440 force=yes"</span><br></pre></td></tr></table></figure><p>8.setup<br>获取远程主机的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible k8s -m setup</span><br></pre></td></tr></table></figure><p>9.file<br>管理远程主机的文件或目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible k8s -m file -a "dest=/opt/test state=touch"</span><br></pre></td></tr></table></figure><p>state可取值</p><ul><li>directory：创建目录</li><li>file：如果文件不存在，则创建</li><li>link：创建symbolic link</li><li>absent：删除文件或目录</li><li>touch： 创建一个不存在的空文件</li></ul><p>10.cron<br>管理远程主机的crontab定时任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible k8s -m cron -a "name='backup servcie' minute=*/5 job='/usr/sbin/ntpdate  time.nist.gov &gt;/dev/null 2&gt;&amp;1'"</span><br></pre></td></tr></table></figure><p>支持的参数</p><ul><li>state： 取值present表示创建定时任务，absent表示删除定时任务</li><li>disabled： yes表示注释掉定时任务，no表示接触注释</li></ul><h2 id="Ansible-playbook"><a href="#Ansible-playbook" class="headerlink" title="Ansible playbook"></a>Ansible playbook</h2><p>Ansible的playbook由一个或多个play组成，play的功能就是为归为一组的主机编排要执行的一系列task，其中每一个task就是调用Ansible的一个命令模块。</p><p>playbook的核心元素包括：</p><ul><li>hosts：执行任务的远程主机组或列表</li><li>tasks：要执行的任务列表</li><li>variables：内置变量或自定义的变量</li><li>templates：使用模板语法的文件，通常为配置文件</li><li>handlers：和notify结合使用，由特定条件触发，一般用于配置文件变更触发服务重启</li><li>tags：标签，可在运行时通过标签指定运行playbook中的部分任务</li><li>roles：</li></ul><p>playbook文件遵循yaml的语法格式，运行命令的格式为 <code>ansible-playbook &lt;filename.yml&gt; ... [options]</code>， 常用options包括</p><ul><li>–syntax        检查playbook文件语法是否正确</li><li>–check 或 -C   只检测可能会发生的改变，但不真正执行操作</li><li>–list-hosts    列出运行任务的主机</li><li>–list-tags     列出playbook文件中定义所有的tags</li><li>–list-tasks    列出playbook文件中定义的所有任务集</li><li>–limit         只针对主机列表中的某个主机或者某个组执行</li><li>-f              指定并发数，默认为5个</li><li>-t              指定某个或多个tags运行（前提playbook中有定义tags）</li><li>-v              显示过程 -vv -vvv更详细</li></ul><p>下面以批量安装Nginx为例，尽可能介绍playbook各核心元素的用法。</p><p>定义palybook yaml文件nginx_playbook.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.201</span><span class="string">,192.168.40.205</span> <span class="comment"># 主机列表，也可以是/etc/ansible/hosts中定义的主机分组名</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span> <span class="comment"># 远程用户</span></span><br><span class="line">  <span class="attr">vars:</span>             <span class="comment"># 自定义变量</span></span><br><span class="line">     <span class="attr">version:</span> <span class="number">1.16</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">vars_files:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./templates/nginx_locations_vars.yml</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">dependencies</span>          <span class="comment"># 定义任务的名称</span></span><br><span class="line">       <span class="attr">yum:</span> <span class="string">name=&#123;&#123;item&#125;&#125;</span> <span class="string">state=installed</span>  <span class="comment"># 调用模块，具体要做的事情，这里使用with_items迭代多个yum任务安装必要的依赖</span></span><br><span class="line">       <span class="attr">with_items:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">gcc</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">gcc-c++</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">pcre</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">pcre-devel</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">zlib</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">zlib-devel</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">openssl</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">openssl-devel</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">download</span> <span class="string">nginx</span>                <span class="comment"># 通过get_url模块下载nginx</span></span><br><span class="line">       <span class="attr">get_url:</span> <span class="string">url=http://nginx.org/download/nginx-&#123;&#123;version&#125;&#125;.tar.gz</span> <span class="string">dest=/tmp/</span> <span class="string">mode=0755</span> <span class="string">force=no</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">unarchive</span>                     <span class="comment"># 通过unarchive模块解压nginx</span></span><br><span class="line">       <span class="attr">unarchive:</span> <span class="string">src=/tmp/nginx-&#123;&#123;version&#125;&#125;.tar.gz</span> <span class="string">dest=/tmp/</span> <span class="string">mode=0755</span> <span class="string">copy=no</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">configure,make</span> <span class="string">and</span> <span class="string">install</span>    <span class="comment"># 通过shell模块执行shell命令编译安装</span></span><br><span class="line">       <span class="attr">shell:</span> <span class="string">cd</span> <span class="string">/tmp/nginx-&#123;&#123;version&#125;&#125;</span> <span class="string">&amp;&amp;</span> <span class="string">./configure</span> <span class="string">--prefix=/usr/local/nginx</span> <span class="string">&amp;&amp;</span> <span class="string">make</span> <span class="string">&amp;&amp;</span> <span class="string">make</span> <span class="string">install</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">nginx</span>                   <span class="comment"># 通过shell模块执行shell命令启动nginx</span></span><br><span class="line">       <span class="attr">shell:</span> <span class="string">/usr/local/nginx/sbin/nginx</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">update</span> <span class="string">config</span>                 <span class="comment"># 通过template模块动态生成配置文件下发到远程主机目录</span></span><br><span class="line">       <span class="attr">template:</span> <span class="string">src=nginx.conf.j2</span> <span class="string">dest=/usr/local/nginx/conf/nginx.conf</span></span><br><span class="line">       <span class="attr">notify:</span> <span class="string">reload</span> <span class="string">nginx</span>                <span class="comment"># 在结束时触发一个操作，具体操作通过handlers来定义</span></span><br><span class="line">       <span class="attr">tags:</span> <span class="string">reload</span>                        <span class="comment"># 对任务定义一个标签，运行时通过-t执行带指定标签的任务</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">reload</span> <span class="string">nginx</span>                  <span class="comment"># 与notify定义的内容对应</span></span><br><span class="line">       <span class="attr">shell:</span> <span class="string">/usr/local/nginx/sbin/nginx</span> <span class="string">-s</span> <span class="string">reload</span></span><br></pre></td></tr></table></figure><h3 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h3><p>在上面的示例中使用vars定义了变量version，在tasks中通过进行引用。Ansible支持如下几种定义变量的方式</p><p>1.在playbook文件中定义<br>前面示例已经说明</p><p>2.命令行指定<br>在执行playbook时通过-e指定，如<code>ansible-playbook -e &quot;version=1.17.9&quot; nginx_playbook.yml</code>， 这里指定的变量将覆盖playbook中定义的同名变量的值</p><p>3.hosts文件中定义变量<br>在/etc/ansible/hosts文件中也可以定义针对单个主机或主机组的变量，如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">192.168.40.201 version=1.17.9 # 定义单个主机的变量</span><br><span class="line">192.168.40.205 </span><br><span class="line">[nginx:vars]  # 定义整个组的统一变量</span><br><span class="line">version=1.16.1</span><br></pre></td></tr></table></figure><p>4.在独立的yaml文件中定义变量<br>专门定义一个yaml变量文件，然后在playbook文件中通过var_files引用，如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 定义存放变量的文件</span></span><br><span class="line">[root@ansible ]# cat var.yml</span><br><span class="line">version: 1.16.1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编写playbook</span></span><br><span class="line">[root@ansible ]# cat nginx_playbook.yml</span><br><span class="line">---</span><br><span class="line">- hosts: nginx</span><br><span class="line">  remote_user: root</span><br><span class="line">  vars_files:     # 引用变量文件</span><br><span class="line">    - ./var.yml   # 指定变量文件的path（这里可以是绝对路径，也可以是相对路径）</span><br></pre></td></tr></table></figure><p>5.使用setup模块获取到的变量<br>前面介绍setup模块可获取远程主机的信息，可在playbook中直接引用setup模块获取到的属性，比如系统版本： ansible_distribution_major_version</p><h3 id="2-模板"><a href="#2-模板" class="headerlink" title="2. 模板"></a>2. 模板</h3><p>playbook模板为我们提供了动态的配置服务，使用jinja2语言，支持多种条件判断、循环、逻辑运算、比较操作等。应用场景就是定义一个模板配置文件，然后在执行的时候动态生成最终的配置文件下发到远程主机。一般将模板文件放在playbook文件同级的templates目录下，这样在playbook文件中可以直接引用，否则需要通过绝对路径指定，模板文件后缀名一般为 .j2。</p><p>本例中，我们将nginx.conf配置文件作为模板文件，添加需要动态配置的内容，并定义一个变量文件，通过vars_files引入：<code>vars_files: ./templates/nginx_locations_vars.yml</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 模板文件</span></span><br><span class="line">[root@tool-server nginx-deploy]# vim templates/nginx.conf.j2</span><br><span class="line"> ...</span><br><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        # 这里的内容动态生成</span><br><span class="line">        &#123;% for location in nginx_locations %&#125;</span><br><span class="line">        location &#123;&#123;location.path&#125;&#125; &#123;</span><br><span class="line">           proxy_pass &#123;&#123;location.proxy&#125;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"> ...</span><br><span class="line"><span class="meta">#</span><span class="bash"> 独立的自定义变量文件，用于填充模板文件中的变量</span></span><br><span class="line">[root@tool-server nginx-deploy]# vim templates/nginx_locations_vars.yml</span><br><span class="line"></span><br><span class="line">nginx_locations:</span><br><span class="line">  - &#123;"path": "/cns", "proxy": "http://192.168.40.202/cns"&#125;</span><br><span class="line">  - &#123;"path": "/admin", "proxy": "http://192.168.40.202/admin"&#125;</span><br></pre></td></tr></table></figure><h3 id="3-handlers"><a href="#3-handlers" class="headerlink" title="3. handlers"></a>3. handlers</h3><p>handlers和notify结合使用，由特定条件触发，一般用于配置文件变更触发服务重启。在本例中我们在配置文件变更时，通过notify定义了一个“reload nginx”的操作，然后在handlers部分定义“reload nginx”操作——通过shell模块调用nginx的reload来重新加载配置。</p><h3 id="4-标签"><a href="#4-标签" class="headerlink" title="4. 标签"></a>4. 标签</h3><p>playbook文件中，如果只想执行某一个或几个任务，则可以给任务打标签，在运行的时候通过 -t 选择带指定标签的任务执行，也可以通过 –skip-tags 选择不带指定标签的任务执行。比如在本例中，我们在“update config”的task上加了“reload”的标签，如果后面再修改配置，我们只需要执行“update config”的task并触发reload nginx就行了，可以这么执行playbook</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@tool-server nginx-deploy]# ansible-playbook -t reload nginx_playbook.yml</span><br></pre></td></tr></table></figure><h3 id="5-when"><a href="#5-when" class="headerlink" title="5. when"></a>5. when</h3><p>可以在task上添加when表示当某个条件达到了该任务才执行，如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">nginx</span></span><br><span class="line">     <span class="attr">yum:</span> <span class="string">name=nginx</span> <span class="string">state=installed</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">update</span> <span class="string">config</span> <span class="string">for</span> <span class="string">system6</span></span><br><span class="line">     <span class="attr">template:</span> <span class="string">src=nginx.conf.j2</span> <span class="string">dest=/usr/local/nginx/conf/nginx.conf</span></span><br><span class="line">     <span class="attr">when:</span> <span class="string">ansible_distribution_major_version</span> <span class="string">==</span> <span class="string">"6"</span>   <span class="comment"># 判断系统版本，为6才执行上面的template配置的文件</span></span><br></pre></td></tr></table></figure><h3 id="6-roles"><a href="#6-roles" class="headerlink" title="6. roles"></a>6. roles</h3><p>roles就是将变量、文件、任务、模板及处理器放置在单独的目录中，并可以在playbook中include的一种机制，一般用于主机构建服务的场景中，但也可以是用于构建守护进程等场景。</p><p>roles的目录结构，默认的roles目录为/etc/ansible/roles</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">roles:</span>          <span class="comment"># 所有的角色项目必须放在roles目录下</span></span><br><span class="line">  <span class="attr">project:</span>      <span class="comment"># 具体的角色项目名称，比如nginx、tomcat</span></span><br><span class="line">    <span class="string">files：</span>     <span class="comment"># 用来存放由copy或script模块调用的文件</span></span><br><span class="line">    <span class="string">templates：</span> <span class="comment"># 用来存放jinjia2模板，template模块会自动在此目录中寻找jinjia2模板文件</span></span><br><span class="line">    <span class="string">tasks：</span>     <span class="comment"># 此目录应当包含一个main.yml文件，用于定义此角色的任务列表，此文件可以使用include包含其它的位于此目录的task文件。</span></span><br><span class="line">      <span class="string">main.yml</span></span><br><span class="line">    <span class="string">handlers：</span>  <span class="comment"># 此目录应当包含一个main.yml文件，用于定义此角色中触发条件时执行的动作</span></span><br><span class="line">      <span class="string">main.yml</span></span><br><span class="line">    <span class="string">vars：</span>      <span class="comment"># 此目录应当包含一个main.yml文件，用于定义此角色用到的变量</span></span><br><span class="line">      <span class="string">main.yml</span></span><br><span class="line">    <span class="string">defaults：</span>  <span class="comment"># 此目录应当包含一个main.yml文件，用于为当前角色设定默认变量</span></span><br><span class="line">      <span class="string">main.yml</span></span><br><span class="line">    <span class="string">meta：</span>      <span class="comment"># 此目录应当包含一个main.yml文件，用于定义此角色的特殊设定及其依赖关系</span></span><br><span class="line">      <span class="string">main.yml</span></span><br></pre></td></tr></table></figure><p>我们将上面的例子通过roles改造一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@tool-server ~]# cd /etc/ansible/roles/</span><br><span class="line">[root@tool-server roles]# mkdir -p nginx/&#123;tasks,vars,templates,handlers&#125;</span><br><span class="line">...#创建各目录的mian.yml文件，并将对应的内容加入文件中</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">最终目录结构</span></span><br><span class="line">[root@tool-server roles]# tree  .</span><br><span class="line">.</span><br><span class="line">└── nginx</span><br><span class="line">    ├── handlers</span><br><span class="line">    │   └── main.yml # 上例handlers部分的内容，直接 -name开头，不需要再加 `handlers：`</span><br><span class="line">    ├── tasks</span><br><span class="line">    │   └── main.yml # tasks部分内容，直接-name开头，不需要加tasks，可以将各个task拆分为多个文件，然后在main.yml中通过 `- include: install.yml` 形式的列表引入</span><br><span class="line">    ├── templates</span><br><span class="line">    │   └── main.yml # templates/nginx.conf.j2的内容</span><br><span class="line">    └── vars</span><br><span class="line">        └── main.yml # templates/nginx_locations_vars.yml的内容</span><br><span class="line"></span><br><span class="line">5 directories, 4 files</span><br></pre></td></tr></table></figure><p>最后，在playbook中通过roles引入，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible roles]# vim nginx_playbook.yml</span><br><span class="line">---</span><br><span class="line">- hosts: nginx</span><br><span class="line">  remote_user: root</span><br><span class="line">  roles:</span><br><span class="line">    - role: nginx # 指定角色名称</span><br></pre></td></tr></table></figure><p>roles将playbook的各个部分进行拆分组织，主要用于代码复用度较高的场景。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Ansible是功能强大但又很轻量级的自动化运维工具，基于SSH协议批量对远程主机进行管理，不仅可用于日常的服务维护，也可与Jenkins等CI/CD工具结合实现自动化部署。如果你需要在多于一台服务器上做重复又稍显复杂的操作，那么建议你使用Ansible，这将极大提高你的操作效率，并且所有操作文档化，更易维护与迁移。</p><hr><p>如果你对Java、Spring Boot、Spring Cloud、Docker，技术管理心得等感兴趣<br>欢迎关注作者微信公众号：空山新雨的技术空间，一起学习成长  </p><p><img src="/assets/qrcode-05.jpg" alt="微信公众号"></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker笔记（十三）：容器日志采集实践</title>
      <link href="/docker-13.html"/>
      <url>/docker-13.html</url>
      
        <content type="html"><![CDATA[<p>日志是服务运行过程中的一个关键环节，借助日志，我们可以排查定位问题，也可以借助集中化的日志管理平台（如ELK）来做一些必要的数据统计分析。在Docker环境中，日志的采集比传统环境更为复杂，因此了解Docker日志的管理机制，及基于此熟悉日志采集的最佳实践对于开发运维人员来说也是避不开的一个知识点。那就开始吧。</p><a id="more"></a><h2 id="Docker容器的日志管理机制"><a href="#Docker容器的日志管理机制" class="headerlink" title="Docker容器的日志管理机制"></a>Docker容器的日志管理机制</h2><h3 id="1-Docker-Daemon日志"><a href="#1-Docker-Daemon日志" class="headerlink" title="1. Docker Daemon日志"></a>1. Docker Daemon日志</h3><p>Docker Daemon在Linux中本身作为systemd service启动，因此可以通过 <code>sudo journalctl -u docker</code> 命令来查看Daemon本身的日志。</p><h3 id="2-Docker容器日志"><a href="#2-Docker容器日志" class="headerlink" title="2. Docker容器日志"></a>2. Docker容器日志</h3><p>通过 <code>docker logs container_id|container_name</code> 可以查看Docker容器的输出日志，但这里的日志只包含容器的标准输出（STDOUT）与标准错误输出（STDERR），适用于一些将日志输出到STDOUT的容器,比如Nginx，查看nginx的dockerfile可发现其是将日志文件链接到了STDOUT与STDERR来实现的，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RUN ln -sf /dev/stdout /var/log/nginx/access.log</span><br><span class="line">&amp;&amp; ln -sf /dev/stderr /var/log/nginx/error.log</span><br></pre></td></tr></table></figure><p>但如果容器内部应用日志是输出到日志文件（比如Spring Boot项目或Tomcat容器，一般将日志输出到日志文件中），则无法通过 <code>docker logs</code> 命令查看。</p><blockquote><p><code>docker logs</code> 会显示历史日志，日志太多的话要等半天才能看到最新日志，同时也对Docker Daemon造成一定的压力，可使用 <code>docker logs --tail 200 container_id</code>来查看最新的N条或使用<code>docker logs -f container_id</code>（类似于tail -f）</p></blockquote><h3 id="3-Docker日志处理机制"><a href="#3-Docker日志处理机制" class="headerlink" title="3. Docker日志处理机制"></a>3. Docker日志处理机制</h3><p>当我们启动一个容器时，其实是作为Docker Daemon的一个子进程运行，Docker Daemon可以拿到容器里进程的标准输出与标准错误输出，然后通过Docker的Log Driver模块来处理。如下图所示</p><p><img src="/assets/docker-log-driver.png" alt="docker-log-driver.png"></p><p>目前支持的Log Drvier包括：</p><ul><li>none：容器没有日志，<code>docker logs</code>不输出任何内容</li><li>local：日志以自定义格式存储</li><li>json-file：日志以json格式存储，默认的Log Driver</li><li>syslog：将日志写入syslog。syslog守护程序必须在主机上运行</li><li>journald：将日志写入journald。journald守护程序必须在主机上运行</li><li>gelf：将日志写入Graylog Extended Log Format端点，如Graylog或Logstash</li><li>fluentd：将日志写入fluentd。fluentd守护程序必须在主机上运行</li><li>awslogs：将日志写入Amazon CloudWatch Logs</li><li>splunk：通过HTTP Event Collector将日志写入splunk</li><li>etwlogs：将日志作为ETW（Event Tracing for Windows）事件写入。只在Windows平台可用</li><li>gcplogs：将日志写入Google Cloud Platform Logging</li><li>logentries：将日志写入Rapid7 Logentries</li></ul><p>使用Docker-CE版本时，<strong><code>docker logs</code>命令仅适用于 local， json-file， journald 三种Log Driver</strong>。</p><p>可通过<code>docker info</code>来查看Docker Daemon（针对所有容器）或<code>docker inspect</code>来查看单个容器所使用的Log Driver</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Docker Daemon</span></span><br><span class="line">[devuser@test-server-1 ~]$ docker  info |grep  "Logging Driver"</span><br><span class="line">Logging Driver: json-file</span><br><span class="line"><span class="meta">#</span><span class="bash"> 单个Docker 容器</span></span><br><span class="line">[devuser@test-server-1 ~]$ docker inspect  -f '&#123;&#123;.HostConfig.LogConfig.Type&#125;&#125;'  76f82aa32468</span><br><span class="line">json-file</span><br></pre></td></tr></table></figure><p>修改Docker Daemon使用的Log Driver可通过修改配置文件 /etc/docker/daemon.json 进行，重启Docker后该配置对该Docker Daemon管理的所有容器生效， 如</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"log-driver"</span>: <span class="string">"local"</span>,</span><br><span class="line">    <span class="attr">"log-opts"</span>: &#123;</span><br><span class="line">        <span class="attr">"max-size"</span>: <span class="string">"10m"</span>,</span><br><span class="line">        <span class="attr">"max-file"</span>: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置单个容器的Log Driver则可以在容器运行时通过参数指定，如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@tool-server ~]# docker run -d --name nginx -p 80:80 --log-driver local  --log-opt max-size=10m  --log-opt max-file=3  --restart=always nginx</span><br><span class="line">63155291e724276d6154a26958b0e523a003958b1cdf7df9f1f0903bfc989b99</span><br><span class="line"></span><br><span class="line">[root@tool-server ~]# tail -f /var/lib/docker/containers/63155291e724276d6154a26958b0e523a003958b1cdf7df9f1f0903bfc989b99/local-logs/container.log</span><br><span class="line">stdoutҭʡ󹾖ā192.168.40.160 - - [02/Apr/2020:06:05:56 +0000] "GET / HTTP/1.1" 200 612 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36" "-"ܻ </span><br><span class="line">stdout򪸶¡󹾖㿱92.168.40.160 - - [02/Apr/2020:06:05:56 +0000] "GET /favicon.ico HTTP/1.1" 404 555 "http://192.168.40.110/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36" "-"</span><br></pre></td></tr></table></figure><p>以下对常用的几种Log Driver进行详细介绍</p><ol><li>local</li></ol><p>local Log Driver会将容器的STDOUT/STDERR输出写到宿主机的磁盘。前面示例了将Docker Daemon或单个容器的Log Driver设置为local，可以看到local的日志保存路径为 <code>/var/lib/docker/containers/{container_id}/local-logs/container.log</code></p><p>local Log Driver支持的配置属性如下</p><table><thead><tr><th align="left">配置属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">max-size</td><td align="left">单个日志文件的最大大小，默认为20m（单位可为k,m,g）</td></tr><tr><td align="left">max-file</td><td align="left">最多存在多少个日志文件，文件数超过该值则会删除最旧的文件，默认为5</td></tr><tr><td align="left">compress</td><td align="left">是否对切割文件进行压缩，默认为true</td></tr></tbody></table><ol start="2"><li>json-file</li></ol><p>json-file Log Driver是Docker默认启用的Driver，将容器的STDOUT/STDERR输出以json的格式写到宿主机的磁盘，日志文件路径为 <code>/var/lib/docker/containers/{container_id}/{container_id}-json.log</code></p><p>格式如下，包含三个字段： log, stream, time。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@tool-server ~]# tail -f /var/lib/docker/containers/2cef9daeac7b009c636ed2b1a7ad8fe3342bc0d5dcd55e69d7a45a586d7abc47/2cef9daeac7b009c636ed2b1a7ad8fe3342bc0d5dcd55e69d7a45a586d7abc47-json.log</span><br><span class="line">&#123;"log":"2020-03-31T10:27:30.639+0000 I  SHARDING [conn4] Marking collection yapi.project as collection version: \u003cunsharded\u003e\n","stream":"stdout","time":"2020-03-31T10:27:30.639749587Z"&#125;</span><br><span class="line">&#123;"log":"2020-03-31T10:27:30.756+0000 I  SHARDING [conn2] Marking collection yapi.log as collection version: \u003cunsharded\u003e\n","stream":"stdout","time":"2020-03-31T10:27:30.756744876Z"&#125;</span><br></pre></td></tr></table></figure><p>json-file将日志的每一行封装到一个json串中，因此像Java的异常栈日志将会被拆分为多条json，在导入到ELK日志管理系统中时需要做合并处理。</p><p>json-file Log Driver支持的配置属性如下</p><table><thead><tr><th align="left">配置属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">max-size</td><td align="left">单个日志文件的最大大小，单位可为k,m,g。默认-1，表示无限制</td></tr><tr><td align="left">max-file</td><td align="left">最多存在多少个日志文件，文件数超过该值则会删除最旧的文件，默认为1</td></tr><tr><td align="left">labels</td><td align="left">在启动Docker容器时以逗号分隔的与日志相关的标签列表</td></tr><tr><td align="left">env</td><td align="left">在启动Docker容器时以逗号分隔的与日志相关的环境变量列表</td></tr><tr><td align="left">env-regex</td><td align="left">类似于env，用于匹配与日志相关的环境变量的正则表达式</td></tr><tr><td align="left">compress</td><td align="left">是否对切割文件进行压缩，默认为disabled</td></tr></tbody></table><ol start="3"><li>journald</li></ol><p>journald Log Driver将容器的STDOUT/STDERR发送到systemd journal，与local，json-file一样可以使用 <code>docker logs</code> 来查看。也可以使用 journalctl命令来查看，如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@tool-server ~]# docker run -d --name nginx -p 80:80 --log-driver journald  --log-opt labels=profile  --log-opt env=ONLINE --label profile=dev --env "ONLINE=false"  --restart=always nginx</span><br><span class="line">2011dc967d7e068b14d974bdc083d072fd09498a7de74984d482897d1b5c4200</span><br><span class="line"></span><br><span class="line">[root@tool-server ~]# journalctl -f CONTAINER_NAME=nginx</span><br><span class="line">-- Logs begin at Tue 2020-03-31 18:24:36 CST. --</span><br><span class="line"></span><br><span class="line">Apr 02 18:20:05 tool-server 2011dc967d7e[3655]: 192.168.40.160 - - [02/Apr/2020:10:20:05 +0000] "GET / HTTP/1.1" 304 0 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36" "-"</span><br></pre></td></tr></table></figure><p>journalctl的命令形式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">journalctl CONTAINER_NAME=nginx # 输出指定容器的日志</span><br><span class="line">journalctl -b CONTAINER_NAME=nginx # 输出从上次启动以来的所有日志</span><br><span class="line">journalctl -o json CONTAINER_NAME=nginx # 以json格式显示日志，包含了label，env中指定的属性值</span><br><span class="line">journalctl -f CONTAINER_NAME=nginx  # 类似于tail -f</span><br></pre></td></tr></table></figure><p>journald Log Driver支持的配置属性如下</p><table><thead><tr><th align="left">配置属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">tag</td><td align="left">指定要在日志中设置CONTAINER_TAG与SYSLOG_IDENTIFIER值的模板</td></tr><tr><td align="left">labels</td><td align="left">定义一个标签列表，可在后面通过 –label 设置标签的值，该标签值会包含在日志体中</td></tr><tr><td align="left">env</td><td align="left">定义一个环境变量列表，可在后面通过 –env 指定环境变量的值，并且值会包含在日志体重</td></tr><tr><td align="left">env-regex</td><td align="left">与env类似，用于匹配与日志相关的环境变量的正则表达式</td></tr></tbody></table><p>下图是使用 <code>journalctl -o json CONTAINER_NAME=nginx</code> 命令输出的完整json格式日志，其中包含了前面设置的profile标签与ONLINE环境变量。<br><img src="/assets/docker-journald-log.png" alt="docker-journald-log"></p><p>除此之外，journald日志体中还会加上下面的数据</p><ul><li>CONTAINER_ID： 容器ID，12位</li><li>CONTAINER_ID_FULL：完整的容器ID，64位</li><li>CONTAINER_NAME：容器名称</li><li>CONTAINER_TAG，SYSLOG_IDENTIFIER：容器的tag</li></ul><p>具体从上图也可以看出。</p><ol start="4"><li>syslog</li></ol><p>syslog Log Driver将日志发送到syslog的服务器，在Linux中，一般使用rsyslog服务。</p><p>修改rsyslog配置，打开udp或tcp监听</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@tool-server ~]# vim /etc/rsyslog.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> Provides UDP syslog reception</span></span><br><span class="line"><span class="meta">$</span><span class="bash">ModLoad imudp</span></span><br><span class="line"><span class="meta">$</span><span class="bash">UDPServerRun 514</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Provides TCP syslog reception</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$ModLoad</span> imtcp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$InputTCPServerRun</span> 514</span></span><br></pre></td></tr></table></figure><p>重启rsyslog</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@tool-server ~]# systemctl restart  rsyslog</span><br><span class="line"></span><br><span class="line">[root@tool-server ~]# netstat -ano|grep 514</span><br><span class="line">udp        0      0 0.0.0.0:514             0.0.0.0:*                           off (0.00/0/0)</span><br><span class="line">udp6       0      0 :::514                  :::*                                off (0.00/0/0)</span><br></pre></td></tr></table></figure><p>以syslog Log Driver启动nginx容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@tool-server ~]# docker run -d --name nginx -p 80:80 --log-driver syslog --log-opt syslog-address=udp://127.0.0.1:514  --restart=always nginx</span><br><span class="line">989db94a01c36b7ea767bcb8db8ccc64bd558291ef7bcb364efa1352c78b8878</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看syslog日志</span></span><br><span class="line">[root@tool-server ~]# tail -f /var/log/messages</span><br><span class="line">Apr  2 18:58:06 localhost 989db94a01c3[3655]: 192.168.40.160 - - [02/Apr/2020:10:58:06 +0000] "GET / HTTP/1.1" 304 0 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36" "-"</span><br></pre></td></tr></table></figure><h2 id="容器日志采集实践"><a href="#容器日志采集实践" class="headerlink" title="容器日志采集实践"></a>容器日志采集实践</h2><ol><li><p>对于使用STDOUT/STDERR输出日志的容器，比如nginx，可通过默认的json-file，从前文提到的目录下通过filebeat或logstash进行监听采集</p></li><li><p>对于使用日志文件记录的容器，比如tomcat，可通过目录挂载的方式将容器日志目录挂载到宿主机目录，然后监听宿主机目录进行日志采集，比如启动时指定参数 <code>-v /data/tomcat/logs:/usr/local/tomcat/logs</code>。但这种方式如果同一应用的容器在一个服务器节点上启动多个时，会造成日志文件名相同产生冲突，对于这种情况，如果使用的是logback日志框架，之前的文章<a href="https://mp.weixin.qq.com/s/ql22PC_PJQ-0SuJyXpf4TQ" target="_blank" rel="noopener">自定义logback日志文件的名称</a> 提供了一种方案</p></li><li><p>如果既有标准输出又有日志文件输出，可考虑第三方日志采集框架，比如阿里巴巴开源的log-pilot</p></li><li><p>如果是Serverless环境，即没有具体的物理机或虚拟机，通过云容器服务部署的情况，则可以通过挂载云盘的方式，将容器日志目录挂载到云盘目录下，通过监听云盘目录进行日志采集</p></li></ol><p>出于篇幅与时间关系，这里只列出几种不同场景的日志采集方案，1,2场景比较好理解，对于4一般云平台都有相关的文档可查阅，场景3后续可再整理一篇实操文来补充说明。</p><hr><p>作者：空山新雨<br>近期作者写了几十篇技术博客，内容包括Java、Spring Boot、Spring Cloud、Docker，技术管理心得等<br>欢迎关注作者微信公众号：空山新雨的技术空间，一起学习成长  </p><p><img src="/assets/qrcode-05.jpg" alt="微信公众号"></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> log-pilot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux开机自启动配置</title>
      <link href="/linux-autoboot.html"/>
      <url>/linux-autoboot.html</url>
      
        <content type="html"><![CDATA[<p>很多时候，我们需要将一些服务在Linux系统启动时即自动运行，省得每次都要去手动启动一遍，如Redis， MySQL， Nginx等。本文对CentOS与Ubuntu下开机自启动的配置方法进行整理，供参考查阅。</p><a id="more"></a><h2 id="CentOS7的开机自启动配置"><a href="#CentOS7的开机自启动配置" class="headerlink" title="CentOS7的开机自启动配置"></a>CentOS7的开机自启动配置</h2><h3 id="一-rc-local方式"><a href="#一-rc-local方式" class="headerlink" title="一. rc.local方式"></a>一. rc.local方式</h3><p>rc.local是CentOS以前版本的方式，在CentOS7中仍然以兼容的形式存在，虽仍可用，但不推荐（推荐使用systemd service）。</p><ol><li>编写需要开机自启动的脚本，并添加执行权限</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-1 ~]# vim test_rclocal.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">time=`date +%F_%T`</span><br><span class="line">echo $time' from rc.local' &gt;&gt; /tmp/test.log</span><br><span class="line"></span><br><span class="line">[root@dev-server-1 ~]# chmod +x test_rclocal.sh</span><br></pre></td></tr></table></figure><p>作为测试，上述脚本打印一个时间到/tmp/test.log文件中</p><ol start="2"><li>在/etc/rc.d/rc.local配置文件中添加脚本运行命令（使用绝对路径）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-1 ~]# vim /etc/rc.d/rc.local </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ...注释部分</span></span><br><span class="line">touch /var/lock/subsys/local</span><br><span class="line"></span><br><span class="line">/root/test_rclocal.sh &gt;/dev/null 2&gt;/dev/null</span><br></pre></td></tr></table></figure><ol start="3"><li>添加/etc/rc.d/rc.local文件的执行权限</li></ol><p>在centos7中，/etc/rc.d/rc.local没有执行权限，需要手动授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-1 ~]# chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><p>以上三步，即可使<code>/root/test_rclocal.sh &gt;/dev/null 2&gt;/dev/null</code> 命令在服务器系统启动时自动运行。</p><h3 id="二-chkconfig方式"><a href="#二-chkconfig方式" class="headerlink" title="二. chkconfig方式"></a>二. chkconfig方式</h3><ol><li>编写需要开机自启动的测试脚本，并添加执行权限</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-1 ~]# vim test_chkconfig.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">time=`date +%F_%T`</span><br><span class="line">echo $time' from chkconfig' &gt;&gt; /tmp/test.log</span><br><span class="line"></span><br><span class="line">[root@dev-server-1 ~]# chmod +x test_chkconfig.sh</span><br></pre></td></tr></table></figure><ol start="2"><li>在/etc/rc.d/init.d/目录下添加一个可执行脚本testchkconfig</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-1 ~]# vim /etc/rc.d/init.d/testchkconfig</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chkconfig: 2345 90 10</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> description: <span class="built_in">test</span> chkconfig</span></span><br><span class="line"></span><br><span class="line">/root/test_chkconfig.sh &gt;/dev/null 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line">[root@dev-server-1 ~]# chmod 755 /etc/rc.d/init.d/testchkconfig</span><br></pre></td></tr></table></figure><p>上述testchkconfig脚本的头部必须遵循一定的格式 <code># chkconfig: 2345 90 10</code>， 其中2345指定服务在哪些执行等级中开启或关闭，90表示启动的优先级（0-100，越大优先级越低），10表示关闭的优先级。执行等级包括</p><ul><li>0：表示关机</li><li>1：单用户模式</li><li>2：无网络连接的多用户命令行模式</li><li>3：有网络连接的多用户命令行模式</li><li>4：保留未使用</li><li>5：带图形界面的多用户模式</li><li>6：重新启动</li></ul><ol start="3"><li>加入开机启动服务列表</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-1 ~]# chkconfig --add testchkconfig</span><br><span class="line">[root@dev-server-1 ~]# chkconfig --list</span><br><span class="line"></span><br><span class="line">Note: This output shows SysV services only and does not include native</span><br><span class="line">      systemd services. SysV configuration data might be overridden by native</span><br><span class="line">      systemd configuration.</span><br><span class="line"></span><br><span class="line">      If you want to list systemd services use 'systemctl list-unit-files'.</span><br><span class="line">      To see services enabled on particular target use</span><br><span class="line">      'systemctl list-dependencies [target]'.</span><br><span class="line"></span><br><span class="line">netconsole     0:off1:off2:off3:off4:off5:off6:off</span><br><span class="line">network        0:off1:off2:on3:on4:on5:on6:off</span><br><span class="line">testchkconfig  0:off1:off2:on3:on4:on5:on6:off</span><br></pre></td></tr></table></figure><p>使用 <code>chkconfig --list</code> 可查看当前加入开机自启动的服务列表，但如Note部分所述，该命令只显示SysV服务，不包含原生的systemd服务，查看systemd服务可使用<code>systemctl list-unit-files</code>命令。</p><p>以上三步，即可使<code>/root/test_chkconfig.sh &gt;/dev/null 2&gt;/dev/null</code> 命令在服务器系统启动时自动运行。</p><p>chkconfig的其它命令参考</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">chkconfig --list <span class="comment"># 表示查看所有服务在各个运行级别下的状态。</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">chkconfig testchkconfig on <span class="comment"># 表示指定服务在所有的运行级别下都是开启状态。</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">chkconfig testchkconfig off <span class="comment"># 表示指定服务在所有的运行级别下都是关闭状态。</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">chkconfig --level 5 testchkconfig on <span class="comment"># 表示指定服务在运行级别5图形模式的状态下开机启动服务。</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">chkconfig --level 5 testchkconfig off <span class="comment"># 表示指定服务在运行级别5图形模式的状态下开机不启动服务。</span></span></span><br></pre></td></tr></table></figure><h3 id="三-自定义systemd-service方式"><a href="#三-自定义systemd-service方式" class="headerlink" title="三. 自定义systemd service方式"></a>三. 自定义systemd service方式</h3><p>CentOS7的systemd服务脚本存放在：/usr/lib/systemd/system（系统级）/usr/lib/systemd/user（用户级）下，以.service结尾。这里以nginx为例</p><ol><li>在/usr/lib/systemd/system目录下创建nginx.service文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[devuser@test-server-1 ~]$ sudo vim /usr/lib/systemd/system/nginx.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx server</span><br><span class="line">Documentation=http://nginx.org/en/docs/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 依赖服务，仅当依赖的服务启动之后再启动自定义的服务</span></span><br><span class="line">After=network.target remote-fs.target nss-lookup.target  </span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动类型，包括simple、forking、oneshot、notify、dbus</span></span><br><span class="line">Type=forking</span><br><span class="line"><span class="meta">#</span><span class="bash"> pid文件路径</span></span><br><span class="line">PIDFile=/var/run/nginx.pid</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动前执行的操作</span></span><br><span class="line">ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动命令</span></span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重载命令</span></span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止命令</span></span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 是否给服务分配独立的临时空间</span></span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务安装的用户模式，一般使用multi-user即可</span></span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>其中Service部分的Type包括如下几种类型：</p><ul><li>simple：表示ExecStart启动的进程是该服务的主进程。如果它需要为其他进程提供服务，那么必须在该服务启动之前先建立好通信渠道，比如套接字，以加快后续单元的启动速度。</li><li>forking：表示ExecStart进程将会在启动时使用fork()函数，这是传统Unix系统的做法，也就是说这个进程将由systemd进程fork出来，然后当该进程都准备就绪时，systemd进程退出，而fork出来的进程作为服务的主进程继续运行，对于此类型的进程，建议设置PIDFile选项，以帮助systemd准确定位该服务的主进程。</li><li>oneshot：该进程会在systemd启动后续单元之前退出，适用于仅需要执行一次的程序。比如清理磁盘，你只需要执行一次，不需要一直在后台运行这个程序。</li><li>notify：与simple类似，不同之处在于该进程会在启动完成之后通过sd_notify之类的接口发送一个通知消息。systemd在启动后续单元之前，必须确保该进程已经成功地发送了一个消息。</li><li>dbus：该进程需要在D-Bus上获得一个由BusName指定的名称，systemd将会在启动后续单元之前，首先确保该进程已经成功获取了指定D-Bus名称。</li></ul><ol start="2"><li>开启开机自启动</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[devuser@test-server-1 ~]$ sudo systemctl enable nginx.service</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /usr/lib/systemd/system/nginx.service.</span><br></pre></td></tr></table></figure><p>以上两步，就将nginx服务配置成了在操作系统启动时自动启动。</p><p>其它命令参考</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">sudo systemctl start nginx.service <span class="comment"># 启动</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">sudo systemctl restart nginx.service <span class="comment"># 重启</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">sudo systemctl reload nginx.service <span class="comment"># 重载</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">sudo systemctl stop nginx.service <span class="comment"># 停止</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">sudo systemctl status nginx.service <span class="comment"># 查看服务状态</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">sudo systemctl cat nginx.service <span class="comment"># 查看服务配置</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">systemctl list-unit-files |grep nginx <span class="comment"># 查看服务enabled状态</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">sudo systemctl <span class="built_in">disable</span> nginx.service <span class="comment"># 关闭开机自启动</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">sudo journalctl -f -u nginx.service <span class="comment"># 查看日志</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">sudo systemctl daemon-reload <span class="comment"># 配置修改后，重新加载</span></span></span><br></pre></td></tr></table></figure><blockquote><p>根据以上配置，通过start启动nginx服务时，报<code>PID file /var/run/nginx.pid not readable (yet?) after start.</code>的错误，启动失败，日志如下</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[devuser@test-server-1 ~]$ sudo journalctl -f -u nginx.service</span><br><span class="line">-- Logs begin at Wed 2020-03-25 09:14:55 CST. --</span><br><span class="line">Mar 25 11:02:27 test-server-1 nginx[14144]: nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</span><br><span class="line">Mar 25 11:02:27 test-server-1 systemd[1]: PID file /run/nginx.pid not readable (yet?) after start.</span><br><span class="line">Mar 25 11:04:29 test-server-1 systemd[1]: nginx.service start operation timed out. Terminating.</span><br><span class="line">Mar 25 11:04:29 test-server-1 systemd[1]: Failed to start nginx.</span><br><span class="line">Mar 25 11:04:29 test-server-1 systemd[1]: Unit nginx.service entered failed state.</span><br><span class="line">Mar 25 11:04:29 test-server-1 systemd[1]: nginx.service failed.</span><br></pre></td></tr></table></figure><p>从字面看是PID文件不可读，查看/var/run/nginx.pid，该文件也确实不存在，查看nginx.conf配置文件，发现是<code>pid /var/run/nginx.pid;</code>这行配置被注释掉了， 如果不指定pid文件位置，nginx默认会把pid文件保存在logs目录中。所以出现systemd启动服务时找不到pid文件而报错，将nginx.conf中的pid配置注释去掉，重启nginx.service即可。</p><h2 id="Ubuntu18-04的开机自启动配置"><a href="#Ubuntu18-04的开机自启动配置" class="headerlink" title="Ubuntu18.04的开机自启动配置"></a>Ubuntu18.04的开机自启动配置</h2><p>在Ubuntu18.04中，主要也是以systemd服务来实现开机自启动，systemd默认读取/etc/systemd/system/下的配置文件，该目录下的一些文件会链接到/lib/systemd/system/下的文件。</p><p>因此可以在/etc/systemd/system/目录下面创建一个自启动服务配置，以内网穿透服务frp客户端为例，如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=frpc</span><br><span class="line">After=network.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=30</span><br><span class="line">ExecStart=/home/devuser/apps/frp/frpc -c /home/devuser/apps/frp/frpc.ini</span><br><span class="line">ExecStop=/bin/kill $MAINPID</span><br><span class="line">Restart=1</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>各配置项与CentOS类似。然后将服务器加到自启动列表中并启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">sudo systemctl <span class="built_in">enable</span> frpc</span></span><br><span class="line"><span class="meta">$</span><span class="bash">sudo systemctl start frpc</span></span><br></pre></td></tr></table></figure><p>其它更多systemctl命令与CentOS类似。 </p><p>也可以使用/lib/systemd/system/rc-local.service来执行一些开机需要执行的脚本，该文件内容为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">  SPDX-License-Identifier: LGPL-2.1+</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  This file is part of systemd.</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  systemd is free software; you can redistribute it and/or modify it</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  under the terms of the GNU Lesser General Public License as published by</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  the Free Software Foundation; either version 2.1 of the License, or</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  (at your option) any later version.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> This unit gets pulled automatically into multi-user.target by</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemd-rc-local-generator <span class="keyword">if</span> /etc/rc.local is executable.</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=/etc/rc.local Compatibility</span><br><span class="line">Documentation=man:systemd-rc-local-generator(8)</span><br><span class="line">ConditionFileIsExecutable=/etc/rc.local</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/etc/rc.local start</span><br><span class="line">TimeoutSec=0</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">GuessMainPID=no</span><br></pre></td></tr></table></figure><p>从Description看它是为了兼容之前版本的/etc/rc.local的，该服务启动命名就是<code>/etc/rc.local start</code>，将该文件链接到/etc/systemd/system下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo ln -s /lib/systemd/system/rc-local.service /etc/systemd/system/rc-local.service</span></span><br></pre></td></tr></table></figure><p>创建/etc/rc.local文件，并赋予可执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/rc.local</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash  </span></span><br><span class="line">echo "test rc " &gt; /var/test.log  </span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod +x /etc/rc.local</span></span><br></pre></td></tr></table></figure><p>&lt;<em>完</em>&gt;</p><p>欢迎关注作者微信公众号：空山新雨的技术空间，查看更多关于Java、Spring Boot、Spring Cloud、Docker等技术实践文章</p><p><img src="/assets/qrcode-05.jpg" alt="微信公众号"></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot（十三）：整合Redis集群</title>
      <link href="/springboot-redis.html"/>
      <url>/springboot-redis.html</url>
      
        <content type="html"><![CDATA[<p>前面的两篇文章（<a href="http://blog.jboost.cn/redis-persistence.html">Redis的持久化方案</a>， <a href="http://blog.jboost.cn/redis-cluster.html">一文掌握Redis的三种集群方案</a>）分别介绍了Redis的持久化与集群方案 —— 包括主从复制模式、哨兵模式、Cluster模式，其中主从复制模式由于不能自动做故障转移，当节点出现故障时需要人为干预，不满足生产环境的高可用需求，所以在生产环境一般使用哨兵模式或Cluster模式。那么在Spring Boot项目中，如何访问这两种模式的Redis集群，可能遇到哪些问题，是本文即将介绍的内容。</p><a id="more"></a><h2 id="Spring-Boot-2-整合Redis"><a href="#Spring-Boot-2-整合Redis" class="headerlink" title="Spring Boot 2 整合Redis"></a>Spring Boot 2 整合Redis</h2><p>spring boot中整合Redis非常简单，在pom.xml中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring boot 2的<code>spring-boot-starter-data-redis</code>中，默认使用的是lettuce作为redis客户端，它与jedis的主要区别如下：</p><ol><li>Jedis是同步的，不支持异步，Jedis客户端实例不是线程安全的，需要每个线程一个Jedis实例，所以一般通过连接池来使用Jedis</li><li>Lettuce是基于Netty框架的事件驱动的Redis客户端，其方法调用是异步的，Lettuce的API也是线程安全的，所以多个线程可以操作单个Lettuce连接来完成各种操作，同时Lettuce也支持连接池</li></ol><p>如果不使用默认的lettuce，使用jedis的话，可以排除lettuce的依赖，手动加入jedis依赖，配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在配置文件application.yml中添加配置（针对单实例）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.201</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">passw0rd</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span> <span class="comment"># 数据库索引，默认0</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">5000</span>  <span class="comment"># 连接超时，单位ms</span></span><br><span class="line">    <span class="attr">jedis:</span>  <span class="comment"># 或lettuce, 连接池配置，springboot2.0中使用jedis或者lettuce配置连接池，默认为lettuce连接池</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span> <span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span> <span class="comment"># 连接池分配连接最大阻塞等待时间（阻塞时间到，抛出异常。使用负值表示无限期阻塞）</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span> <span class="comment"># 连接池中的最大空闲连接数</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span> <span class="comment"># 连接池中的最小空闲连接数</span></span><br></pre></td></tr></table></figure><p>然后添加配置类。其中@EnableCaching注解是为了使@Cacheable、@CacheEvict、@CachePut、@Caching注解生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Jackson2JsonRedisSerialize 替换默认的jdkSerializeable序列化</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述配置类注入了自定义的RedisTemplate&lt;String, Object&gt;， 替换RedisAutoConfiguration中自动配置的RedisTemplate&lt;Object, Object&gt;类（RedisAutoConfiguration另外还自动配置了StringRedisTemplate）。</p><p>此时，我们可以通过定义一个基于RedisTemplate的工具类，或通过在Service层添加@Cacheable、@CacheEvict、@CachePut、@Caching注解来使用缓存。比如定义一个RedisService类，封装常用的Redis操作方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"exception when expire key &#123;&#125;. "</span>, key, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"exception when check key &#123;&#125;. "</span>, key, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出于篇幅，完整代码请查阅本文示例源码： <a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-redis-sentinel" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-redis-sentinel</a></p><p>或在Service层使用注解，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@CacheConfig</span>(cacheNames = <span class="string">"users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, User&gt; userMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CachePut</span>(key = <span class="string">"#user.username"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">addUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        user.setUid(UUID.randomUUID().toString());</span><br><span class="line">        System.out.println(<span class="string">"add user: "</span> + user);</span><br><span class="line">        userMap.put(user.getUsername(), user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Caching</span>(put = &#123;</span><br><span class="line">            <span class="meta">@CachePut</span>( key = <span class="string">"#user.username"</span>),</span><br><span class="line">            <span class="meta">@CachePut</span>( key = <span class="string">"#user.uid"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">addUser2</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        user.setUid(UUID.randomUUID().toString());</span><br><span class="line">        System.out.println(<span class="string">"add user2: "</span> + user);</span><br><span class="line">        userMap.put(user.getUsername(), user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Boot-2-整合Redis哨兵模式"><a href="#Spring-Boot-2-整合Redis哨兵模式" class="headerlink" title="Spring Boot 2 整合Redis哨兵模式"></a>Spring Boot 2 整合Redis哨兵模式</h2><p>Spring Boot 2 整合Redis哨兵模式除了配置稍有差异，其它与整合单实例模式类似，配置示例为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">passw0rd</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">5000</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">master:</span> <span class="string">mymaster</span></span><br><span class="line">      <span class="attr">nodes:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.201</span><span class="string">:26379,192.168.40.201:36379,192.168.40.201:46379</span> <span class="comment"># 哨兵的IP:Port列表</span></span><br><span class="line">    <span class="attr">jedis:</span> <span class="comment"># 或lettuce</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>完整示例可查阅源码： <a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-redis-sentinel" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-redis-sentinel</a> </p><p>上述配置只指定了哨兵节点的地址与master的名称，但Redis客户端最终访问操作的是master节点，那么Redis客户端是如何获取master节点的地址，并在发生故障转移时，如何自动切换master地址的呢？我们以Jedis连接池为例，通过源码来揭开其内部实现的神秘面纱。</p><p>在 JedisSentinelPool 类的构造函数中，对连接池做了初始化，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">JedisSentinelPool</span><span class="params">(String masterName, Set&lt;String&gt; sentinels,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">final</span> GenericObjectPoolConfig poolConfig, <span class="keyword">final</span> <span class="keyword">int</span> connectionTimeout, <span class="keyword">final</span> <span class="keyword">int</span> soTimeout,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">final</span> String password, <span class="keyword">final</span> <span class="keyword">int</span> database, <span class="keyword">final</span> String clientName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.poolConfig = poolConfig;</span><br><span class="line">    <span class="keyword">this</span>.connectionTimeout = connectionTimeout;</span><br><span class="line">    <span class="keyword">this</span>.soTimeout = soTimeout;</span><br><span class="line">    <span class="keyword">this</span>.password = password;</span><br><span class="line">    <span class="keyword">this</span>.database = database;</span><br><span class="line">    <span class="keyword">this</span>.clientName = clientName;</span><br><span class="line"></span><br><span class="line">    HostAndPort master = initSentinels(sentinels, masterName);</span><br><span class="line">    initPool(master);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> HostAndPort <span class="title">initSentinels</span><span class="params">(Set&lt;String&gt; sentinels, <span class="keyword">final</span> String masterName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String sentinel : sentinels) &#123;</span><br><span class="line">      <span class="keyword">final</span> HostAndPort hap = HostAndPort.parseString(sentinel);</span><br><span class="line"></span><br><span class="line">      log.fine(<span class="string">"Connecting to Sentinel "</span> + hap);</span><br><span class="line"></span><br><span class="line">      Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        jedis = <span class="keyword">new</span> Jedis(hap.getHost(), hap.getPort());</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; masterAddr = jedis.sentinelGetMasterAddrByName(masterName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// connected to sentinel...</span></span><br><span class="line">        sentinelAvailable = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (masterAddr == <span class="keyword">null</span> || masterAddr.size() != <span class="number">2</span>) &#123;</span><br><span class="line">          log.warning(<span class="string">"Can not get master addr, master name: "</span> + masterName + <span class="string">". Sentinel: "</span> + hap</span><br><span class="line">              + <span class="string">"."</span>);</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        master = toHostAndPort(masterAddr);</span><br><span class="line">        log.fine(<span class="string">"Found Redis master at "</span> + master);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (JedisException e) &#123;</span><br><span class="line">        <span class="comment">// resolves #1036, it should handle JedisException there's another chance</span></span><br><span class="line">        <span class="comment">// of raising JedisDataException</span></span><br><span class="line">        log.warning(<span class="string">"Cannot get master address from sentinel running @ "</span> + hap + <span class="string">". Reason: "</span> + e</span><br><span class="line">            + <span class="string">". Trying next one."</span>);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">          jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略了非关键代码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String sentinel : sentinels) &#123;</span><br><span class="line">      <span class="keyword">final</span> HostAndPort hap = HostAndPort.parseString(sentinel);</span><br><span class="line">      MasterListener masterListener = <span class="keyword">new</span> MasterListener(masterName, hap.getHost(), hap.getPort());</span><br><span class="line">      <span class="comment">// whether MasterListener threads are alive or not, process can be stopped</span></span><br><span class="line">      masterListener.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">      masterListeners.add(masterListener);</span><br><span class="line">      masterListener.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> master;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>initSentinels</code> 方法中主要干了两件事：</p><ol><li>遍历哨兵节点，通过<code>get-master-addr-by-name</code>命令获取master节点的地址信息，找到了就退出循环。<code>get-master-addr-by-name</code>命令执行结果如下所示</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-1 master-slave]# redis-cli -p 26379</span><br><span class="line">127.0.0.1:26379&gt; sentinel get-master-addr-by-name mymaster</span><br><span class="line">1) "192.168.40.201"</span><br><span class="line">2) "7001"</span><br><span class="line">127.0.0.1:26379&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>对每一个哨兵节点通过一个 MasterListener 进行监听（Redis的发布订阅功能），订阅哨兵节点<code>+switch-master</code>频道，当发生故障转移时，客户端能收到哨兵的通知，通过重新初始化连接池，完成主节点的切换。<br>MasterListener.run方法中监听哨兵部分代码如下</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">j.subscribe(<span class="keyword">new</span> JedisPubSub() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String channel, String message)</span> </span>&#123;</span><br><span class="line">             log.fine(<span class="string">"Sentinel "</span> + host + <span class="string">":"</span> + port + <span class="string">" published: "</span> + message + <span class="string">"."</span>);</span><br><span class="line"></span><br><span class="line">             String[] switchMasterMsg = message.split(<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">if</span> (switchMasterMsg.length &gt; <span class="number">3</span>) &#123;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (masterName.equals(switchMasterMsg[<span class="number">0</span>])) &#123;</span><br><span class="line">                 initPool(toHostAndPort(Arrays.asList(switchMasterMsg[<span class="number">3</span>], switchMasterMsg[<span class="number">4</span>])));</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 log.fine(<span class="string">"Ignoring message on +switch-master for master name "</span></span><br><span class="line">                     + switchMasterMsg[<span class="number">0</span>] + <span class="string">", our master name is "</span> + masterName);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               log.severe(<span class="string">"Invalid message received on Sentinel "</span> + host + <span class="string">":"</span> + port</span><br><span class="line">                   + <span class="string">" on channel +switch-master: "</span> + message);</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;, <span class="string">"+switch-master"</span>);</span><br></pre></td></tr></table></figure><p>initPool 方法如下：如果发现新的master节点与当前的master不同，则重新初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initPool</span><span class="params">(HostAndPort master)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!master.equals(currentHostMaster)) &#123;</span><br><span class="line">      currentHostMaster = master;</span><br><span class="line">      <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">        factory = <span class="keyword">new</span> JedisFactory(master.getHost(), master.getPort(), connectionTimeout,</span><br><span class="line">            soTimeout, password, database, clientName, <span class="keyword">false</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        initPool(poolConfig, factory);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        factory.setHostAndPort(currentHostMaster);</span><br><span class="line">        <span class="comment">// although we clear the pool, we still have to check the</span></span><br><span class="line">        <span class="comment">// returned object</span></span><br><span class="line">        <span class="comment">// in getResource, this call only clears idle instances, not</span></span><br><span class="line">        <span class="comment">// borrowed instances</span></span><br><span class="line">        internalPool.clear();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      log.info(<span class="string">"Created JedisPool to master at "</span> + master);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>通过以上两步，Jedis客户端在只知道哨兵地址的情况下便能获得master节点的地址信息，并且当发生故障转移时能自动切换到新的master节点地址。</p><h2 id="Spring-Boot-2-整合Redis-Cluster模式"><a href="#Spring-Boot-2-整合Redis-Cluster模式" class="headerlink" title="Spring Boot 2 整合Redis Cluster模式"></a>Spring Boot 2 整合Redis Cluster模式</h2><p>Spring Boot 2 整合Redis Cluster模式除了配置稍有差异，其它与整合单实例模式也类似，配置示例为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">passw0rd</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">5000</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">cluster:</span></span><br><span class="line">      <span class="attr">nodes:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.201</span><span class="string">:7100,192.168.40.201:7200,192.168.40.201:7300,192.168.40.201:7400,192.168.40.201:7500,192.168.40.201:7600</span></span><br><span class="line">      <span class="attr">max-redirects:</span> <span class="number">3</span>  <span class="comment"># 重定向的最大次数</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>完整示例可查阅源码： <a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-redis-cluster" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-redis-cluster</a> </p><p>在 <a href="http://blog.jboost.cn/redis-cluster.html">一文掌握Redis的三种集群方案</a> 中已经介绍了Cluster模式访问的基本原理，可以通过任意节点跳转到目标节点执行命令，上面配置中 max-redirects 控制在集群中跳转的最大次数。</p><p>查看JedisClusterConnection的execute方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(String command, <span class="keyword">byte</span>[]... args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Assert.notNull(command, <span class="string">"Command must not be null!"</span>);</span><br><span class="line">    Assert.notNull(args, <span class="string">"Args must not be null!"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clusterCommandExecutor</span><br><span class="line">            .executeCommandOnArbitraryNode((JedisClusterCommandCallback&lt;Object&gt;) client -&gt; JedisClientUtils.execute(command,</span><br><span class="line">                    EMPTY_2D_BYTE_ARRAY, args, () -&gt; client))</span><br><span class="line">            .getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>集群命令的执行是通过<code>ClusterCommandExecutor.executeCommandOnArbitraryNode</code>来实现的，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">NodeResult&lt;T&gt; <span class="title">executeCommandOnArbitraryNode</span><span class="params">(ClusterCommandCallback&lt;?, T&gt; cmd)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Assert.notNull(cmd, <span class="string">"ClusterCommandCallback must not be null!"</span>);</span><br><span class="line">    List&lt;RedisClusterNode&gt; nodes = <span class="keyword">new</span> ArrayList&lt;&gt;(getClusterTopology().getActiveNodes());</span><br><span class="line">    <span class="keyword">return</span> executeCommandOnSingleNode(cmd, nodes.get(<span class="keyword">new</span> Random().nextInt(nodes.size())));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> &lt;S, T&gt; <span class="function">NodeResult&lt;T&gt; <span class="title">executeCommandOnSingleNode</span><span class="params">(ClusterCommandCallback&lt;S, T&gt; cmd, RedisClusterNode node,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> redirectCount)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Assert.notNull(cmd, <span class="string">"ClusterCommandCallback must not be null!"</span>);</span><br><span class="line">    Assert.notNull(node, <span class="string">"RedisClusterNode must not be null!"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (redirectCount &gt; maxRedirects) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TooManyClusterRedirectionsException(String.format(</span><br><span class="line">                <span class="string">"Cannot follow Cluster Redirects over more than %s legs. Please consider increasing the number of redirects to follow. Current value is: %s."</span>,</span><br><span class="line">                redirectCount, maxRedirects));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RedisClusterNode nodeToUse = lookupNode(node);</span><br><span class="line"></span><br><span class="line">    S client = <span class="keyword">this</span>.resourceProvider.getResourceForSpecificNode(nodeToUse);</span><br><span class="line">    Assert.notNull(client, <span class="string">"Could not acquire resource for node. Is your cluster info up to date?"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NodeResult&lt;&gt;(node, cmd.doInCluster(client));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line"></span><br><span class="line">        RuntimeException translatedException = convertToDataAccessException(ex);</span><br><span class="line">        <span class="keyword">if</span> (translatedException <span class="keyword">instanceof</span> ClusterRedirectException) &#123;</span><br><span class="line">            ClusterRedirectException cre = (ClusterRedirectException) translatedException;</span><br><span class="line">            <span class="keyword">return</span> executeCommandOnSingleNode(cmd,</span><br><span class="line">                    topologyProvider.getTopology().lookup(cre.getTargetHost(), cre.getTargetPort()), redirectCount + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> translatedException != <span class="keyword">null</span> ? translatedException : ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.resourceProvider.returnResourceForSpecificNode(nodeToUse, client);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码逻辑如下</p><ol><li>从集群节点列表中随机选择一个节点</li><li>从该节点获取一个客户端连接（如果配置了连接池，从连接池中获取），执行命令</li><li>如果抛出ClusterRedirectException异常，则跳转到返回的目标节点上执行</li><li>如果跳转次数大于配置的值 max-redirects， 则抛出TooManyClusterRedirectionsException异常</li></ol><h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><ol><li><p>Redis连接超时<br>检查服务是否正常启动（比如 <code>ps -ef|grep redis</code>查看进程，<code>netstat -ano|grep 6379</code>查看端口是否起来，以及日志文件），如果正常启动，则查看Redis服务器是否开启防火墙，关闭防火墙或配置通行端口。</p></li><li><p>Cluster模式下，报连接到127.0.0.1被拒绝错误，如 <code>Connection refused: no further information: /127.0.0.1:7600</code><br>这是因为在redis.conf中配置 <code>bind 0.0.0.0</code> 或 <code>bind 127.0.0.1</code>导致，需要改为具体在外部可访问的IP，如 <code>bind 192.168.40.201</code>。如果之前已经起了集群，并产生了数据，则修改redis.conf文件后，还需要修改cluster-config-file文件，将127.0.0.1替换为bind 的具体IP，然后重启。</p></li><li><p>master挂了，slave升级成为master，重启master，不能正常同步新的master数据<br>如果设置了密码，需要在master, slave的配置文件中都配置<code>masterauth password</code></p></li></ol><p>相关阅读：</p><ol><li><a href="http://blog.jboost.cn/redis-persistence.html">Redis的持久化方案</a></li><li><a href="http://blog.jboost.cn/redis-cluster.html">一文掌握Redis的三种集群方案</a></li></ol><hr><p>作者：空山新雨<br>近期作者写了几十篇技术博客，内容包括Java、Spring Boot、Spring Cloud、Docker，技术管理心得等<br>欢迎关注作者微信公众号：空山新雨的技术空间，一起学习成长  </p><p><img src="/assets/qrcode-05.jpg" alt="微信公众号"></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文了解Redis的三种集群方案</title>
      <link href="/redis-cluster.html"/>
      <url>/redis-cluster.html</url>
      
        <content type="html"><![CDATA[<p>在开发测试环境中，我们一般搭建Redis的单实例来应对开发测试需求，但是在生产环境，如果对可用性、可靠性要求较高，则需要引入Redis的集群方案。虽然现在各大云平台有提供缓存服务可以直接使用，但了解一下其背后的实现与原理总还是有些必要（比如面试）， 本文就一起来学习一下Redis的几种集群方案。</p><a id="more"></a><p>Redis支持三种集群方案</p><ul><li>主从复制模式</li><li>Sentinel（哨兵）模式</li><li>Cluster模式</li></ul><h2 id="主从复制模式"><a href="#主从复制模式" class="headerlink" title="主从复制模式"></a>主从复制模式</h2><h3 id="1-基本原理"><a href="#1-基本原理" class="headerlink" title="1. 基本原理"></a>1. 基本原理</h3><p>主从复制模式中包含一个主数据库实例（master）与一个或多个从数据库实例（slave），如下图</p><p><img src="/assets/redis-master-slave.png" alt="redis-master-slave"></p><p>客户端可对主数据库进行读写操作，对从数据库进行读操作，主数据库写入的数据会实时自动同步给从数据库。</p><p>具体工作机制为：</p><ol><li>slave启动后，向master发送SYNC命令，master接收到SYNC命令后通过bgsave保存快照（即上文所介绍的RDB持久化），并使用缓冲区记录保存快照这段时间内执行的写命令</li><li>master将保存的快照文件发送给slave，并继续记录执行的写命令</li><li>slave接收到快照文件后，加载快照文件，载入数据</li><li>master快照发送完后开始向slave发送缓冲区的写命令，slave接收命令并执行，完成复制初始化</li><li>此后master每次执行一个写命令都会同步发送给slave，保持master与slave之间数据的一致性</li></ol><h3 id="2-部署示例"><a href="#2-部署示例" class="headerlink" title="2. 部署示例"></a>2. 部署示例</h3><p>本示例基于Redis 5.0.3版。  </p><p>redis.conf的主要配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">###网络相关###</span><br><span class="line"># bind 127.0.0.1 # 绑定监听的网卡IP，注释掉或配置成0.0.0.0可使任意IP均可访问</span><br><span class="line">protected-mode no # 关闭保护模式，使用密码访问</span><br><span class="line">port 6379  # 设置监听端口，建议生产环境均使用自定义端口</span><br><span class="line">timeout 30 # 客户端连接空闲多久后断开连接，单位秒，0表示禁用</span><br><span class="line"></span><br><span class="line">###通用配置###</span><br><span class="line">daemonize yes # 在后台运行</span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis_6379.pid  # pid进程文件名</span><br><span class="line">logfile &#x2F;usr&#x2F;local&#x2F;redis&#x2F;logs&#x2F;redis.log # 日志文件的位置</span><br><span class="line"></span><br><span class="line">###RDB持久化配置###</span><br><span class="line">save 900 1 # 900s内至少一次写操作则执行bgsave进行RDB持久化</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000 </span><br><span class="line"># 如果禁用RDB持久化，可在这里添加 save &quot;&quot;</span><br><span class="line">rdbcompression yes #是否对RDB文件进行压缩，建议设置为no，以（磁盘）空间换（CPU）时间</span><br><span class="line">dbfilename dump.rdb # RDB文件名称</span><br><span class="line">dir &#x2F;usr&#x2F;local&#x2F;redis&#x2F;datas # RDB文件保存路径，AOF文件也保存在这里</span><br><span class="line"></span><br><span class="line">###AOF配置###</span><br><span class="line">appendonly yes # 默认值是no，表示不使用AOF增量持久化的方式，使用RDB全量持久化的方式</span><br><span class="line">appendfsync everysec # 可选值 always， everysec，no，建议设置为everysec</span><br><span class="line"></span><br><span class="line">###设置密码###</span><br><span class="line">requirepass 123456 # 设置复杂一点的密码</span><br></pre></td></tr></table></figure><p>部署主从复制模式只需稍微调整slave的配置，在redis.conf中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">replicaof 127.0.0.1 6379 # master的ip，port</span><br><span class="line">masterauth 123456 # master的密码</span><br><span class="line">replica-serve-stale-data no # 如果slave无法与master同步，设置成slave不可读，方便监控脚本发现问题</span><br></pre></td></tr></table></figure><p>本示例在单台服务器上配置master端口6379，两个slave端口分别为7001,7002，启动master，再启动两个slave</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-1 master-slave]# redis-server master.conf</span><br><span class="line">[root@dev-server-1 master-slave]# redis-server slave1.conf</span><br><span class="line">[root@dev-server-1 master-slave]# redis-server slave2.conf</span><br></pre></td></tr></table></figure><p>进入master数据库，写入一个数据，再进入一个slave数据库，立即便可访问刚才写入master数据库的数据。如下所示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-1 master-slave]# redis-cli </span><br><span class="line">127.0.0.1:6379&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set site blog.jboost.cn</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get site</span><br><span class="line">"blog.jboost.cn"</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=7001,state=online,offset=13364738,lag=1</span><br><span class="line">slave1:ip=127.0.0.1,port=7002,state=online,offset=13364738,lag=0</span><br><span class="line">...</span><br><span class="line">127.0.0.1:6379&gt; exit</span><br><span class="line"></span><br><span class="line">[root@dev-server-1 master-slave]# redis-cli -p 7001</span><br><span class="line">127.0.0.1:7001&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7001&gt; get site</span><br><span class="line">"blog.jboost.cn"</span><br></pre></td></tr></table></figure><p>执行<code>info replication</code>命令可以查看连接该数据库的其它库的信息，如上可看到有两个slave连接到master</p><h3 id="3-主从复制的优缺点"><a href="#3-主从复制的优缺点" class="headerlink" title="3. 主从复制的优缺点"></a>3. 主从复制的优缺点</h3><p>优点：</p><ol><li>master能自动将数据同步到slave，可以进行读写分离，分担master的读压力</li><li>master、slave之间的同步是以非阻塞的方式进行的，同步期间，客户端仍然可以提交查询或更新请求</li></ol><p>缺点：</p><ol><li>不具备自动容错与恢复功能，master或slave的宕机都可能导致客户端请求失败，需要等待机器重启或手动切换客户端IP才能恢复</li><li>master宕机，如果宕机前数据没有同步完，则切换IP后会存在数据不一致的问题</li><li>难以支持在线扩容，Redis的容量受限于单机配置</li></ol><h2 id="Sentinel（哨兵）模式"><a href="#Sentinel（哨兵）模式" class="headerlink" title="Sentinel（哨兵）模式"></a>Sentinel（哨兵）模式</h2><h3 id="1-基本原理-1"><a href="#1-基本原理-1" class="headerlink" title="1. 基本原理"></a>1. 基本原理</h3><p>哨兵模式基于主从复制模式，只是引入了哨兵来监控与自动处理故障。如图</p><p><img src="/assets/redis-sentinel.png" alt="redis-sentinel"></p><p>哨兵顾名思义，就是来为Redis集群站哨的，一旦发现问题能做出相应的应对处理。其功能包括</p><ol><li>监控master、slave是否正常运行</li><li>当master出现故障时，能自动将一个slave转换为master（大哥挂了，选一个小弟上位）</li><li>多个哨兵可以监控同一个Redis，哨兵之间也会自动监控</li></ol><p>哨兵模式的具体工作机制：</p><p>在配置文件中通过 <code>sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</code> 来定位master的IP、端口，一个哨兵可以监控多个master数据库，只需要提供多个该配置项即可。哨兵启动后，会与要监控的master建立两条连接：</p><ol><li>一条连接用来订阅master的<code>_sentinel_:hello</code>频道与获取其他监控该master的哨兵节点信息</li><li>另一条连接定期向master发送INFO等命令获取master本身的信息</li></ol><p>与master建立连接后，哨兵会执行三个操作：</p><ol><li>定期（一般10s一次，当master被标记为主观下线时，改为1s一次）向master和slave发送INFO命令</li><li>定期向master和slave的<code>_sentinel_:hello</code>频道发送自己的信息</li><li>定期（1s一次）向master、slave和其他哨兵发送PING命令</li></ol><p>发送INFO命令可以获取当前数据库的相关信息从而实现新节点的自动发现。所以说哨兵只需要配置master数据库信息就可以自动发现其slave信息。获取到slave信息后，哨兵也会与slave建立两条连接执行监控。通过INFO命令，哨兵可以获取主从数据库的最新信息，并进行相应的操作，比如角色变更等。</p><p>接下来哨兵向主从数据库的<em>sentinel</em>:hello频道发送信息与同样监控这些数据库的哨兵共享自己的信息，发送内容为哨兵的ip端口、运行id、配置版本、master名字、master的ip端口还有master的配置版本。这些信息有以下用处：</p><ol><li>其他哨兵可以通过该信息判断发送者是否是新发现的哨兵，如果是的话会创建一个到该哨兵的连接用于发送PING命令。</li><li>其他哨兵通过该信息可以判断master的版本，如果该版本高于直接记录的版本，将会更新</li><li>当实现了自动发现slave和其他哨兵节点后，哨兵就可以通过定期发送PING命令定时监控这些数据库和节点有没有停止服务。</li></ol><p>如果被PING的数据库或者节点超时（通过 <code>sentinel down-after-milliseconds master-name milliseconds</code> 配置）未回复，哨兵认为其主观下线（sdown，s就是Subjectively —— 主观地）。如果下线的是master，哨兵会向其它哨兵发送命令询问它们是否也认为该master主观下线，如果达到一定数目（即配置文件中的quorum）投票，哨兵会认为该master已经客观下线（odown，o就是Objectively —— 客观地），并选举领头的哨兵节点对主从系统发起故障恢复。若没有足够的sentinel进程同意master下线，master的客观下线状态会被移除，若master重新向sentinel进程发送的PING命令返回有效回复，master的主观下线状态就会被移除</p><p>哨兵认为master客观下线后，故障恢复的操作需要由选举的领头哨兵来执行，选举采用Raft算法：</p><ol><li>发现master下线的哨兵节点（我们称他为A）向每个哨兵发送命令，要求对方选自己为领头哨兵</li><li>如果目标哨兵节点没有选过其他人，则会同意选举A为领头哨兵</li><li>如果有超过一半的哨兵同意选举A为领头，则A当选</li><li>如果有多个哨兵节点同时参选领头，此时有可能存在一轮投票无竞选者胜出，此时每个参选的节点等待一个随机时间后再次发起参选请求，进行下一轮投票竞选，直至选举出领头哨兵</li></ol><p>选出领头哨兵后，领头者开始对系统进行故障恢复，从出现故障的master的从数据库中挑选一个来当选新的master,选择规则如下：</p><ol><li>所有在线的slave中选择优先级最高的，优先级可以通过slave-priority配置</li><li>如果有多个最高优先级的slave，则选取复制偏移量最大（即复制越完整）的当选</li><li>如果以上条件都一样，选取id最小的slave</li></ol><p>挑选出需要继任的slave后，领头哨兵向该数据库发送命令使其升格为master，然后再向其他slave发送命令接受新的master，最后更新数据。将已经停止的旧的master更新为新的master的从数据库，使其恢复服务后以slave的身份继续运行。</p><h3 id="2-部署演示"><a href="#2-部署演示" class="headerlink" title="2. 部署演示"></a>2. 部署演示</h3><p>本示例基于Redis 5.0.3版。  </p><p>哨兵模式基于前文的主从复制模式。哨兵的配置文件为sentinel.conf，在文件中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1 # mymaster定义一个master数据库的名称，后面是master的ip， port，1表示至少需要一个Sentinel进程同意才能将master判断为失效，如果不满足这个条件，则自动故障转移（failover）不会执行</span><br><span class="line">sentinel auth-pass mymaster 123456 # master的密码</span><br><span class="line"></span><br><span class="line">sentinel down-after-milliseconds mymaster 5000 # 5s未回复PING，则认为master主观下线，默认为30s</span><br><span class="line">sentinel parallel-syncs mymaster 2  # 指定在执行故障转移时，最多可以有多少个slave实例在同步新的master实例，在slave实例较多的情况下这个数字越小，同步的时间越长，完成故障转移所需的时间就越长</span><br><span class="line">sentinel failover-timeout mymaster 300000 # 如果在该时间（ms）内未能完成故障转移操作，则认为故障转移失败，生产环境需要根据数据量设置该值</span><br></pre></td></tr></table></figure><blockquote><p>一个哨兵可以监控多个master数据库，只需按上述配置添加多套</p></blockquote><p>分别以26379,36379,46379端口启动三个sentinel</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-1 sentinel]# redis-server sentinel1.conf --sentinel</span><br><span class="line">[root@dev-server-1 sentinel]# redis-server sentinel2.conf --sentinel</span><br><span class="line">[root@dev-server-1 sentinel]# redis-server sentinel3.conf --sentinel</span><br></pre></td></tr></table></figure><p>也可以使用<code>redis-sentinel sentinel1.conf</code> 命令启动。此时集群包含一个master、两个slave、三个sentinel，如图，</p><p><img src="/assets/redis-cluster-instance.png" alt="redis-cluster-instance"></p><p>我们来模拟master挂掉的场景，执行 <code>kill -9 3017</code> 将master进程干掉，进入slave中执行 <code>info replication</code>查看，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-1 sentinel]# redis-cli -p 7001</span><br><span class="line">127.0.0.1:7001&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7001&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:7002</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:1</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 省略</span></span><br><span class="line">127.0.0.1:7001&gt; exit</span><br><span class="line">[root@dev-server-1 sentinel]# redis-cli -p 7002</span><br><span class="line">127.0.0.1:7002&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7002&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=127.0.0.1,port=7001,state=online,offset=13642721,lag=1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 省略</span></span><br></pre></td></tr></table></figure><p>可以看到slave 7002已经成功上位晋升为master（role：master），接收一个slave 7001的连接。此时查看slave2.conf配置文件，发现<code>replicaof</code>的配置已经被移除了，slave1.conf的配置文件里<code>replicaof 127.0.0.1 6379</code> 被改为 <code>replicaof 127.0.0.1 7002</code>。重新启动master，也可以看到master.conf配置文件中添加了<code>replicaof 127.0.0.1 7002</code>的配置项，可见大哥（master）下位后，再出来混就只能当当小弟（slave）了，三十年河东三十年河西。</p><h3 id="3-哨兵模式的优缺点"><a href="#3-哨兵模式的优缺点" class="headerlink" title="3. 哨兵模式的优缺点"></a>3. 哨兵模式的优缺点</h3><p>优点：</p><ol><li>哨兵模式基于主从复制模式，所以主从复制模式有的优点，哨兵模式也有</li><li>哨兵模式下，master挂掉可以自动进行切换，系统可用性更高</li></ol><p>缺点：</p><ol><li>同样也继承了主从模式难以在线扩容的缺点，Redis的容量受限于单机配置</li><li>需要额外的资源来启动sentinel进程，实现相对复杂一点，同时slave节点作为备份节点不提供服务</li></ol><h2 id="Cluster模式"><a href="#Cluster模式" class="headerlink" title="Cluster模式"></a>Cluster模式</h2><h3 id="1-基本原理-2"><a href="#1-基本原理-2" class="headerlink" title="1. 基本原理"></a>1. 基本原理</h3><p>哨兵模式解决了主从复制不能自动故障转移，达不到高可用的问题，但还是存在难以在线扩容，Redis容量受限于单机配置的问题。Cluster模式实现了Redis的分布式存储，即每台节点存储不同的内容，来解决在线扩容的问题。如图</p><p><img src="/assets/redis-cluster.png" alt="redis-cluster"></p><p>Cluster采用无中心结构,它的特点如下：</p><ol><li>所有的redis节点彼此互联(PING-PONG机制),内部使用二进制协议优化传输速度和带宽</li><li>节点的fail是通过集群中超过半数的节点检测失效时才生效</li><li>客户端与redis节点直连,不需要中间代理层.客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可</li></ol><p>Cluster模式的具体工作机制：</p><ol><li>在Redis的每个节点上，都有一个插槽（slot），取值范围为0-16383</li><li>当我们存取key的时候，Redis会根据CRC16的算法得出一个结果，然后把结果对16384求余数，这样每个key都会对应一个编号在0-16383之间的哈希槽，通过这个值，去找到对应的插槽所对应的节点，然后直接自动跳转到这个对应的节点上进行存取操作</li><li>为了保证高可用，Cluster模式也引入主从复制模式，一个主节点对应一个或者多个从节点，当主节点宕机的时候，就会启用从节点</li><li>当其它主节点ping一个主节点A时，如果半数以上的主节点与A通信超时，那么认为主节点A宕机了。如果主节点A和它的从节点都宕机了，那么该集群就无法再提供服务了</li></ol><p>Cluster模式集群节点最小配置6个节点(3主3从，因为需要半数以上)，其中主节点提供读写操作，从节点作为备用节点，不提供请求，只作为故障转移使用。</p><h3 id="2-部署演示-1"><a href="#2-部署演示-1" class="headerlink" title="2. 部署演示"></a>2. 部署演示</h3><p>本示例基于Redis 5.0.3版。 </p><p>Cluster模式的部署比较简单，首先在redis.conf中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">port 7100 # 本示例6个节点端口分别为7100,7200,7300,7400,7500,7600 </span><br><span class="line">daemonize yes # r后台运行 </span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis_7100.pid # pidfile文件对应7100,7200,7300,7400,7500,7600 </span><br><span class="line">cluster-enabled yes # 开启集群模式 </span><br><span class="line">masterauth passw0rd # 如果设置了密码，需要指定master密码</span><br><span class="line">cluster-config-file nodes_7100.conf # 集群的配置文件，同样对应7100,7200等六个节点</span><br><span class="line">cluster-node-timeout 15000 # 请求超时 默认15秒，可自行设置</span><br></pre></td></tr></table></figure><p>分别以端口7100,7200,7300,7400,7500,7600 启动六个实例(如果是每个服务器一个实例则配置可一样)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-1 cluster]# redis-server redis_7100.conf</span><br><span class="line">[root@dev-server-1 cluster]# redis-server redis_7200.conf</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然后通过命令将这个6个实例组成一个3主节点3从节点的集群，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster create --cluster-replicas 1 127.0.0.1:7100 127.0.0.1:7200 127.0.0.1:7300 127.0.0.1:7400 127.0.0.1:7500 127.0.0.1:7600 -a passw0rd</span><br></pre></td></tr></table></figure><p>执行结果如图</p><p><img src="/assets/redis-cluster-deploy.png" alt="redis-cluster-deploy"></p><p>可以看到 7100， 7200， 7300 作为3个主节点，分配的slot分别为 0-5460， 5461-10922， 10923-16383， 7600作为7100的slave， 7500作为7300的slave，7400作为7200的slave。</p><p>我们连接7100设置一个值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-1 cluster]# redis-cli -p 7100 -c -a passw0rd</span><br><span class="line">Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.</span><br><span class="line">127.0.0.1:7100&gt; set site blog.jboost.cn</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> Redirected to slot [9421] located at 127.0.0.1:7200</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7200&gt; get site</span><br><span class="line">"blog.jboost.cn"</span><br><span class="line">127.0.0.1:7200&gt;</span><br></pre></td></tr></table></figure><p>注意添加 -c 参数表示以集群模式，否则报 <code>(error) MOVED 9421 127.0.0.1:7200</code> 错误， 以 -a 参数指定密码，否则报<code>(error) NOAUTH Authentication required</code>错误。</p><p>从上面命令看到key为site算出的slot为9421，落在7200节点上，所以有<code>Redirected to slot [9421] located at 127.0.0.1:7200</code>，集群会自动进行跳转。因此客户端可以连接任何一个节点来进行数据的存取。</p><p>通过<code>cluster nodes</code>可查看集群的节点信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:7200&gt; cluster nodes</span><br><span class="line">eb28aaf090ed1b6b05033335e3d90a202b422d6c 127.0.0.1:7500@17500 slave c1047de2a1b5d5fa4666d554376ca8960895a955 0 1584165266071 5 connected</span><br><span class="line">4cc0463878ae00e5dcf0b36c4345182e021932bc 127.0.0.1:7400@17400 slave 5544aa5ff20f14c4c3665476de6e537d76316b4a 0 1584165267074 4 connected</span><br><span class="line">dbbb6420d64db22f35a9b6fa460b0878c172a2fb 127.0.0.1:7100@17100 master - 0 1584165266000 1 connected 0-5460</span><br><span class="line">d4b434f5829e73e7e779147e905eea6247ffa5a2 127.0.0.1:7600@17600 slave dbbb6420d64db22f35a9b6fa460b0878c172a2fb 0 1584165265000 6 connected</span><br><span class="line">5544aa5ff20f14c4c3665476de6e537d76316b4a 127.0.0.1:7200@17200 myself,master - 0 1584165267000 2 connected 5461-10922</span><br><span class="line">c1047de2a1b5d5fa4666d554376ca8960895a955 127.0.0.1:7300@17300 master - 0 1584165268076 3 connected 10923-16383</span><br></pre></td></tr></table></figure><p>我们将7200通过 <code>kill -9 pid</code>杀死进程来验证集群的高可用，重新进入集群执行<code>cluster nodes</code>可以看到7200 fail了，但是7400成了master，重新启动7200，可以看到此时7200已经变成了slave。</p><h3 id="3-Cluster模式的优缺点"><a href="#3-Cluster模式的优缺点" class="headerlink" title="3. Cluster模式的优缺点"></a>3. Cluster模式的优缺点</h3><p>优点：</p><ol><li>无中心架构，数据按照slot分布在多个节点。</li><li>集群中的每个节点都是平等的关系，每个节点都保存各自的数据和整个集群的状态。每个节点都和其他所有节点连接，而且这些连接保持活跃，这样就保证了我们只需要连接集群中的任意一个节点，就可以获取到其他节点的数据。</li><li>可线性扩展到1000多个节点，节点可动态添加或删除</li><li>能够实现自动故障转移，节点之间通过gossip协议交换状态信息，用投票机制完成slave到master的角色转换</li></ol><p>缺点：</p><ol><li>客户端实现复杂，驱动要求实现Smart Client，缓存slots mapping信息并及时更新，提高了开发难度。目前仅JedisCluster相对成熟，异常处理还不完善，比如常见的“max redirect exception”</li><li>节点会因为某些原因发生阻塞（阻塞时间大于 cluster-node-timeout）被判断下线，这种failover是没有必要的</li><li>数据通过异步复制，不保证数据的强一致性</li><li>slave充当“冷备”，不能缓解读压力</li><li>批量操作限制，目前只支持具有相同slot值的key执行批量操作，对mset、mget、sunion等操作支持不友好</li><li>key事务操作支持有线，只支持多key在同一节点的事务操作，多key分布不同节点时无法使用事务功能</li><li>不支持多数据库空间，单机redis可以支持16个db，集群模式下只能使用一个，即db 0</li></ol><p>Redis Cluster模式不建议使用pipeline和multi-keys操作，减少max redirect产生的场景。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了Redis集群方案的三种模式，其中主从复制模式能实现读写分离，但是不能自动故障转移；哨兵模式基于主从复制模式，能实现自动故障转移，达到高可用，但与主从复制模式一样，不能在线扩容，容量受限于单机的配置；Cluster模式通过无中心化架构，实现分布式存储，可进行线性扩展，也能高可用，但对于像批量操作、事务操作等的支持性不够好。三种模式各有优缺点，可根据实际场景进行选择。</p><p>参考：</p><ol><li><a href="https://blog.csdn.net/q649381130/article/details/79931791" target="_blank" rel="noopener">https://blog.csdn.net/q649381130/article/details/79931791</a></li><li><a href="https://www.cnblogs.com/51life/p/10233340.html" target="_blank" rel="noopener">https://www.cnblogs.com/51life/p/10233340.html</a></li><li><a href="https://www.cnblogs.com/chensuqian/p/10538365.html" target="_blank" rel="noopener">https://www.cnblogs.com/chensuqian/p/10538365.html</a></li><li><a href="https://stor.51cto.com/art/201910/604653.htm" target="_blank" rel="noopener">https://stor.51cto.com/art/201910/604653.htm</a>  </li></ol><hr><p>作者：空山新雨，一枚仍在学习路上的大龄码农<br>近期作者写了几十篇技术博客，内容包括Java、Spring Boot、Spring Cloud、Docker，技术管理心得等<br>欢迎关注作者微信公众号：空山新雨的技术空间，一起学习成长  </p><p><img src="/assets/qrcode-05.jpg" alt="微信公众号"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis的持久化方案</title>
      <link href="/redis-persistence.html"/>
      <url>/redis-persistence.html</url>
      
        <content type="html"><![CDATA[<p>Redis支持RDB与AOF两种持久化机制，持久化可以避免因进程异常退出或down机导致的数据丢失问题，在下次重启时能利用之前的持久化文件实现数据恢复。</p><a id="more"></a><h2 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h2><p>RDB持久化即通过创建快照（压缩的二进制文件）的方式进行持久化，保存某个时间点的全量数据。RDB持久化是Redis默认的持久化方式。RDB持久化的触发包括手动触发与自动触发两种方式。</p><p><strong>手动触发</strong></p><ol><li>save， 在命令行执行save命令，将以同步的方式创建rdb文件保存快照，会阻塞服务器的主进程，生产环境中不要用</li><li>bgsave, 在命令行执行bgsave命令，将通过fork一个子进程以异步的方式创建rdb文件保存快照，除了fork时有阻塞，子进程在创建rdb文件时，主进程可继续处理请求</li></ol><p><strong>自动触发</strong></p><ol><li>在redis.conf中配置 <code>save m n</code> 定时触发，如 <code>save 900 1</code>表示在900s内至少存在一次更新就触发</li><li>主从复制时，如果从节点执行全量复制操作，主节点自动执行bgsave生成RDB文件并发送给从节点</li><li>执行debug reload命令重新加载Redis时</li><li>执行shutdown且没有开启AOF持久化</li></ol><p>redis.conf中RDB持久化配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 只要满足下列条件之一，则会执行bgsave命令</span><br><span class="line">save 900 1 # 在900s内存在至少一次写操作</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"># 禁用RBD持久化，可在最后加 save &quot;&quot;</span><br><span class="line"></span><br><span class="line"># 当备份进程出错时主进程是否停止写入操作</span><br><span class="line">stop-writes-on-bgsave-error yes  </span><br><span class="line"># 是否压缩rdb文件 推荐no 相对于硬盘成本cpu资源更贵</span><br><span class="line">rdbcompression no</span><br></pre></td></tr></table></figure><h2 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h2><p>AOF（Append-Only-File）持久化即记录所有变更数据库状态的指令，以append的形式追加保存到AOF文件中。在服务器下次启动时，就可以通过载入和执行AOF文件中保存的命令，来还原服务器关闭前的数据库状态。</p><p>redis.conf中AOF持久化配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 默认关闭AOF，若要开启将no改为yes</span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"># append文件的名字</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line"></span><br><span class="line"># 每隔一秒将缓存区内容写入文件 默认开启的写入方式</span><br><span class="line">appendfsync everysec </span><br><span class="line"></span><br><span class="line"># 当AOF文件大小的增长率大于该配置项时自动开启重写（这里指超过原大小的100%）。</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"></span><br><span class="line"># 当AOF文件大小大于该配置项时自动开启重写</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure><p>AOF持久化的实现包括3个步骤:</p><ol><li>命令追加：将命令追加到AOF缓冲区</li><li>文件写入：缓冲区内容写到AOF文件</li><li>文件保存：AOF文件保存到磁盘</li></ol><p>其中后两步的频率通过appendfsync来配置，appendfsync的选项包括</p><ul><li>always， 每执行一个命令就保存一次，安全性最高，最多只丢失一个命令的数据，但是性能也最低（频繁的磁盘IO）</li><li>everysec，每一秒保存一次，推荐使用，在安全性与性能之间折中，最多丢失一秒的数据</li><li>no， 依赖操作系统来执行（一般大概30s一次的样子），安全性最低，性能最高，丢失操作系统最后一次对AOF文件触发SAVE操作之后的数据</li></ul><p>AOF通过保存命令来持久化，随着时间的推移，AOF文件会越来越大，Redis通过AOF文件重写来解决AOF文件不断增大的问题（可以减少文件的磁盘占有量，加快数据恢复的速度），原理如下：</p><ol><li><p>调用fork，创建一个子进程</p></li><li><p>子进程读取当前数据库的状态来“重写”一个新的AOF文件（这里虽然叫“重写”，但实际并没有对旧文件进行任何读取，而是根据数据库的当前状态来形成指令）</p></li><li><p>主进程持续将新的变动同时写到AOF重写缓冲区与原来的AOF缓冲区中</p></li><li><p>主进程获取到子进程重写AOF完成的信号，调用信号处理函数将AOF重写缓冲区内容写入新的AOF文件中，并对新文件进行重命名，原子地覆盖原有AOF文件，完成新旧文件的替换</p></li></ol><p>AOF的重写也分为手动触发与自动触发</p><ul><li>手动触发： 直接调用bgrewriteaof命令</li><li>自动触发： 根据auto-aof-rewrite-min-size和auto-aof-rewrite-percentage参数确定自动触发时机。其中auto-aof-rewrite-min-size表示运行AOF重写时文件最小体积，默认为64MB。auto-aof-rewrite-percentage表示当前AOF文件大小（aof_current_size）和上一次重写后AOF文件大小（aof_base_size）的比值。自动触发时机为 aof_current_size &gt; auto-aof-rewrite-min-size &amp;&amp;（aof_current_size - aof_base_size）/aof_base_size&gt; = auto-aof-rewrite-percentage</li></ul><h2 id="RDB-vs-AOF"><a href="#RDB-vs-AOF" class="headerlink" title="RDB vs AOF"></a>RDB vs AOF</h2><p>RDB与AOF两种方式各有优缺点。</p><p>RDB的优点：与AOF相比，RDB文件相对较小，恢复数据比较快（原因见数据恢复部分）<br>RDB的缺点：服务器宕机，RBD方式会丢失掉上一次RDB持久化后的数据；使用bgsave fork子进程时会耗费内存。</p><p>AOF的优点： AOF只是追加文件，对服务器性能影响较小，速度比RDB快，消耗内存也少，同时可读性高。<br>AOF的缺点：生成的文件相对较大，即使通过AOF重写，仍然会比较大；恢复数据的速度比RDB慢。</p><h2 id="数据库的恢复"><a href="#数据库的恢复" class="headerlink" title="数据库的恢复"></a>数据库的恢复</h2><p>服务器启动时，如果没有开启AOF持久化功能，则会自动载入RDB文件，期间会阻塞主进程。如果开启了AOF持久化功能，服务器则会优先使用AOF文件来还原数据库状态，因为AOF文件的更新频率通常比RDB文件的更新频率高，保存的数据更完整。</p><p>redis数据库恢复的处理流程如下，</p><p><img src="/assets/redis-restore.png" alt="redis-restore"></p><p>在数据恢复方面，RDB的启动时间会更短，原因有两个：</p><ol><li>RDB 文件中每一条数据只有一条记录，不会像AOF日志那样可能有一条数据的多次操作记录。所以每条数据只需要写一次就行了，文件相对较小。</li><li>RDB 文件的存储格式和Redis数据在内存中的编码格式是一致的，不需要再进行数据编码工作，所以在CPU消耗上要远小于AOF日志的加载。</li></ol><p>但是在进行RDB持久化时，fork出来进行dump操作的子进程会占用与父进程一样的内存，采用的copy-on-write机制，对性能的影响和内存的消耗都是比较大的。比如16G内存，Redis已经使用了10G，这时save的话会再生成10G，变成20G，大于系统的16G。这时候会发生交换，要是虚拟内存不够则会崩溃，导致数据丢失。所以在用redis的时候一定对系统内存做好容量规划。</p><h2 id="RDB、AOF混合持久化"><a href="#RDB、AOF混合持久化" class="headerlink" title="RDB、AOF混合持久化"></a>RDB、AOF混合持久化</h2><p>Redis从4.0版开始支持RDB与AOF的混合持久化方案。首先由RDB定期完成内存快照的备份，然后再由AOF完成两次RDB之间的数据备份，由这两部分共同构成持久化文件。该方案的优点是充分利用了RDB加载快、备份文件小及AOF尽可能不丢数据的特性。缺点是兼容性差，一旦开启了混合持久化，在4.0之前的版本都不识别该持久化文件，同时由于前部分是RDB格式，阅读性较低。</p><p>开启混合持久化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aof-use-rdb-preamble yes</span><br></pre></td></tr></table></figure><p>数据恢复加载过程就是先按照RDB进行加载，然后把AOF命令追加写入。</p><h2 id="持久化方案的建议"><a href="#持久化方案的建议" class="headerlink" title="持久化方案的建议"></a>持久化方案的建议</h2><ol><li>如果Redis只是用来做缓存服务器，比如数据库查询数据后缓存，那可以不用考虑持久化，因为缓存服务失效还能再从数据库获取恢复。</li><li>如果你要想提供很高的数据保障性，那么建议你同时使用两种持久化方式。如果你可以接受灾难带来的几分钟的数据丢失，那么可以仅使用RDB。</li><li>通常的设计思路是利用主从复制机制来弥补持久化时性能上的影响。即Master上RDB、AOF都不做，保证Master的读写性能，而Slave上则同时开启RDB和AOF（或4.0以上版本的混合持久化方式）来进行持久化，保证数据的安全性。</li></ol><br>认真生活，快乐分享欢迎关注微信公众号：空山新雨的技术空间![微信公众号](/assets/qrcode-05.jpg) ]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud（八）：使用Spring Cloud Bus来实现配置动态更新</title>
      <link href="/springcloud-8.html"/>
      <url>/springcloud-8.html</url>
      
        <content type="html"><![CDATA[<p>使用Spring Cloud Config我们能实现服务配置的集中化管理，在服务启动时从Config Server获取需要的配置属性。但如果在服务运行过程中，我们需要将某个配置属性进行修改，比如将验证码的失效时间从五分钟调整为十分钟，如何将这个更新在服务端不重启服务就能动态生效，是本文讨论的内容。</p><a id="more"></a><h2 id="Spring-Cloud-Bus"><a href="#Spring-Cloud-Bus" class="headerlink" title="Spring Cloud Bus"></a>Spring Cloud Bus</h2><p>Spring Cloud Bus可以理解为Spring Cloud体系架构中的消息总线，通过一个轻量级的Message Broker来将分布式系统中的节点连接起来。可用来实现广播状态更新（如配置更新），或其它管理指令。<br>Spring Cloud Bus 就像是一个分布式的Spring Boot Actuator， 目前提供了两种类型的消息队列中间件支持：RabbitMQ与Kafka（对应的pom依赖分别为spring-cloud-starter-bus-amqp， spring-cloud-starter-bus-kafka）。</p><p>Spring Cloud 在spring-cloud-context中添加了两个actuator管理接口（POST请求）： <code>/actuator/env</code> 与 <code>/actuator/refresh</code>， 前者可用于更新当前服务实例Environment对象中的配置属性，后者可用于刷新当前服务实例的配置信息。</p><p>Spring Cloud Bus也提供了两个对应的接口</p><ol><li><code>/actuator/bus-env</code>，相对于<code>/actuator/env</code> ， 使用键值对更新每个实例的Environment，默认不暴露，需配置management.endpoints.web.exposure.include=bus-env 来开放接口访问</li><li><code>/actuator/bus-refresh</code>，相对于<code>/actuator/refresh</code>，对每个实例，清空<code>RefreshScope</code>缓存，重新绑定@ConfigurationProperties， 默认不暴露，可通过配置<br>management.endpoints.web.exposure.include=bus-refresh 来开放接口访问</li></ol><p>综上，<code>/actuator/env</code> 与 <code>/actuator/refresh</code> 是针对单个服务实例修改或刷新其配置信息，而 <code>/actuator/bus-env</code> 与 <code>/actuator/bus-refresh</code> 则是借助于Spring Cloud Bus的消息机制作用于分布式系统中的所有服务实例，因此前面有Spring Cloud Bus 就像是一个分布式的Spring Boot Actuator的说法。</p><p>使用Spring Cloud Bus来实现服务配置动态更新的结构图如下</p><p><img src="/assets/spring-cloud-bus.png" alt="spring-cloud-bus"></p><ol><li>更新配置仓库中的配置文件，push到远程Git仓库</li><li>远程Git仓库通过Webhook调用配置服务器的通知更新接口</li><li>配置服务器发送配置更新消息到消息总线</li><li>其它服务节点监听到配置服务器发送的配置更新消息</li><li>其它服务节点向配置服务器发送拉取最新配置的请求</li><li>配置服务器向配置仓库拉取最新的配置返回给其它服务节点</li></ol><h2 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h2><p>我们还是以前面的springcloud-config， springcloud-eureka， springcloud-eureka-client三个项目来完成本文的案例演示。<a href="https://github.com/ronwxy/springcloud-demos" target="_blank" rel="noopener">源码地址</a></p><h3 id="使用Actuator"><a href="#使用Actuator" class="headerlink" title="使用Actuator"></a>使用Actuator</h3><p>在不引入Spring Cloud Bus的情况下，我们可以通过Spring Cloud提供的actuator接口来实现单个实例的配置动态更新。</p><p>依次启动springcloud-eureka， springcloud-config， springcloud-eureka-client项目，然后修改springcloud-eureka-client的启动端口，将8080改为8081，再启动一个springcloud-eureka-client的服务实例。</p><p>springcloud-eureka-client 的测试接口代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;app&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String app;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, welcome to spring cloud 2. env: "</span> + env.getProperty(<span class="string">"app"</span>) + <span class="string">", value: "</span> + app;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时依次请求两个实例的hello接口，得到结果如下</p><p><img src="/assets/springcloudbus-test1.png" alt="springcloudbus-test1"></p><p><img src="/assets/springcloudbus-test2.png" alt="springcloudbus-test2"></p><p>我们通过<code>/actuator/env</code>接口来修改端口8080实例的属性app的值，使用postman操作如图</p><p><img src="/assets/springcloudbus-test3.png" alt="springcloudbus-test3"></p><p>此时再请求接口返回结果如下</p><p><img src="/assets/springcloudbus-test4.png" alt="springcloudbus-test4"></p><p>可以看到Environment对象中app属性的值已更新，但是 @Value注解的属性值未变，可见 <code>/actuator/env</code> 接口只是更新了Environment对象，并不负责刷新其它方式引用的属性值。此时请求另一个端口为8081的实例接口，其属性值都未更新，也可见 <code>/actuator/env</code> 只作用于当前实例本身。</p><p>如果要让8080实例的@Value属性也动态更新，则可再调用<code>/actuator/refresh</code>接口，如图</p><p><img src="/assets/springcloudbus-test5.png" alt="springcloudbus-test5"></p><p>此时再请求测试接口，得到结果如下（@Value注解的属性也已经更新了）</p><p><img src="/assets/springcloudbus-test6.png" alt="springcloudbus-test6"></p><h3 id="使用Spring-Cloud-Bus"><a href="#使用Spring-Cloud-Bus" class="headerlink" title="使用Spring Cloud Bus"></a>使用Spring Cloud Bus</h3><p>前面我们使用 <code>/actuator/env</code> 与 <code>/actuator/refresh</code> 两个接口可以实现单个服务实例配置的动态更新，但在微服务架构中，服务实例可能达几十甚至几百个，一个个调用来做动态更新就有点太不方便了。这时就该Spring Cloud Bus登场了。</p><p>1.添加依赖与配置</p><p>在springcloud-config， 与springcloud-eureka-client两个项目中，添加spring cloud bus的依赖与配置。<br>在pom.xml文件中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在application.yml配置文件中添加RabbitMQ的相关配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">rabbitmq</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">passw0rd</span></span><br></pre></td></tr></table></figure><p>2.依次启动springcloud-eureka， springcloud-config， springcloud-eureka-client项目，并以8081端口再启动一个springcloud-eureka-client的服务实例。</p><p>3.我们使用postman对配置服务器调用<code>/actuator/bus-env</code>接口，</p><p><img src="/assets/springcloudbus-test7.png" alt="springcloudbus-test7"></p><p>请求两个服务实例的测试接口，得到结果</p><p><img src="/assets/springcloudbus-test9.png" alt="springcloudbus-test9"></p><p><img src="/assets/springcloudbus-test8.png" alt="springcloudbus-test8"></p><p>两个实例的Environment对象都已经更新，如果要将@Value注解的属性也更新，则可再调用配置服务器的<code>/actuator/bus-refresh</code>接口。</p><p><code>/actuator/bus-env</code>接口是直接更新的内存Environment实例属性，如果服务重启，则又还原到之前的配置了， 所以还是需要借助配置仓库来永久更新。配置更新后还需要手动调用接口使其生效？DevOps时代了，能自动化的就自动化吧，我们可以借助Git的webhook机制来实现自动化。</p><h3 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h3><p>本文开头的“使用Spring Cloud Bus来实现服务配置动态更新的结构图”已经示例了使用Git仓库的webhook来触发自动更新配置的流程。但是在Git（如Github）中，我们不能直接使用<code>/actuator/bus-refresh</code>接口来作为webhook（因为接口协议不一致，会出现解析异常），也有人通过提供自己的接口来作为webhook，在自己接口中再转发请求到<code>/actuator/bus-refresh</code>来实现。但实际上，spring-cloud-config-monitor已经提供了对Git webhook的支持。</p><p>如下图，spring-cloud-config-monitor提供了对Github，Gitlab，Gitee，BitBucket等的支持</p><p><img src="/assets/spring-cloud-config-monitor.png" alt="springcloud-config-monitor"></p><p>1.在配置服务器springcloud-config的pom.xml文件中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-monitor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.在配置仓库的设置页面配置webhook，比如Github的配置如图</p><p><img src="/assets/config-github-webhook.png" alt="config-github-webhook"></p><p>Payload URL 配置为配置服务器的monitor接口地址，path参数必须。如果你的配置服务器在内网，比如做本地测试时，还需要实现一下内网穿透（如frp）。<br>在配置仓库项目中修改配置属性，提交代码，Github webhook就会触发自动更新，上图下方红色框为触发自动更新的记录。</p><h3 id="自动更新配置未生效排查"><a href="#自动更新配置未生效排查" class="headerlink" title="自动更新配置未生效排查"></a>自动更新配置未生效排查</h3><p>如果出现Github触发了自动更新，但服务的配置更新未生效的情况，则需要查看webhook的匹配规则与服务实例的ServiceID是否匹配，webhook的匹配规则为 <code>spring.application.name:spring.cloud.config.profile:**</code>，服务实例的ServiceID可通过<code>spring.cloud.bus.id</code>配置，如果没有配置，则默认为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;vcap.application.name:<span class="variable">$&#123;spring.application.name:application&#125;</span>&#125;:<span class="variable">$&#123;vcap.application.instance_index:$&#123;spring.application.index:$&#123;local.server.port:$&#123;server.port:0&#125;</span>&#125;&#125;&#125;:<span class="variable">$&#123;vcap.application.instance_id:$&#123;random.value&#125;</span>&#125;</span></span><br></pre></td></tr></table></figure><p>遵循app:index:id的格式，</p><ul><li>app：如果vcap.application.name存在，使用vcap.application.name，否则使用spring.application.name，默认值为application</li><li>index：优先使用vcap.application.instance_index，如果不存在则依次使用spring.application.index、local.server.port、server.port， 默认值为0</li><li>id：如果vcap.application.instance_id存在，使用vcap.application.instance_id，否则给一个随机值</li></ul><p>我们可以在服务项目中打开spring cloud bus的debug日志</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">org.springframework.cloud.bus:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>通过DefaultBusPathMatcher的debug日志来查看是否匹配，如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEBUG 286196 --- [7O8XC9KNWbyDA-1] o.s.cloud.bus.DefaultBusPathMatcher      : In match: hello-service:8081:c96f04c81dfce6dffaa9d116811d127c, hello-service:8081:c96f04c81dfce6dffaa9d116811d127c</span><br></pre></td></tr></table></figure><p>如果没有匹配则可以按照webhook的匹配规则设置<code>spring.cloud.bus.id</code>值或<code>vcap.application.instance_index</code>值，如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hello-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">config-server</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">$&#123;spring.profiles.active:default&#125;</span></span><br><span class="line">    <span class="attr">bus:</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.cloud.config.profile&#125;:$&#123;random.value&#125;</span></span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="attr">vcap:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">instance_index:</span> <span class="string">$&#123;spring.cloud.config.profile&#125;</span></span><br></pre></td></tr></table></figure><p>配置更新未生效的另一个情况是查看是否用了@RefreshScope注解。</p><h2 id="RefreshScope"><a href="#RefreshScope" class="headerlink" title="@RefreshScope"></a>@RefreshScope</h2><p>细心的人会发现本文开头的测试接口类上加了@RefreshScope注解。 @RefreshScope是Spring Cloud提供的用来实现配置、实例热加载的注解。被@RefreshScope修饰的@Bean都是延迟加载的，即在第一次访问（调用方法）时才会被初始化，并且这些bean存于缓存中。当收到配置更新的消息时，缓存中的@RefreshScope bean会被清除，这样下次访问时将会重新创建bean，此时使用的就是最新的配置信息，从而实现配置的热加载。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文分别示例了使用spring boot actuator与spring cloud bus来实现服务配置的更新及两者之间的区别， spring cloud bus一定程度上像是一个分布式的spring boot actuator。同时演示了使用webhook与spring cloud bus，monitor结合来实现配置自动更新的具体流程及可能遇到的问题。</p><br>认真生活，快乐分享欢迎关注微信公众号：空山新雨的技术空间![微信公众号](/assets/qrcode-05.jpg) ]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud（七）：服务网关zuul过滤器</title>
      <link href="/springcloud-7.html"/>
      <url>/springcloud-7.html</url>
      
        <content type="html"><![CDATA[<p>上文介绍了Zuul的基本使用与路由功能，本文接着介绍Zuul的核心概念 —— Zuul过滤器（filter）。</p><p>Zuul的功能基本通过Zuul过滤器来实现（类比于Struts的拦截器，只是Struts拦截器用到责任链模式，Zuul则是通过FilterProcessor来控制执行），在不同的阶段，通过不同类型的过滤器来实现相应的功能。</p><a id="more"></a><h2 id="Zuul过滤器"><a href="#Zuul过滤器" class="headerlink" title="Zuul过滤器"></a>Zuul过滤器</h2><h3 id="过滤器类型"><a href="#过滤器类型" class="headerlink" title="过滤器类型"></a>过滤器类型</h3><p>zuul的过滤器根据对HTTP请求的不同处理阶段包括如下四种类型</p><ul><li>pre ：在请求转发到后端目标服务之前执行，一般用于请求认证、确定路由地址、日志记录等</li><li>route ：转发请求，使用Apache HttpClient 或 Ribbon来构造对目标服务的请求</li><li>post ：在目标服务返回结果后对结果进行处理，比如添加响应头、收集统计性能数据等</li><li>error ：在请求处理的整个流程中如果出现错误，则会触发error过滤器执行，对错误进行处理</li></ul><p>客户端请求经过zuul过滤器处理的流程如下图</p><p><img src="/assets/zuul-filter.png" alt="zuul-filter"></p><p>zuul使用<code>RequestContext</code>来在过滤器之间传递数据，数据存于每个request的ThreadLocal，包含请求路由到哪里，错误，HttpServletRequest，HttpServletResponse 等这些数据都存储于RequestContext中。RequestContext 扩展了ConcurrentHashMap，所以我们可以根据需要将信息存于context中进行传递。</p><h3 id="EnableZuulProxy-vs-EnableZuulServer"><a href="#EnableZuulProxy-vs-EnableZuulServer" class="headerlink" title="@EnableZuulProxy vs @EnableZuulServer"></a>@EnableZuulProxy vs @EnableZuulServer</h3><p>zuul提供了两个注解 @EnableZuulProxy， @EnableZuulServer，来启用不同的过滤器集合。@EnableZuulProxy 启用的过滤器 是@EnableZuulServer 的超集， 它包含了@EnableZuulServer 的所有过滤器，proxy主要多了一些提供路由功能的过滤器（可见@EnableZuulServer 不提供路由功能，作为server模式而不是代理模式运行）</p><p>@EnableZuulServer 注解启用的过滤器包括</p><table><thead><tr><th align="center">filter类型</th><th align="center">实现类</th><th align="center">filter顺序值</th><th align="center">功能说明</th></tr></thead><tbody><tr><td align="center">pre</td><td align="center">ServletDetectionFilter</td><td align="center">-3</td><td align="center">检测请求是否通过Spring Dispatcher，并在RequestContext 中添加一个key为isDispatcherServletRequest， 值为true（不通过则为false）的属性</td></tr><tr><td align="center">pre</td><td align="center">FormBodyWrapperFilter</td><td align="center">-1</td><td align="center">解析Form data，为请求的下游进行重新编码</td></tr><tr><td align="center">pre</td><td align="center">DebugFilter</td><td align="center">1</td><td align="center">如果请求参数设置了debug，则会将RequestContext.setDebugRouting() ，RequestContext.setDebugRequest() 设置为ture</td></tr><tr><td align="center">route</td><td align="center">SendForwardFilter</td><td align="center">500</td><td align="center">使用RequestDispatch servlet来转发请求，转发地址存于RequestContext中key为FilterConstants.FORWARD_TO_KEY的属性中，对于转发到当前应用的接口比较有用</td></tr><tr><td align="center">post</td><td align="center">SendResponseFilter</td><td align="center">1000</td><td align="center">将代理请求的响应内容写到当前的响应中</td></tr><tr><td align="center">error</td><td align="center">SendErrorFilter</td><td align="center">0</td><td align="center">如果RequestContext.getThrowable() 不为空，则会转发到/error，可以通过error.path来改变默认的转发路径/error</td></tr></tbody></table><p>@EnableZuulProxy 除了上面的过滤器，还包含如下过滤器</p><table><thead><tr><th align="center">filter类型</th><th align="center">实现类</th><th align="center">filter顺序值</th><th align="center">功能说明</th></tr></thead><tbody><tr><td align="center">pre</td><td align="center">PreDecorationFilter</td><td align="center">5</td><td align="center">确定路由到哪里，如何路由，依赖提供的RouteLocator，同时也为下游请求设置多个与proxy相关的header</td></tr><tr><td align="center">route</td><td align="center">RibbonRoutingFilter</td><td align="center">10</td><td align="center">使用ribbon，hystrix，以及内嵌的http client来发送请求，可在RequestContext中通过FilterConstants.SERVICE_ID_KEY 来找到路由Service的ID</td></tr><tr><td align="center">route</td><td align="center">SimpleHostRoutingFilter</td><td align="center">100</td><td align="center">使用Apache httpClient来发送请求到一个预先确定的url，可通过RequestContext.getRouteHost()来获取urls</td></tr></tbody></table><p>由上可见@EnableZuulServer 注解并不包含往后端服务负载均衡地路由请求的代理功能，@EnableZuulProxy的PreDecorationFilter，RibbonRoutingFilter过滤器才能担当此任。PreDecorationFilter通过提供的DiscoveryClientRouteLocator 从 DiscoveryClient（如Eureka）与属性文件中加载路由定义， 为每个serviceId创建一个route，新服务添加进来，路由也会动态刷新。路由确定了，在RibbonRoutingFilter 中通过ribbon与hystrix结合来向后端目标服务发起请求，并进行负载均衡。过滤器的顺序值表示在同类型过滤器中的执行顺序，值越小越先执行。</p><h2 id="自定义Zuul过滤器"><a href="#自定义Zuul过滤器" class="headerlink" title="自定义Zuul过滤器"></a>自定义Zuul过滤器</h2><p>自定义的zuul过滤器与框架自带过滤器类似，包括四部分</p><ol><li>过滤器类型，包括pre， route， post</li><li>过滤器顺序，定义在同类型过滤器中的执行顺序，数值越小越先执行</li><li>是否执行过滤，通过一些条件判断来确定是否执行该过滤器</li><li>过滤器执行体，定义具体执行的操作</li></ol><p>比如我们需要在Http请求头中设置一个值，供请求链路的下游环节访问，则可以自定义一个过滤器如下，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReqIdPreFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_DECORATION_FILTER_ORDER - <span class="number">1</span>; <span class="comment">//在PreDecorationFilter过滤器之前执行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        ctx.addZuulRequestHeader(<span class="string">"reqId"</span>, UUID.randomUUID().toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在请求的后续环节，比如后端服务的filter或接口中，则可直接从HttpServletRequest 获取该header值，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"hello/reqId"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getReqId</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello-service返回："</span> + request.getHeader(<span class="string">"reqId"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Zuul的错误处理"><a href="#Zuul的错误处理" class="headerlink" title="Zuul的错误处理"></a>Zuul的错误处理</h2><p>在zuul过滤器的生命周期中，如果任何一个环节抛出异常，则error过滤器会被执行，SendErrorFilter只有当RequestContext.getThrowable()不为null时才会运行，会设置javax.servlet.error.* 属性到request中，然后将请求转发到spring boot的error page， 默认为BasicErrorController实现的/error接口。 有时候我们需要将返回响应格式进行统一，而默认的/error接口实现可能不满足要求，则可以自定义/error接口。需要实现ErrorController 接口以使默认的BasicErrorController 失效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulErrorController</span> <span class="keyword">implements</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/error"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">error</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; result = Maps.newHashMap();</span><br><span class="line">        result.put(<span class="string">"code"</span>, request.getAttribute(<span class="string">"javax.servlet.error.status_code"</span>).toString());</span><br><span class="line">        result.put(<span class="string">"message"</span>, request.getAttribute(<span class="string">"javax.servlet.error.message"</span>).toString());</span><br><span class="line">        result.put(<span class="string">"exception"</span>, request.getAttribute(<span class="string">"javax.servlet.error.exception"</span>).toString());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Zuul的服务降级"><a href="#Zuul的服务降级" class="headerlink" title="Zuul的服务降级"></a>Zuul的服务降级</h2><p>当调用服务出现超时或异常时，在zuul侧可提供回调进行服务降级，返回默认响应结果，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFallbackProvider</span> <span class="keyword">implements</span> <span class="title">FallbackProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">//指定这个回调针对的route Id，如果对所有route，则返回* 或null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">fallbackResponse</span><span class="params">(String route, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> HystrixTimeoutException) &#123;</span><br><span class="line">            <span class="keyword">return</span> response(HttpStatus.GATEWAY_TIMEOUT);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> response(HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ClientHttpResponse <span class="title">response</span><span class="params">(<span class="keyword">final</span> HttpStatus status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClientHttpResponse() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> HttpStatus <span class="title">getStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> status;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRawStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> status.value();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getStatusText</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> status.getReasonPhrase();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> InputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                Map&lt;String, String&gt; result = Maps.newLinkedHashMap();</span><br><span class="line">                result.put(<span class="string">"code"</span>, <span class="string">""</span> + status.value());</span><br><span class="line">                String msg = HttpStatus.GATEWAY_TIMEOUT == getStatusCode() ? <span class="string">"请求服务超时"</span> : <span class="string">"服务器内部错误"</span>;</span><br><span class="line">                result.put(<span class="string">"message"</span>, msg);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(<span class="keyword">new</span> ObjectMapper().writeValueAsString(result).getBytes());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> HttpHeaders <span class="title">getHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">                headers.setContentType(MediaType.APPLICATION_JSON);</span><br><span class="line">                <span class="keyword">return</span> headers;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则当服务请求失败时，统一返回如下格式的响应</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"500"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"服务器内部错误"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要对Zuul过滤器相关内容及自定义使用进行了介绍，同时对过滤器运行过程中异常的处理及服务调用失败的降级回调进行了简单说明。出于篇幅，开发过程中更具体的细节我们后续再继续探讨。</p><br>认真生活，快乐分享欢迎关注微信公众号：空山新雨的技术空间![微信公众号](/assets/qrcode-05.jpg) ]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud（六）：服务网关zuul</title>
      <link href="/springcloud-6.html"/>
      <url>/springcloud-6.html</url>
      
        <content type="html"><![CDATA[<p>通过前面几篇文章的介绍，Spring Cloud微服务架构可通过Eureka实现服务注册与发现，通过Ribbon或Feign来实现服务间的负载均衡调用，通过Hystrix来为服务调用提供服务降级、熔断机制避免雪崩效应，通过Spring Cloud Config实现服务配置的集中化管理。微服务架构内部管理的基本组件差不多都已涵盖了，但是我们的服务最终是需要提供给客户端访问的，客户端如何来访问这些微服务，就需要引入一个叫服务网关的组件了。</p><a id="more"></a><h2 id="zuul"><a href="#zuul" class="headerlink" title="zuul"></a>zuul</h2><p>zuul是netflix提供的一个基于JVM的路由与服务端负载均衡器。它在客户端与后端服务之间建立了一道关卡，客户端所有请求必须经过zuul转发到后端对应的微服务，返回结果再经由zuul返回给客户端。zuul与Eureka，Config组合的基本结构如图</p><p><img src="/assets/zuul.png" alt="zuul"></p><p>zuul作为Eureka Client从Eureka Server获取其它微服务的配置信息，从而可以将客户端请求通过Service ID来负载均衡地转发到后端的服务实例，同时也作为Config Client从Config Server获取自身所需的配置信息。</p><p>在netflix内部，zuul被用来实现安全认证、动态路由、反向代理、服务迁移、服务削峰、压力测试、金丝雀测试（灰度发布测试）等功能。本文介绍zuul的基本使用与路由规则。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>创建maven项目 springcloud-zuul</p><ol><li>pom.xml中引入依赖 <code>spring-cloud-starter-netflix-zuul</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>application.yml配置文件中添加必要的配置，主要是eureka客户端配置</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zuul-server</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8765</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><ol start="3"><li>启动类添加注解 <code>@EnableZuulProxy</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一如既往的简单，Spring Cloud之所以流行就是因为它基于Spring Boot将一些通用的功能进行了开箱即用的封装，使得开发者简单几步就能快速集成一个微服务框架。</p><p>依次启动前文所创建的springcloud-eureka, springcloud-config, springcloud-eureka-client, springcloud-zuul，<a href="http://localhost:8765/hello-service/hello" target="_blank" rel="noopener">http://localhost:8765/hello-service/hello</a> 返回 <code>Hello, welcome to spring cloud. env: hello-service-dev, value: hello-service-dev</code> 可见通过zuul的请求转发到了hello-service。</p><p>为了验证zuul转发请求具备负载均衡的能力，可以将springcloud-eureka-client 中的hello接口返回值做一些调整，并改变端口重启一个实例，再次请求<a href="http://localhost:8765/hello-service/hello" target="_blank" rel="noopener">http://localhost:8765/hello-service/hello</a> 将能看到返回结果在两者之间切换。</p><p>以上配置文件中并没有加任何路由配置，zuul是怎么将请求正确转发到对应的微服务的呢？ 请看下面的路由规则。</p><h2 id="路由规则"><a href="#路由规则" class="headerlink" title="路由规则"></a>路由规则</h2><ol><li>默认路由规则</li></ol><p>zuul提供了默认的路由规则，不需要任何配置就会默认将注册的服务进行路径映射。我们可以通过actuator提供的接口来查看，在application.yml中添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><p>放开actuator的其它接口访问（默认只放开了/info 与/health接口）， 浏览器中访问 <a href="http://localhost:8765/actuator/routes，" target="_blank" rel="noopener">http://localhost:8765/actuator/routes，</a> 可以看到返回的zuul默认的路由映射关系</p><p><img src="/assets/zuul-routes.png" alt="zuul-route"></p><p>zuul默认将 /service-id/** 的请求路由到Service ID（即spring.application.name的值）为 service-id的服务，如 /hello-service/hello，将转发到hello-service服务的/hello接口。</p><ol start="2"><li>自定义路由规则</li></ol><p>我们看到zuul的默认路由规则将config-server也映射出来了，对于这类内部服务我们不希望暴露，则可以通过 <code>zuul.ignoredServices</code> 来进行屏蔽，在application.yml配置文件中添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">ignored-services:</span> <span class="string">"config-server"</span></span><br></pre></td></tr></table></figure><p>重启，再次查看<a href="http://localhost:8765/actuator/routes" target="_blank" rel="noopener">http://localhost:8765/actuator/routes</a> ， config-server已经被屏蔽了。</p><p>通过zuul.routes可添加自定义路由，可以有 <code>zuul.routes.{route-name}.path</code> + <code>zuul.routes.{route-name}.serviceId或url</code> 或 <code>zuul.routes.{service-id}: path</code> 两个格式， 如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">ignored-services:</span> <span class="string">"config-server"</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">hello:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/hi/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">hello-service</span></span><br><span class="line">    <span class="attr">hello-service:</span> <span class="string">/hi2/**</span></span><br><span class="line">    <span class="attr">jboost:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/jboost/**</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">http://blog.jboost.cn</span></span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:8765/hi/hello" target="_blank" rel="noopener">http://localhost:8765/hi/hello</a>  或 <a href="http://localhost:8765/hi2/hello" target="_blank" rel="noopener">http://localhost:8765/hi2/hello</a> 都将路由到 hello-service的hello接口，访问 <a href="http://localhost:8765/jboost/" target="_blank" rel="noopener">http://localhost:8765/jboost/</a> 将访问到jboost博客首页。添加自定义路由后，默认路由仍然存在， 你仍然可以通过 <a href="http://localhost:8765/hello-service/hello" target="_blank" rel="noopener">http://localhost:8765/hello-service/hello</a> 来访问 hello-service的hello接口。</p><p>默认的路由规则将Service ID作为匹配路径，看起来有点长，我们想将匹配路径缩短一点，比如hello-service的匹配路径想改为 <code>/hello/**</code>， 而不是<code>/hello-service/**</code>， 如果像上面配置，一个微服务系统可能涉及几十甚至上百个服务，那配置起来将是一场噩梦。别急， zuul提供了 ServiceRouteMapper 接口来解决这一问题，其中 PatternServiceRouteMapper 可以基于正则表达式来进行路由抽取。</p><p>创建一个配置类，注入一个 PatternServiceRouteMapper 的bean，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PatternServiceRouteMapper <span class="title">serviceRouteMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PatternServiceRouteMapper(</span><br><span class="line">                <span class="string">"(?&lt;name&gt;^.+)-(?&lt;postfix&gt;.+$)"</span>,</span><br><span class="line">                <span class="string">"$&#123;name&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该实现将会对所有服务的路由进行调整，service id 形如 name-postfix的匹配路径为 <code>/name/**</code>， 如hello-service 匹配 <code>/hello/**</code>。 如果正则表达式匹配失败，则还是以默认规则进行路由，如果匹配成功，则默认规则失效，但在配置文件中定义的路由仍然有效。上述验证中，你都可以通过 <a href="http://localhost:8765/actuator/routes" target="_blank" rel="noopener">http://localhost:8765/actuator/routes</a> 来查看当前生效的路由。</p><h2 id="其它配置"><a href="#其它配置" class="headerlink" title="其它配置"></a>其它配置</h2><p>zuul使用Ribbon来定位服务实例，所有请求都在hystrix command里执行，所以在zuul中可以添加Ribbon， Hystrix相关配置（具体参考前面Ribbon、Hystrix相关文章）</p><ul><li>zuul.ignoredPatterns 对某些路径进行屏蔽，如 <code>/**/admin/**</code> 将会屏蔽所有路径中包含admin的接口访问</li><li>zuul.sensitiveHeaders 对一些header进行过滤，不传递给后端服务，默认包括Cookie,Set-Cookie,Authorization， 如果要让zuul发送所有header，则需要显式地将sensitiveHeaders置空值</li><li>zuul.prefix 为所有映射添加前缀，如/api， 这样route里配的 <code>/myusers/**</code> 就能匹配客户端请求的<code>/api/myusers/**</code>。默认zuul代理在转发时，前缀会被移除，通过设置<code>zuul.stripPrefix=false</code>可不移除</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文简单介绍了zuul的基本使用与路由规则，更高阶的应用我们后面继续。</p><br>认真生活，快乐分享欢迎关注微信公众号：空山新雨的技术空间![微信公众号](/assets/qrcode-05.jpg) ]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud（五）：服务配置管理中心</title>
      <link href="/springcloud-5.html"/>
      <url>/springcloud-5.html</url>
      
        <content type="html"><![CDATA[<p>Spring Cloud Config为微服务提供了集中化的配置管理，可以通过git仓库的形式来对各个服务的配置属性进行管理维护，在配置更新时，可通过消息总线的方式实现动态更新，而不需要重启服务。</p><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>Spring Cloud Config属于CS架构，包括Config Server与Config Client， Config Server从配置存储库（可以是git，svn，jdbc数据库，或本地文件系统）获取配置属性，Config Client通过http请求对应的配置属性。如图</p><p><img src="/assets/configserver.png" alt="config-server"></p><p>Config Server在客户端请求配置信息时，从git获取配置信息（可以配置为启动时即从git获取）返回给客户端，当配置发生更新时，可通过webhook的方式通知到Config Server，Config Server发出RefreshRemoteApplicationEvent 事件，通知客户端更新配置信息。</p><h1 id="Config-Server"><a href="#Config-Server" class="headerlink" title="Config Server"></a>Config Server</h1><p>搭建一个Config Server很简单。</p><ol><li>首先pom.xml中引入依赖，</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加入Eureka Client是使配置服务作为一个微服务注册到Eureka被其它微服务（作为Config Client）发现。</p><ol start="2"><li>然后application.yml中添加配置，<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/ronwxy/jboost-config</span></span><br><span class="line">          <span class="attr">searchPaths:</span> <span class="string">'&#123;application&#125;'</span>  <span class="comment"># 按应用名称分文件夹目录存储配置文件，只在应用名所在目录及顶层目录下寻找配置文件</span></span><br><span class="line">          <span class="attr">cloneOnStart:</span> <span class="literal">true</span> <span class="comment"># 启动时就获取配置，否则只有当客户端请求时才去获取配置</span></span><br><span class="line">          <span class="attr">basedir:</span> <span class="string">D:\config</span> <span class="comment">#本地缓存路径</span></span><br><span class="line">          <span class="attr">forcePull:</span> <span class="literal">true</span>  <span class="comment"># 在本地配置被污染（篡改）时， 强制拉取远程配置覆盖</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">$&#123;spring.profiles.active:default&#125;</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure></li></ol><p>上述配置使Config Server从github仓库获取配置信息，searchPaths: ‘{application}’ 可以将每个服务的配置属性文件放入仓库的同名文件夹下。 注意这里的引号是必须的，否则因为不符合yaml文件语法导致不生效。</p><p>定期刷新： spring.cloud.config.server.git.refreshRate 单位秒， 默认为0， 表示每次请求时，config server都会从git 仓库获取更新的配置。<br>本地缓存： 默认本地副本存在临时目录中，有些操作系统可能会定时清理临时目录，导致问题，设置配置的本地目录：spring.cloud.config.server.git.basedir</p><ol start="3"><li>最后启动类上添加注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigServerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成以上三步一个简单的Config Server就搭建完成了，启动项目，访问 <a href="http://localhost:8888/hello-service/dev" target="_blank" rel="noopener">http://localhost:8888/hello-service/dev</a> 可获取到仓库 hello-service 目录下对应profile为dev的配置属性文件hello-service-dev.yml与默认配置文件（包括同目录下application.yml与仓库根目录下的application.yml, application-dev.yml配置文件）</p><p>通过url获取配置的访问方式：</p><ul><li>/{application}/{profile}[/{label}]</li><li>/{application}-{profile}.yml</li><li>/{label}/{application}-{profile}.yml</li><li>/{application}-{profile}.properties</li><li>/{label}/{application}-{profile}.properties</li></ul><p>其中 application是spring.config.name的值，profile可以是以逗号分隔的列表，label是git的分支，默认是master。</p><p>Config Server的高可用：</p><ol><li>起多个实例，客户端配置spring.cloud.config.uri 以逗号隔开配多个uri</li><li>或将实例注册到服务注册中心</li></ol><p>对于500,401等异常，客户端不会重试其它实例， 只在实例挂掉或连接超时时，才会重试其它实例</p><h1 id="Config-Client"><a href="#Config-Client" class="headerlink" title="Config Client"></a>Config Client</h1><p>客户端以springcloud-eureka-client项目为基础进行改造</p><ol><li>在pom.xml中添加config相关依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加actuator可以暴露相关接口，如/env 来查看配置属性加载情况，springboot2中actuator默认只开放/info /health 两个接口，可通过如下配置放开（生产环境根据需要调整）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><ol start="2"><li>添加bootstrap.yml配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hello-service</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">serviceId:</span> <span class="string">config-server</span></span><br><span class="line">      <span class="attr">failfast:</span> <span class="literal">true</span> <span class="comment"># 在启动时如果连不上config server，则启动失败</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">$&#123;spring.profiles.active:default&#125;</span></span><br></pre></td></tr></table></figure><p>依次启动服务注册中心 springcloud-eureka， 配置管理服务 springcloud-config， 配置客户端 springcloud-eureka-client， 访问 <a href="http://localhost:8080/actuator/env" target="_blank" rel="noopener">http://localhost:8080/actuator/env</a> 可看到配置客户端加载的配置信息。在配置客户端启动时，控制台也会打印从配置服务获取配置的相关信息，如 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Located property source: OriginTrackedCompositePropertySource &#123;name='configService', propertySources=[MapPropertySource &#123;name='configClient'&#125;, OriginTrackedMapPropertySource &#123;name='https://github.com/ronwxy/jboost-config/hello-service/hello-service-dev.yml'&#125;, OriginTrackedMapPropertySource &#123;name='https://github.com/ronwxy/jboost-config/application-dev.yml'&#125;, OriginTrackedMapPropertySource &#123;name='https://github.com/ronwxy/jboost-config/hello-service/application.yml'&#125;, OriginTrackedMapPropertySource &#123;name='https://github.com/ronwxy/jboost-config/application.yml'&#125;]&#125;</span><br></pre></td></tr></table></figure><p>这样，在客户端就可以通过 @ConfigurationProperties注解的属性类， @Value 注解，或Environment对象来访问相关属性，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line">env.getProperty(<span class="string">"app"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;app&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String app;</span><br></pre></td></tr></table></figure><p>客户端重试机制：</p><ol><li>首先设置 spring.cloud.config.failfast=true</li><li>然后添加 spring-retry， spring-boot-starter-aop 依赖</li></ol><p>默认进行6次重试，每次间隔一开始1s，然后每次1.1倍递增。如果要自定义，则通过spring.cloud.config.retry.* 配置参数， 或通过定义一个ID为configServerRetryInterceptor 的RetryOperationsInterceptor 类型的@Bean，可通过RetryInterceptorBuilder 来创建。</p><p>本文示例源码地址： <a href="https://github.com/ronwxy/springcloud-demos" target="_blank" rel="noopener">https://github.com/ronwxy/springcloud-demos</a></p><br>认真生活，快乐分享欢迎关注微信公众号：空山新雨的技术空间![微信公众号](/assets/qrcode-05.jpg) ]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis缓存，从一个“灵异”事件说起</title>
      <link href="/mybatis-cache.html"/>
      <url>/mybatis-cache.html</url>
      
        <content type="html"><![CDATA[<p>刚准备下班走人，被一开发同事叫住，让帮看一个比较奇怪的问题：Mybatis同一个Mapper接口的查询方法，第一次返回与第二次返回结果不一样，百思不得其解！</p><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Talk is cheap. Show me the code.  该问题涉及的主要代码实现包括</p><ol><li><p>mapper接口定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsTrackMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">GoodsTrack</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;GoodsTrackDTO&gt; <span class="title">listGoodsTrack</span><span class="params">(@Param(<span class="string">"criteria"</span>)</span> GoodsTrackQueryCriteria criteria)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>xml定义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listGoodsTrack"</span> <span class="attr">resultType</span>=<span class="string">"xxx.GoodsTrackDTO"</span>&gt;</span></span><br><span class="line">    SELECT ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>service定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.SUPPORTS, readOnly = <span class="keyword">true</span>, rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">GoodsTrackService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">GoodsTrack</span>, <span class="title">GoodsTrackDTO</span>&gt; </span>&#123;</span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsTrackMapper goodsTrackMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;GoodsTrackDTO&gt; <span class="title">listGoodsTrack</span><span class="params">(GoodsTrackQueryCriteria criteria)</span></span>&#123;</span><br><span class="line">         <span class="keyword">return</span> goodsTrackMapper.listGoodsTrack(criteria);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;GoodsTrackDTO&gt; <span class="title">goodsTrackList</span><span class="params">(GoodsTrackQueryCriteria criteria)</span></span>&#123;</span><br><span class="line">        List&lt;GoodsTrackDTO&gt; listGoodsTrack = goodsTrackMapper.listGoodsTrack(criteria);</span><br><span class="line">        Map&lt;String, GoodsTrackDTO&gt; goodsTrackDTOMap = <span class="keyword">new</span> HashMap&lt;String, GoodsTrackDTO&gt;();</span><br><span class="line">        <span class="keyword">for</span> (GoodsTrackDTO goodsTrackDTO : listGoodsTrack)&#123;</span><br><span class="line">            String goodsId = String.valueOf(goodsTrackDTO.getGoodsId());</span><br><span class="line">            <span class="keyword">if</span> (!goodsTrackDTOMap.containsKey(goodsId))&#123;</span><br><span class="line">                goodsTrackDTOMap.put(goodsId, goodsTrackDTO);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                GoodsTrackDTO goodsTrack = goodsTrackDTOMap.get(goodsId);</span><br><span class="line">                <span class="keyword">int</span> num = goodsTrack.getGoodsNum() + goodsTrackDTO.getGoodsNum();</span><br><span class="line">                goodsTrack.setGoodsNum(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;GoodsTrackDTO&gt;  list = <span class="keyword">new</span> ArrayList(goodsTrackDTOMap.values());</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.SUPPORTS, readOnly = <span class="keyword">true</span>, rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">GoodsOrderService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">GoodsOrder</span>, <span class="title">GoodsOrderDTO</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsTrackService goodsTrackService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GoodsOrderDTO <span class="title">create</span><span class="params">(GoodsOrderDTO goodsOrderDTO)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        List&lt;GoodsTrackDTO&gt; rs1 = goodsTrackList(criteria);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        List&lt;GoodsTrackDTO&gt; rs2 = listGoodsTrack(criteria);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致逻辑就是在 <code>GoodsTrackService</code> 定义了两个查询方法，一个是直接从数据库中获取数据，第二个是从数据库中获取数据后进行了一些加工（通过某个字段进行合并累加，类似sum group by），然后在<code>GoodsOrderService</code> 的同一个方法（该方法是一个事务方法 ）中调用这两个查询，发现rs2中的数据存在问题， 期望是都应该与数据库表的数据一致，但其中部分数据却与查出后进行了修改的rs1中的一致。</p></li></ol><p>即本来期望查出的结果如图</p><p><img src="/assets/mybatis-cache1.png" alt="mybatis-cache1"></p><p>rs2与数据库表数据一致。</p><p>但是经上面代码运行的结果却如图</p><p><img src="/assets/mybatis-cache2.png" alt="mybatis-cache2"></p><p>rs2中的数据包含了rs1中的数据。</p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>初步看，<code>listGoodsTrack</code> 方法直接调用的mapper方法 <code>goodsTrackMapper.listGoodsTrack(criteria)</code> 没做任何应用层的处理，第一反应是缓存的原因。 我问前面的查询有没有改变查询返回的结果（一开始没细看具体实现），答曰没有。折腾一阵后，返过去细看 <code>goodsTrackList</code> 的实现，果然还是眼见为实、耳听为虚。在该方法中，通过goodsId对返回的列表进行分组，对goodsNum进行累加，最后返回累加后的几个对象。但是在累加的时候，是直接作用于返回结果对象的，明明就是改变了查询结果（居然说没有？！！）。 这就是问题所在了，mybatis在同一个事务中，对同一个查询（同样的sql，同样的参数）的返回结果进行了缓存（称为一级缓存），下一次做同样的查询时，如果中间没有任何更新操作，则直接返回缓存的数据，而在本例中因为对缓存数据做了人为的修改，所以最后导致查出的数据与数据库不一致。</p><h2 id="mybatis缓存机制"><a href="#mybatis缓存机制" class="headerlink" title="mybatis缓存机制"></a>mybatis缓存机制</h2><p>简单介绍下mybatis的两级缓存机制</p><ul><li><p>一级缓存：一级缓存包括SqlSession与STATEMENT两种级别，默认在 SqlSession 中实现。在一次会话中，如果两次查询sql相同，参数相同，且中间没有任何更新操作，则第二次查询会直接返回第一次查询缓存的结果，不再请求数据库。如果中间存在更新操作，则更新操作会清除掉缓存，后面的查询就会访问数据库了。STATEMENT级别则每次查询都会清掉一级缓存，每次查询都会进行数据库访问。</p></li><li><p>二级缓存：二级缓存则是在同一个namesapce的多个 SqlSession 间共享的缓存，默认未开启。当开启二级缓存后，数据查询的流程就是 二级缓存 ——&gt; 一级缓存 ——&gt; 数据库， 同一个namespace下的更新操作，会影响同一个Cache。</p></li></ul><p>如何开启二级缓存</p><ol><li>需要在mybatis-config.xml中设置：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>然后在mapper的xml文件的&lt;mapper&gt;下设置cache相关配置：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> </span></span><br><span class="line"><span class="tag"><span class="attr">eviction</span>=<span class="string">"LRU"</span>  </span></span><br><span class="line"><span class="tag"><span class="attr">flushInterval</span>=<span class="string">"60000"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">size</span>=<span class="string">"512"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">readOnly</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>支持的属性：</p><ul><li>type：cache使用的类型，默认是PerpetualCache</li><li>eviction： 回收的策略，常见的有LRU，FIFO</li><li>flushInterval： 配置一定时间自动刷新缓存，单位毫秒</li><li>size： 最多缓存的对象个数</li><li>readOnly： 是否只读，若配置为可读写，则需要对应的实体类实现Serializable接口</li><li>blocking： 如果缓存中找不到对应的key，是否会一直blocking，直到有对应的数据进入缓存</li></ul><p>也可以使用 <code>&lt;cache-ref namespace=&quot;mapper.UserMapper&quot;/&gt;</code> 来与另一个mapper共享二级缓存</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>已经定位到是由于mybatis的一级缓存导致，那如何解决本文提到的问题呢？ 基本上有三个解决方向。</p><ol><li>使用缓存的方案</li></ol><p>既然要使用缓存，那就不能更改缓存的数据，此时我们可以在需要更改数据的地方把数据做一次副本拷贝，使其不改变缓存数据本身， 如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (GoodsTrackDTO goodsTrackDTO : listGoodsTrack)&#123;</span><br><span class="line">    String goodsId = String.valueOf(goodsTrackDTO.getGoodsId());</span><br><span class="line">    <span class="keyword">if</span> (!goodsTrackDTOMap.containsKey(goodsId))&#123;</span><br><span class="line">        goodsTrackDTOMap.put(goodsId, ObjectUtil.clone(goodsTrackDTO));</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        GoodsTrackDTO goodsTrack = goodsTrackDTOMap.get(goodsId);</span><br><span class="line">        <span class="keyword">int</span> num = goodsTrack.getGoodsNum() + goodsTrackDTO.getGoodsNum();</span><br><span class="line">        goodsTrack.setGoodsNum(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用ObjectUtil.clone()方法（hutool工具包中提供）对需要更改的数据做副本拷贝。</p><ol start="2"><li>禁用缓存的方案</li></ol><p>在xml的sql定义中添加 flushCache=”true” 的配置，使该查询不使用缓存，如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listGoodsTrack"</span> <span class="attr">resultType</span>=<span class="string">"xxx.GoodsTrackDTO"</span> <span class="attr">flushCache</span>=<span class="string">"true"</span>&gt;</span> </span><br><span class="line">    SELECT ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>禁用缓存的另一种方案是将一级缓存直接设置为STATEMENT来进行全局禁用，在mybatis-config.xml中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"localCacheScope"</span> <span class="attr">value</span>=<span class="string">"STATEMENT"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>避开缓存的方案</li></ol><p>再定义一个实现相同查询的mapper方法，id不一样来避开使用相同的缓存，这种做法就不怎么优雅了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listGoodsTrack2"</span> <span class="attr">resultType</span>=<span class="string">"xxx.GoodsTrackDTO"</span> <span class="attr">flushCache</span>=<span class="string">"true"</span>&gt;</span> </span><br><span class="line">    SELECT ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>避开缓存的另一种做法是不使用事务，使两个查询不在一个SqlSession中，但有时候事务是必须的，所以得分场景来。</p><blockquote><p>另外由于mybatis的缓存都是基于本地的，在分布式环境下可能导致读取的数据与数据库不一致，比如一个服务实例两次读取中间，另一个服务实例对数据进行了更新，则后一次读取由于缓存还是读取的旧数据，而不是更新后的数据，可能导致问题。这时可以通过将缓存设置为STATEMENT级别来禁用mybatis缓存，通过Redis，MemCached等来提供分布式的全局缓存。</p></blockquote><br>认真生活，快乐分享欢迎关注微信公众号：空山新雨的技术空间![微信公众号](/assets/qrcode-05.jpg) ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud（四）：啥是服务降级与熔断之Hystrix</title>
      <link href="/springcloud-4.html"/>
      <url>/springcloud-4.html</url>
      
        <content type="html"><![CDATA[<p>在微服务的架构中，一个业务的实现通常包括多层服务的调用，底层基础服务的故障可能会导致上层服务级联发生故障，进而故障不断蔓延导致系统整体不可用，这种现象称为服务的雪崩效应。</p><a id="more"></a><h2 id="断路器"><a href="#断路器" class="headerlink" title="断路器"></a>断路器</h2><p>断路器（CircuitBreaker， 或叫熔断器）是用来避免服务雪崩效应，提升系统整体可用性的一种技术手段。通过在一个时间窗口内监测服务的调用失败情况，在失败时通过回调返回默认实现（这叫服务降级），当失败达到一定程度时，后续的调用直接导致快速失败，不再访问远程服务（这叫熔断机制），防止不断尝试调用可能会失败的服务，以使服务有机会恢复，一定时间后，当断路器监测到服务恢复后，会继续尝试调用。</p><p>断路器原理有点类似于电路中的保险丝或电闸，当发现电路中出现短路异常情况时，通过保险丝熔断或电闸跳闸来断开电路，避免事故发生。</p><h2 id="Hystrix服务降级"><a href="#Hystrix服务降级" class="headerlink" title="Hystrix服务降级"></a>Hystrix服务降级</h2><p>当使用Hystrix时，每一个远程服务的调用都被封装到一个HystrixCommand中，HystrixCommand有两个主要方法：run(), getFallback()。<br>其中run方法封装了远程服务的调用逻辑，如果run方法超时或者抛出异常，并且启用了服务降级，则会调用getFallback方法来进行降级处理。</p><p>降级处理由 HystrixCommandProperties.Setter 中定义的配置属性来控制，主要包括：</p><ul><li>fallbackEnabled， 是否启用降级处理，如果启用则在超时或异常时调用getFallback来进行降级处理，默认启用</li><li>fallbackIsolationSemaphoreMaxConcurrentRequests，控制getFallback方法并发请求的信号量，默认为10，如果请求超过了信号量限制，则不再尝试调用getFallback方法，而是快速失败</li><li>executionIsolationThreadInterruptOnFutureCancel，隔离策略为THREAD，当Future#cancel(true)时，是否进行中断处理，默认为false</li><li>executionIsolationThreadInterruptOnTimeout，隔离策略为THREAD，当执行线程超时时，是否进行中断，默认为true</li><li>executionTimeoutInMilliseconds，执行超时时间，默认为1000ms，如果隔离策略为THREAD（线程池隔离），且配置了executionIsolationThreadInterruptOnTimeout=true，则执行线程将被中断，如果隔离策略为SEMAPHORE（信号量隔离），则终止操作，信号量隔离下执行线程与主线程是同一个线程，所以不会中断线程处理</li></ul><p>在进行降级处理调用getFallback方法时，需注意：</p><ol><li><p>该方法最大并发数受fallbackIsolationSemaphoreMaxConcurrentRequests控制，默认为10，如果失败率很高，则需配置该参数，如果并发数超过了配置，则不会执行getFallback，而是快速失败，抛出异常“HystrixRuntimeException: xxx fallback executionrejected”</p></li><li><p>尽量避免在getFallback中进行网络请求，而是能快速返回的缓存数据或静态数据（如默认值）；如果需要做网络请求，则应该是调用另一个被Hystrix保护的请求，即对fallback进行串联，第一个fallback中请求网络做业务调用，第二个fallback中回调缓存或静态数据</p></li></ol><p>上文提到Hystrix的线程池隔离策略与信号量隔离策略，两者如何理解？</p><ol><li>线程池隔离：执行在一个单独的线程中，通过线程池中线程数量来控制并发请求量。每一个服务使用一个单独的线程池进行隔离，避免互相影响。这种策略下的服务调用是异步的，可通过hystrix来配置超时。</li><li>信号量隔离：执行在调用线程中，通过信号量来控制控制并发请求量（executionIsolationSemaphoreMaxConcurrentRequests， 默认为10），如果并发量超过该值，则调用getFallback方法对服务进行降级。这种策略下的服务调用是同步的，无法对调用进行超时配置，只能通过调用协议（如http）的超时。信号量隔离策略一般只有在高并发量的情况下使用（如一秒几百次），这种情况下使用单独的线程池开销比较大；或者如果需要在调用服务的线程中，如RequestInterceptor中使用ThreadLocal中的变量，也可以通过将隔离策略设置为信号量来实现(hystrix.command.default.execution.isolation.strategy=SEMAPHORE)</li></ol><blockquote><p>注： 如果只是需要在服务调用中使用安全上下文 SecurityContext， 则也可以通过配置 hystrix.shareSecurityContext=true 来实现，这样Hystrix的并发策略插件会将SecurityContext从主线程传递到Hystrix command使用的线程。</p></blockquote><p>线程池隔离策略与信号量隔离策略两者之间的区别</p><table><thead><tr><th align="center">隔离策略</th><th align="center">实现原理</th><th align="center">调用模式</th><th align="center">是否支持超时配置</th><th align="center">降级实现</th><th align="center">资源消耗</th></tr></thead><tbody><tr><td align="center">线程池隔离</td><td align="center">每个服务使用单独的线程池</td><td align="center">异步调用</td><td align="center">支持</td><td align="center">线程池满则请求拒绝，降级处理</td><td align="center">较大，容易造成服务器负载高</td></tr><tr><td align="center">信号量隔离</td><td align="center">使用信号量的计数器</td><td align="center">同步调用</td><td align="center">不支持</td><td align="center">信号量达到最大值则请求拒绝，降级处理</td><td align="center">较小</td></tr></tbody></table><h2 id="Hystrix熔断机制"><a href="#Hystrix熔断机制" class="headerlink" title="Hystrix熔断机制"></a>Hystrix熔断机制</h2><p>Hystrix客户端会对调用失败情况进行采样统计。当在一个时间窗口（由metrics.rollingStats.timeInMilliseconds配置， 默认10s）内，调用某个服务超过一定次数（由circuitBreaker.requestVolumeThreshold配置，默认20），失败率超过一定比例（由circuitBreaker.errorThresholdPercentage配置，默认50%），则熔断开关打开，调用会被快速失败（不再进行远程调用），如果开发者提供了fallback，则会调用fallback进行降级处理，如果没有，则抛出 异常。</p><p>调用失败包括如下几种情况：</p><ol><li>调用中抛出异常</li><li>调用超时</li><li>线程池拒绝</li><li>信号量拒绝</li></ol><p>熔断开关的状态：</p><ul><li>闭合（closed）：如果配置了熔断开关强制闭合，或者当前的请求失败率没有超过设置的阈值，则熔断开关处于闭合状态，不启动熔断机制。但这时如果调用超时或失败，仍会进行降级处理（除非fallbackEnabled为false）</li><li>打开（open）：如果配置了熔断开关强制打开，或者当前的请求失败率超过了设置的阈值，则熔断开关打开，启动熔断机制，直接进行降级处理，不再进行远程调用</li><li>半打开（half-open）：当熔断开关处理打开状态，需要在一定的时间窗口后进行重试，检测服务是否恢复，这种状态就是半打开状态。如果测试成功则关闭熔断开关，否则还是处于打开状态</li></ul><p>Hystrix熔断开关的状态关系如图所示</p><p><img src="/assets/hystrix-status.png" alt="hystrix熔断开关状态"></p><p>熔断相关的参数配置（HystrixCommandProperties.Setter）：</p><ul><li>circuitBreakerEnabled， 是否开启熔断机制，默认true</li><li>circuitBreakerForceOpen，是否强制打开熔断开关，如果为true，则对请求进行强制降级，默认为false</li><li>circuitBreakerForceClosed， 是否强制关闭熔断开关，默认为false</li><li>circuitBreakerRequestVolumeThreshold， 在熔断开关闭合的情况下，一个采样时间窗口内需要进行至少多少个请求才进行采用统计计算失败率，默认为20</li><li>circuitBreakerErrorThresholdPercentage， 在一个采样时间窗口内，失败率超过该值，则打开熔断开关，进行快速失败，默认采样时间窗口为10s，失败率为50%</li><li>circuitBreakerSleepWindowInMilliseconds， 熔断后的重试时间窗口，在该时间窗口允许一次重试，如果重试成功，则关闭熔断开关，否则还是打开状态，默认5s</li></ul><h2 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h2><p>熔断是服务调用端的一种保护机制，因此通常与Feign结合使用，Feign的Hystrix支持在Dalston版本之前，hystrix只要在类路径中，feign默认就会自动将所有方法封装到断路器中，Dalston版及以后的版本改变了这一做法，需要进行显示配置 feign.hystrix.enabled=true。</p><p>本文案例还是基于前面创建的springcloud-eureka（注册中心）， springcloud-eureka-client（一个简单的hello service）两个项目。</p><ol><li><p>新建springcloud-hystrix项目，pom.xml中引入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>applicaiton.yml配置文件中添加必要配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>启动类添加必要注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixApplication</span></span></span><br></pre></td></tr></table></figure></li></ol><p>其它Feign Client类与Controller类详见源码：<a href="https://github.com/ronwxy/springcloud-demos" target="_blank" rel="noopener">https://github.com/ronwxy/springcloud-demos</a>  springcloud-hystrix项目</p><ol start="4"><li>测试</li></ol><p>这里分四种情形分别进行演示。依次启动springcloud-eureka， springcloud-eureka-client（debug模式启动，并在hello接口里设置断点，模拟超时），springcloud-hystrix</p><ul><li>启用断路器，未指定fallback</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"hello-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloClient</span></span></span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:8084/hystrix0" target="_blank" rel="noopener">http://localhost:8084/hystrix0</a>  得到结果如下</p><p><img src="/assets/hystrix-nofallback.png" alt="无fallback"></p><p>抛出异常： HystrixRuntimeException: HelloClient#hello() timed-out and no fallback available.] with root cause java.util.concurrent.TimeoutException: null</p><ul><li>启用断路器，指定fallback</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"hello-service"</span>, contextId = <span class="string">"hello-with-fallback"</span>, fallback = HelloClientFallback<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">HelloClient1</span></span></span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:8084/hystrix1" target="_blank" rel="noopener">http://localhost:8084/hystrix1</a>  得到结果返回 “调用hello-service返回：this is returned by fallback”， 不会抛出异常。</p><ul><li>启用断路器，指定fallbackFactory</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"hello-service"</span>, contextId = <span class="string">"hello-with-fallbackFactory"</span>, fallbackFactory = HelloClientFallbackFactory<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">HelloClient2</span></span></span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:8084/hystrix2" target="_blank" rel="noopener">http://localhost:8084/hystrix2</a>  得到结果返回 “调用hello-service返回：this is returned from fallbackFactory, cause: com.netflix.hystrix.exception.HystrixTimeoutException”，不会抛出异常。</p><ul><li>不启用断路器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"hello-service"</span>, contextId = <span class="string">"hello-without-circuitBreaker"</span>, configuration = DisableCircuitBreakerConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">HelloClient3</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DisableCircuitBreakerConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line">    <span class="keyword">public</span> Feign.<span class="function">Builder <span class="title">feignBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Feign.builder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对单个feign client禁用断路器可以配置一个注入了 prototype scope的 Feign.Builder实例的配置类来实现。</p><p>访问 <a href="http://localhost:8084/hystrix3" target="_blank" rel="noopener">http://localhost:8084/hystrix3</a>  得到结果如下</p><p><img src="/assets/nohystrix.png" alt="无Hystrix"></p><p>抛出异常： feign.RetryableException: Read timed out executing GET <a href="http://hello-service/hello]" target="_blank" rel="noopener">http://hello-service/hello]</a> with root cause java.net.SocketTimeoutException: Read timed out</p><p>可见，在启用断路器，不指定fallback时，抛出HystrixRuntimeException异常，指定fallback时，调用fallback方法降级处理，但获取不到失败原因，如果需要获取失败原因，可使用fallbackFactory，不启用断路器时，抛出feign.RetryableException异常。</p><p>注意上面的contextId， 当使用同一个名称或url来创建多个指向同一服务的feign client时， 需要使用contextId来避免配置bean的名称冲突。该属性可以改变feign 客户端的ApplicationContext的名称，覆盖feign客户端别名，作为客户端配置bean名称的一部分。</p><p><a href="https://github.com/ronwxy/springcloud-demos" target="_blank" rel="noopener">本文示例代码</a></p><br>认真生活，快乐分享欢迎关注微信公众号：空山新雨的技术空间![微信公众号](/assets/qrcode-05.jpg) ]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud（三）：Web服务客户端之Feign</title>
      <link href="/springcloud-3.html"/>
      <url>/springcloud-3.html</url>
      
        <content type="html"><![CDATA[<p>前文介绍了实现客户端负载均衡的Ribbon，但直接使用Ribbon的API来实现服务间的调用相对较为繁琐，服务间的调用能否像本地接口调用一样便捷、透明，更符合编程习惯呢？ Feign就是用来干这事的。</p><a id="more"></a><h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><p>Feign是一个声明式的Web服务客户端，让服务之间的调用变得非常简单——定义带@FeignClient注解的接口，本地直接@Autowired 接口，通过调用接口的方法来实现远程服务的调用。</p><p>支持的注解包括Feign注解与JAX-RS（Java API for RESTful Web Services）注解。</p><p>每一个Feign的客户端都包含一系列对应的组件，Spring Cloud通过FeignClientsConfiguration 为每一个命名的Feign客户端创建一个组件集合，包括feign.Decoder，feign.Encoder，feign.Contract等。</p><p>Feign提供的默认bean实现及说明</p><table><thead><tr><th align="center">Bean类型</th><th align="center">默认实现类</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Decoder</td><td align="center">ResponseEntityDecoder</td><td align="center">ResponseEntityDecoder封装了SpringDecoder，解码器，将服务的响应消息进行解码</td></tr><tr><td align="center">Encoder</td><td align="center">SpringEncoder</td><td align="center">编码器</td></tr><tr><td align="center">Logger</td><td align="center">Slf4jLogger</td><td align="center">日志框架</td></tr><tr><td align="center">Contract</td><td align="center">SpringMvcContract</td><td align="center">支持注解契约，使用SpringMvcContract可以对Spring MVC注解提供支持</td></tr><tr><td align="center">Feign.Builder</td><td align="center">HystrixFeign.Builder</td><td align="center">使用断路器来装饰Feign接口</td></tr><tr><td align="center">Client</td><td align="center">LoadBalancerFeignClient</td><td align="center">如果是ribbon则  LoadBalancerFeignClient， 如果是spring cloud LoadBalancer 则  FeignBlockingLoadBalancerClient，默认ribbon</td></tr></tbody></table><p>跟Ribbon类似，可以通过配置类来自定义Feign客户端，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"hello-service"</span>, configuration = CustomConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">StoreClient</span> </span>&#123;</span><br><span class="line">    <span class="comment">//..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Contract <span class="title">feignContract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> feign.Contract.Default();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BasicAuthRequestInterceptor <span class="title">basicAuthRequestInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BasicAuthRequestInterceptor(<span class="string">"user"</span>, <span class="string">"password"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样Feign客户端就包含了FeignClientsConfiguration 与CustomConfiguration 中定义的组件，并且后者会覆盖前者（即自定义配置的优先级高于默认配置）。</p><blockquote><p>自定义配置类不需要加注解@Configuration，如果加了且被@ComponentScan扫描到，则将成为所有Feign客户端的默认配置</p></blockquote><p>同样Feign客户端也支持通过配置文件来配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">            <span class="attr">feignName:</span></span><br><span class="line">                <span class="attr">connectTimeout:</span> <span class="number">5000</span></span><br><span class="line">                <span class="attr">readTimeout:</span> <span class="number">5000</span></span><br><span class="line">                <span class="attr">loggerLevel:</span> <span class="string">full</span></span><br><span class="line">                <span class="attr">errorDecoder:</span> <span class="string">com.example.SimpleErrorDecoder</span></span><br><span class="line">                <span class="attr">retryer:</span> <span class="string">com.example.SimpleRetryer</span></span><br><span class="line">                <span class="attr">requestInterceptors:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="string">com.example.FooRequestInterceptor</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="string">com.example.BarRequestInterceptor</span></span><br><span class="line">                <span class="attr">decode404:</span> <span class="literal">false</span></span><br><span class="line">                <span class="attr">encoder:</span> <span class="string">com.example.SimpleEncoder</span></span><br><span class="line">                <span class="attr">decoder:</span> <span class="string">com.example.SimpleDecoder</span></span><br><span class="line">                <span class="attr">contract:</span> <span class="string">com.example.SimpleContract</span></span><br></pre></td></tr></table></figure><p>对于应用于所有Feign客户端的全局默认配置，也可以通过两种方式</p><ol><li>通过@EnableFeignClients 的defaultConfiguration 属性指定默认配置类</li><li>在配置文件中通过名称为default的配置实现<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">            <span class="attr">default:</span></span><br><span class="line">                <span class="attr">connectTimeout:</span> <span class="number">5000</span></span><br><span class="line">                <span class="attr">readTimeout:</span> <span class="number">5000</span></span><br><span class="line">                <span class="attr">loggerLevel:</span> <span class="string">basic</span></span><br></pre></td></tr></table></figure></li></ol><p>优先级同Ribbon， 配置文件&gt;自定义配置类&gt;默认的FeignClientsConfiguration</p><h2 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h2><p>本文案例演示基于前面搭建的springcloud-eureka 与 springcloud-eureka-client 两个示例项目。</p><ol><li><p>新建springcloud-feign项目，pom.xml中加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring-cloud-starter-openfeign 包含了spring-cloud-starter-netflix-ribbon 与 spring-cloud-starter-loadbalancer。</p></li><li><p>启动类加上@EnableFeignClients 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FeignApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义Feign client（feign client支持继承）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"hello-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloClient</span> <span class="keyword">extends</span> <span class="title">BaseHelloClient</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"hello/param"</span>)</span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">(@SpringQueryMap QueryParam param)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用Feign client</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloClient helloClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"feign"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">feignTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"调用Hello-service返回： "</span> + helloClient.hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"feign/param"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">feignTestParam</span><span class="params">(QueryParam param)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"调用Hello-service返回： "</span> + helloClient.hello(param);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>依次启动三个项目，调用<a href="http://localhost:8083/feign" target="_blank" rel="noopener">http://localhost:8083/feign</a> 能正常返回调用hello-service的结果。</p><p>本示例项目还通过@SrpingQueryMap 注解实现了Feign对 pojo用于GET请求参数的支持。如果不加@SrpingQueryMap， 则pojo参数是无法通过Feign client传递的，可去掉注解自行验证下。</p><h2 id="一些知识点"><a href="#一些知识点" class="headerlink" title="一些知识点"></a>一些知识点</h2><ol><li><p>如果需要定制化产生的查询参数map，可以实现并注入一个自定义的 QueryMapEncoder bean</p></li><li><p>Feign client的日志可通过feign client接口的全路径名进行配置，如logging.level.project.user.UserClient: DEBUG，默认为NONE（即不打印日志）。全局设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可设置的level值</p></li></ol><ul><li>NONE： 不记录日志 ，默认</li><li>BASIC：只记录请求方法，url，以及响应状态码与执行时间</li><li>HEADERS：包括BASIC与请求、响应头</li><li>FULL：包括请求与响应的headers，body，metadata</li></ul><ol start="3"><li><p>Feign默认使用Ribbon来做负载均衡，可通过配置spring.cloud.loadbalancer.ribbon.enabled=false 来使用spring cloud loadbalancer（目前Ribbon处于维护状态，近期内不做更新）</p></li><li><p>可通过配置feign.okhttp.enabled=true 或 feign.httpclient.enabled=true 来使用OkHttpClient 或ApacheHttpClient， 默认使用的是JDK 原生的URLConnection 发送HTTP请求，没有连接池</p></li><li><p>如果需要在RequestInterceptor 中使用ThreadLocal中的变量， 那么要么禁用Hystrix，要么设置hystrix的线程隔离策略为SEMAPHORE</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">    <span class="attr">hystrix:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">            <span class="attr">execution:</span></span><br><span class="line">                <span class="attr">isolation:</span></span><br><span class="line">                    <span class="attr">strategy:</span> <span class="string">SEMAPHORE</span></span><br></pre></td></tr></table></figure></li><li><p>使用有Hystrix fallback的Feign时，会在ApplicationContext中存在多个同类型bean， 导致@Autowired 失效。为了解决这个问题，Spring cloud netflix 将所有feign实例标为@Primary，如果要关闭该特性， 可将@FeignClient的 primary属性置为false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"hello"</span>, primary = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloClient</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><a href="https://github.com/ronwxy/springcloud-demos" target="_blank" rel="noopener">本文示例代码</a></p><br>认真生活，快乐分享欢迎关注微信公众号：空山新雨的技术空间![微信公众号](/assets/qrcode-05.jpg) ]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud（二）：Web服务客户端之Ribbon</title>
      <link href="/springcloud-2.html"/>
      <url>/springcloud-2.html</url>
      
        <content type="html"><![CDATA[<p>上文介绍了服务如何通过Eureka实现注册，以及如何从Eureka获取已经注册的服务列表。那么拿到注册服务列表后， 如何进行服务调用？一个简单的实现是可以从被调用服务的实例列表中选择一个服务实例，通过其hostname（或IP），端口，及API的路径拼接成完整的url，通过http client来完成调用。但生产环境中，为了高性能、高可用等要素，服务的调用一般涉及负载均衡、故障转移、失败重试等实现，因此引入实现这些功能的客户端组件也成为了微服务架构中的必备要素。Spring Cloud中可通过Ribbon与Feign来实现服务间的调用。</p><p>本系列文章与示例均基于最新的Spring Cloud Hoxton版编写。</p><a id="more"></a><h2 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h2><p>Ribbon是一个可实现负载均衡的Web客户端。我们一般理解的负载均衡是在服务端实现的，如Nginx（但这都是相对的，如果相对后端服务来说，也可以把Nginx当做一个实现了负载均衡的客户端）， 而Ribbon是客户端的负载均衡实现。</p><p>Ribbon的核心概念是命名的客户端（named client），Spring Cloud会为每个命名客户端创建一个子应用上下文（ApplicationContext），在该上下文中，通过RibbonClientConfiguration创建ILoadBalancer，RestClient，ServerListFilter等Bean。</p><p>Spring Cloud Netflix提供的默认的Ribbon bean及说明</p><table><thead><tr><th align="center">Bean类型</th><th align="center">默认实现类</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">IClientConfig</td><td align="center">DefaultClientConfigImpl</td><td align="center">Ribbon客户端配置加载实现，加载各实现bean及客户端连接超时、通讯超时等配置</td></tr><tr><td align="center">IRule</td><td align="center">ZoneAvoidanceRule</td><td align="center">基于zone与可用性来过滤服务器的规则实现</td></tr><tr><td align="center">IPing</td><td align="center">DummyPing</td><td align="center">判断服务器是否存活的实现，默认总是返回true</td></tr><tr><td align="center">ServerList<Server></td><td align="center">ConfigurationBasedServerList</td><td align="center">获取服务器列表的实现，默认基于配置</td></tr><tr><td align="center">ServerListFilter<Server></td><td align="center">ZonePreferenceServerListFilter</td><td align="center">服务器过滤实现，默认过滤出与客户端在同一个zone中的服务器列表</td></tr><tr><td align="center">ILoadBalancer</td><td align="center">ZoneAwareLoadBalancer</td><td align="center">负载均衡实现，默认根据zone的请求负载量排除掉负载最高的zone，从剩下的zone中选择一个根据给定的Rule选择其中一个服务器</td></tr><tr><td align="center">ServerListUpdater</td><td align="center">PollingServerListUpdater</td><td align="center">动态的服务器列表更新器</td></tr></tbody></table><p>Spring Cloud允许我们通过声明一个configuration来对客户端进行自定义，来调整或覆盖上述默认实现，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RibbonClient</span>(name = <span class="string">"custom"</span>, configuration = CustomConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，客户端将由RibbonClientConfiguration 与 CustomConfiguration中定义的组件一起组成，且CustomConfiguration 中的组件会覆盖前者。</p><blockquote><p>注意CustomConfiguration 必须是@Configuration 修饰的类，且不能被main application context的 @ComponentScan 扫描，否则会被所有@RibbonClients 共享</p></blockquote><p>如果要为所有Ribbon Clients定制默认配置，则可使用@RibbonClients 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RibbonClients</span>(defaultConfiguration = DefaultRibbonConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RibbonClientDefaultConfigurationTestsConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以通过配置属性来定制Ribbon Client，支持的配置属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">clientName</span>&gt;</span>.ribbon.NFLoadBalancerClassName: ILoadBalancer接口实现类</span><br><span class="line"><span class="tag">&lt;<span class="name">clientName</span>&gt;</span>.ribbon.NFLoadBalancerRuleClassName: IRule接口实现类</span><br><span class="line"><span class="tag">&lt;<span class="name">clientName</span>&gt;</span>.ribbon.NFLoadBalancerPingClassName: IPing接口实现类</span><br><span class="line"><span class="tag">&lt;<span class="name">clientName</span>&gt;</span>.ribbon.NIWSServerListClassName: ServerList接口实现类</span><br><span class="line"><span class="tag">&lt;<span class="name">clientName</span>&gt;</span>.ribbon.NIWSServerListFilterClassName: ServerListFilter接口实现类</span><br></pre></td></tr></table></figure><p>比如对于一个服务名称为users的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">users:</span></span><br><span class="line">    <span class="attr">ribbon:</span></span><br><span class="line">        <span class="attr">NIWSServerListClassName:</span> <span class="string">com.netflix.loadbalancer.ConfigurationBasedServerList</span></span><br><span class="line">        <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.WeightedResponseTimeRule</span></span><br></pre></td></tr></table></figure><p>配置属性的优先级 &gt; configuration指定配置类的优先级 &gt; 默认RibbonClientConfiguration的优先级， 即同样的实现，前者覆盖后者。</p><p>当Eureka与Ribbon同时存在时，ribbonServerList会被 DiscoveryEnabledNIWSServerList覆盖，从Eureka来获取server list，同时 NIWSDiscoveryPing也会替换IPing接口，代理Eureka来确定服务器是否处于运行状态。</p><p>Ribbon的超时与重试配置</p><ul><li>&lt;clientName&gt;.ribbon.ConnectTimeout： 请求连接超时时间，默认2000</li><li>&lt;clientName&gt;.ribbon.ReadTimeout： 请求处理超时时间，默认5000</li><li>&lt;clientName&gt;.ribbon.MaxAutoRetries： 在同一台服务器上的重试次数，排除第一次调用，默认0</li><li>&lt;clientName&gt;.ribbon.MaxAutoRetriesNextServer： 切换服务器的重试次数，默认1</li><li>&lt;clientName&gt;.ribbon.OkToRetryOnAllOperations： 对所有请求都进行重试，默认false</li></ul><p>当项目中添加了Spring Retry的依赖，则会启用重试机制。当请求失败时，会再尝试访问当前服务器（次数由MaxAutoRetries配置），如果不行，就换一个服务器进行访问，如果还是不行，再换服务器访问（更换次数由MaxAutoRetriesNextServer配置），如果还是不行，则返回请求失败。</p><h2 id="Ribbon的负载均衡策略"><a href="#Ribbon的负载均衡策略" class="headerlink" title="Ribbon的负载均衡策略"></a>Ribbon的负载均衡策略</h2><p>前文提到Ribbon的负载均衡默认实现为ZoneAwareLoadBalancer，那么Ribbon提供的负载均衡策略还有哪些？ 罗列如下</p><ul><li>BestAvailableRule： 排除掉断路器打开的服务器，选取并发请求最小的服务器</li><li>AvailabilityFilteringRule： 过滤掉断路器打开或活跃连接数超过限制（通过&lt;clientName&gt;.&lt;nameSpace&gt;.ActiveConnectionsLimit配置，默认为Integer.MAX_VALUE）的服务器</li><li>WeightedResponseTimeRule: 根据平均响应时间来动态为服务器赋予权值，实现基于权重的轮询</li><li>RetryRule： 对选择负载均衡策略添加重试机制</li><li>RoundRobinRule： 简单轮询</li><li>RandomRule： 随机轮询</li><li>ZoneAvoidanceRule： 结合区域与可用性来选择服务器，也是默认实现</li></ul><p>可通过如下配置修改Ribbon的负载均衡策略</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">client-name:</span></span><br><span class="line">    <span class="attr">ribbon:</span></span><br><span class="line">        <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.WeightedResponseTimeRule</span></span><br></pre></td></tr></table></figure><h2 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h2><p>本文案例演示基于上文搭建的springcloud-eureka 与 springcloud-eureka-client 两个示例项目 （<a href="https://github.com/ronwxy/springcloud-demos" target="_blank" rel="noopener">源码</a>），依次启动两个项目，然后将springcloud-eureka-client项目的端口 server.port改为8081，新开一个springboot运行配置，如图</p><p><img src="/assets/eureka-client2.png" alt="Eureka客户端2"></p><p>以8081端口再起一个springcloud-eureka-client的服务实例。这是查看Eureka页面 <a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a>, 可以看到hello-service服务注册了两个实例</p><p><img src="/assets/hello-service.png" alt="hello服务注册"></p><p>新建springcloud-ribbon项目 （<a href="https://github.com/ronwxy/springcloud-demos" target="_blank" rel="noopener">源码</a>）</p><p>pom.xml中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写测试接口， LoadBalanceClient 是Ribbon的API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"ribbon"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRibbon</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServiceInstance instance = loadBalancer.choose(<span class="string">"hello-service"</span>);</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"http://%s:%s"</span>, instance.getHost(),</span><br><span class="line">                instance.getPort());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动springcloud-ribbon， 调用测试接口 <a href="http://localhost:8082/ribbon，" target="_blank" rel="noopener">http://localhost:8082/ribbon，</a> 可以看到返回结果交替显示 <a href="http://CN-201911061714:8080，">http://CN-201911061714:8080，</a> <a href="http://CN-201911061714:8081" target="_blank" rel="noopener">http://CN-201911061714:8081</a>  （CN-201911061714是我电脑的hostname，你的可能不一样），可见Ribbon实现了客户端的负载均衡。</p><h2 id="一些知识点"><a href="#一些知识点" class="headerlink" title="一些知识点"></a>一些知识点</h2><ol><li><p>Ribbon如果对所有请求进行重试，则需要保证接口的幂等性（多次调用产生的结果是一致的）</p></li><li><p>每一个命名的Ribbon客户端都有一个相应的由Spring cloud维护的子应用上下文，默认是lazy load的（第一次请求客户端时才load），可以通过如下配置更改为启动立即加载</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">eager-load:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">clients:</span> <span class="string">client1,</span> <span class="string">client2,</span> <span class="string">client3</span></span><br></pre></td></tr></table></figure></li><li><p>client.ribbon.*  针对单个客户端进行配置，针对所有客户端默认配置，则使用ribbon.*</p></li><li><p>当结合断路器使用时， 断路器的超时时间要大于Ribbon的超时时间，不然不会触发重试（还没重试就触发断路器打开了）</p></li><li><p>除了Ribbon，能做负载均衡访问的Web客户端还有@LoadBalance 注解的RestTemplate， 与Feign</p></li></ol><p><a href="https://github.com/ronwxy/springcloud-demos" target="_blank" rel="noopener">本文示例代码</a></p><br>认真生活，快乐分享欢迎关注微信公众号：空山新雨的技术空间![微信公众号](/assets/qrcode-05.jpg) ]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务漫谈</title>
      <link href="/micro-service.html"/>
      <url>/micro-service.html</url>
      
        <content type="html"><![CDATA[<p>微服务可以说是近几年技术圈异常火爆的概念，人人都在说微服务，人人都在致力于打造自己的“微服务”。甚至于某些压根不懂技术的项目招标方都在问你们公司用了微服务吗？“微服务”俨然成了衡量团队技术实力或技术逼格的代名词。</p><p>但是，微服务真是万能的吗？是不是来个项目就得微服务一下，不然就显得落伍，显得low了呢？ 本文一起聊聊“微服务”的那些事。</p><a id="more"></a><h2 id="一-什么是微服务？"><a href="#一-什么是微服务？" class="headerlink" title="一. 什么是微服务？"></a>一. 什么是微服务？</h2><p>微服务是一种架构风格，由Martin Fowler（牛人，ThoughtWorks公司的首席科学家，同时也是敏捷开发方法的创始人之一）提出，是指将复杂应用通过拆分为一系列高内聚、低耦合、自治的小（微）服务，每个服务独立开发（可以使用不同的编程语言），独立部署（运行在不同的进程中），并通过轻量级的通信机制（Restful API）进行交互。微服务本质上还是SOA（Service-Oriented-Architecture, 面向服务的架构），但微服务不限定于特定的技术，通过Restful架构风格来完成系统的统一，因此比传统的SOA（一般基于较重的SOAP、WSDL、UDDI等协议技术，通过企业服务总线ESB进行连接集成）更为灵活，更具扩展性。</p><p>微服务的特征：</p><ol><li>是一种应用于组件设计(服务如何拆分)和部署架构(服务如何部署和通信)的模式</li><li>适用于创建具有“一定功能复杂性”的分布式应用系统</li><li>各个服务必须小，只负责某个具体的业务功能，比如商品服务，订单服务，根据功能实现关注点分离</li><li>各个服务保持自治和相互解耦，进行独立开发、独立部署，及独立升级与伸缩</li><li>各个服务之间通过轻量级 API （Restful API）和异步通信（如消息队列）相结合的方式进行通信</li></ol><h2 id="二-微服务的优缺点"><a href="#二-微服务的优缺点" class="headerlink" title="二. 微服务的优缺点"></a>二. 微服务的优缺点</h2><p>微服务的优缺点一般相对单体应用（就是所有功能、代码都整在一个工程项目中）而言</p><h3 id="1-微服务的优点："><a href="#1-微服务的优点：" class="headerlink" title="1. 微服务的优点："></a>1. 微服务的优点：</h3><p>1.1 简化复杂的业务模型<br>微服务将复杂的业务通过一系列的高内聚、低耦合的小型服务来实现，体现了分治的思想。每个服务的开发与维护都非常高效，可管理性更高，能快速响应需求。</p><p>1.2 不局限于某项特定的技术<br>因为服务间是通过轻量级的Restful API交互，每一个服务可以独立开发，可选用不同的编程语言与技术框架（虽然实际中对于一般规模一般都是统一的）。</p><p>1.3 独立部署与升级，按需伸缩<br>每个服务都是独立部署，运行在不同的进程中，因为加载内容相对较少，所以一般启动也比较快。单个服务的升级对系统整体的影响也较小。同时可以针对各个服务的负载情况，进行独立的按需伸缩。</p><h3 id="2-微服务的缺点："><a href="#2-微服务的缺点：" class="headerlink" title="2. 微服务的缺点："></a>2. 微服务的缺点：</h3><p>2.1 对“微”的粒度与服务的边界难以把握。<br>微服务开发过程中，开发人员最常见的疑问就是这个接口应该放到哪个服务里。服务应该微到什么程度，服务边界与服务交互如何定义与规范，需要有对业务、技术充分了解的专业人员做上层设计（一般就是架构师），并且持续跟进实施落地，否则很有可能就会导致只是将一个单体应用拆成了多个单体应用，或编织了一张交互错综复杂的服务网络的尴尬局面。</p><p>2.2 引入了分布式的复杂性。<br>微服务中某一个请求可能就涉及好几个服务间的调用，如果出现问题，则定位相对困难复杂；同时基于CAP（Consistency，Availability， Partition Tolerance）理论，分布式系统中一致性、可用性、分区容忍性只能同时满足两个，一般在满足可用性与分区容忍性的基础上，对系统提供最终一致性保障。</p><p>2.3 对技术栈的要求更高。<br>团队需要对微服务基本理论与相关技术有一定了解，且需要搭建许多业务服务之外的基础设施服务，比如服务注册发现、配置管理、链路监控等。目前微服务技术最热的就是Spring Cloud，也有部分团队选择Dubbo。</p><p>2.4 对运维的要求更高。<br>微服务将一个复杂应用拆分为几十个甚至上百个小型服务，迭代升级部署的频率比单体应用更高，采用传统的运维手段很难满足需求，一般需引进DevOps的相关技术手段，如CI（持续集成）、CD（持续部署）、自动化测试、容器化与服务编排，及丰富的监控告警机制等。</p><h2 id="三-如何抉择？"><a href="#三-如何抉择？" class="headerlink" title="三. 如何抉择？"></a>三. 如何抉择？</h2><p>如之前文章说到的，技术人员的能力在于解决问题的能力（当然解决问题也分临时性的解决问题与前瞻性的解决问题——解决方案能在较长一段时间内适用）。技术管理者或技术决策者最基本的修为就是在过火过热的各种技术概念与技术框架面前保持冷静，选择最适合业务场景与自身团队的技术方案。</p><p>要不要用微服务，什么时候不该用微服务？结合自身理解，总结整理如下：</p><ol><li><p>业务简单，应用规模很小不该用微服务<br>杀鸡不能用牛刀，微服务旨在将复杂业务拆分，简化业务规模， 如果业务本身很简单，一个单体应用就能处理的场景不该用微服务。</p></li><li><p>业务领域不够清晰、明确不该用微服务<br>业务领域不清晰、不明确，意味着整个业务定义、业务框架都可能朝令夕改，如果采用微服务，则可能导致牵一发而动全身的痛苦局面。</p></li><li><p>团队技术储备不够不该硬上微服务<br>微服务的分布式特性对团队的技术要求比单体应用高， 如果团队大部分成员之前都没接触过微服务，对微服务缺乏基本的了解，不该硬上微服务。</p></li><li><p>小型创业公司不适合用微服务<br>该条其实是前面几条的汇总，因为小型创业公司一般就意味着业务相对简单，并且业务领域、设计不够清晰、明确，以及团队技术实力相对较弱，并且人员流动性大等特点，任何一点都不利于微服务的构建。</p></li></ol><p>对于业务较为明确且复杂的系统，如果你团队的技术储备达到一定水平（如对Spring Boot，Spring Cloud，CI/CD，Docker/K8s等有一定掌握），并且有一个对业务与技术都有充分了解且具备决策权的master，微服务无疑是一个很好的选择。否则，慎重！</p><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h2><p>任何技术与框架都有其适用场景，微服务不是万能钥匙。应结合具体的业务场景，团队组成，技术储备等因素综合考虑，选择最适合自身的技术方案。</p><p>—————————————————————————————<br>作者：空山新雨<br>欢迎关注我的微信公众号：jboost-ksxy （一个不只有技术干货的公众号）<br><img src="/assets/qrcode-05.jpg" alt="微信公众号"> </p>]]></content>
      
      
      <categories>
          
          <category> Architecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud（一）：服务注册中心Eureka</title>
      <link href="/springcloud-1.html"/>
      <url>/springcloud-1.html</url>
      
        <content type="html"><![CDATA[<p>Spring Cloud 基于 Netflix 的几个开源项目进行了封装，提供包括服务注册与发现（Eureka），智能路由（Zuul），熔断器（Hystrix），客户端负载均衡（Ribbon）等在内的核心组件。</p><p>在微服务系统中，服务少则十几、几十个，多则上百、几百个（据悉 Netflix 的云平台上运行了500多个微服务），这些微服务通过相互调用来为用户提供功能。那么一个服务调用另一个服务是如何进行的，如何定位到另一个服务的地址？代码中写死，还是配置文件中配置？显然对于服务数量较多的系统，这两种方式先不说后续维护，光写起来就很痛苦。于是，对于微服务架构来说，服务的自动注册与发现就成为非常核心的功能，Eureka就是来负责实现这个功能的。</p><p>本系列文章与示例均基于最新的Spring Cloud Hoxton版编写。</p><a id="more"></a><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><hr><p>Eureka是一个基于REST的服务，包括Eureka Server与Eureka Client两个端。Eureka Server作为服务注册中心接受Eureka Client的注册及获取其它服务的地址信息。基本架构如下图所示：</p><p><img src="/assets/eureka-architecture-overview.png" alt="Eureka基本架构"></p><p>其中</p><ul><li><p>Eureka Server： 作为服务注册中心，提供服务注册与发现功能接口</p></li><li><p>Service Provider： 服务提供者，将自身服务注册到服务注册中心，供其它服务消费者发现与调用</p></li><li><p>Service Consumer： 服务消费者，从服务注册中心发现服务，并通过一些负载均衡客户端来调用（比如Ribbon或Feign）</p></li></ul><p>很多时候同一个应用可能既是服务提供者，也是服务消费者——自己作为服务方，为其它服务提供接口，同时也调用其它服务的接口来完成自身的业务逻辑。</p><h2 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h2><hr><p>Eureka Server的搭建非常简单，其部署可分为单实例部署与多实例集群部署，一般开发测试环境可以使用单实例部署，但生产环境出于高可用要求，可进行多实例集群部署。</p><ol><li><p>在pom.xml中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了方便版本引入，可以在pom中添加依赖管理，这样spring cloud相关的starter依赖就不需要指定版本了（如上省略了version）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在启动类上添加注解 @EnableEurekaServer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在application.yml 或 application.properties配置文件中添加配置（个人比较倾向于yml，两者区别可自行百度）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-eureka</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">single</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">single</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registerWithEureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">      </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">peer1</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">peer1</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://peer2:8762/eureka/,http://peer3:8763/eureka/</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">peer2</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8762</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">peer2</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://peer1:8761/eureka/,http://peer3:8763/eureka/</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">peer3</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8763</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">peer3</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://peer1:8761/eureka/,http://peer2:8762/eureka/</span></span><br></pre></td></tr></table></figure><p>在该配置文件中，实际上是定义了两种模式，其中默认的profile single是单实例模式， peer1， peer2， peer3组成多实例模式。</p></li></ol><ul><li><code>eureka.client.registerWithEureka</code>：表示是否将自身注册到Eureka Server，默认为true，单实例模式下一般设置为false，否则会在启动时报连接不到服务器的错误</li><li><code>eureka.client.fetchRegistry</code>：表示是否从Eureka Server获取注册服务列表，默认为true，同样在单实例模式下设置为false</li><li><code>eureka.client.serviceUrl.defaultZone</code>：Eureka Server的地址，多实例模式下多个地址以“,”隔开，多个实例之间只要有一条路线连通，则总会将注册信息进行同步</li></ul><ol start="4"><li>启动</li></ol><p>对于单实例模式，如果按如上配置，则直接启动程序即可。启动完成后，访问 <a href="http://localhost:8761，即可查看Eureka">http://localhost:8761，即可查看Eureka</a> Server的相关信息，如</p><p><img src="/assets/single-eureka.png" alt="单实例模式"></p><p>上图所示，当前没有Eureka Server的副本也没有任何服务注册。</p><p>对于多实例集群模式，则需要根据不同的profile启动多个实例，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br><span class="line">cd target</span><br><span class="line">java -jar springcloud-eureka-1.0-SNAPSHOT.jar --spring.profiles.active=peer1</span><br><span class="line">java -jar springcloud-eureka-1.0-SNAPSHOT.jar --spring.profiles.active=peer2</span><br><span class="line">java -jar springcloud-eureka-1.0-SNAPSHOT.jar --spring.profiles.active=peer3</span><br></pre></td></tr></table></figure><p>启动完成后，打开 <a href="http://localhost:8761，">http://localhost:8761，</a> 可以看到Eureka Server已经存在副本与注册的服务了（Eureka将自身作为一个服务完成了注册）</p><p><img src="/assets/multi-eureka.png" alt="多实例模式"></p><p>上述操作如果是在单机进行，则需要在hosts文件中添加映射，linux下是/etc/hosts，windows10 下是C:\Windows\System32\drivers\etc\hosts，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 peer1</span><br><span class="line">127.0.0.1 peer2</span><br><span class="line">127.0.0.1 peer3</span><br></pre></td></tr></table></figure><h2 id="Eureka-Client"><a href="#Eureka-Client" class="headerlink" title="Eureka Client"></a>Eureka Client</h2><hr><p>Eureka Client一般集成在各个微服务中，集成也非常简单。</p><ol><li><p>pom.xml中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application.yml配置文件中添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;random.uuid&#125;</span></span><br></pre></td></tr></table></figure><p>如果是多实例集群模式，则 <code>eureka.client.serviceUrl.defaultZone</code> 可以配置多个地址，“，”号分隔。</p></li></ol><ul><li><code>eureka.client.*</code>：  发现服务的配置参数</li><li><code>eureka.instance.*</code>： 注册服务的配置参数， 如上 <code>eureka.instance.prefer-ip-address</code> 设置为true表示服务注册时使用IP，而不是hostname； <code>eureka.instance.instance-id</code> 配置服务实例的ID，默认为 ${spring.cloud.client.hostname}:${spring.application.name}:${spring.application.instance_id:${server.port}}}</li></ul><blockquote><p>添加了依赖就能集成Eureka Client，主类上添加 @EnableDiscoveryClient 注解不是必须。</p></blockquote><p>启动程序后，进入Eureka Server页面即可看到注册的服务</p><p><img src="/assets/eureka-client.png" alt="Eureka客户端"></p><h2 id="一些知识点（建议掌握）"><a href="#一些知识点（建议掌握）" class="headerlink" title="一些知识点（建议掌握）"></a>一些知识点（建议掌握）</h2><hr><ol><li><p>Eureka Client在注册服务时，提供包括hostname，IP地址， port， health indicator url，status page， home page 等在内的meta-data，其它客户端可通过这些信息来直接与服务进行交互，我们也可以通过 <code>eureka.instance.metadataMap</code> 来添加自定义的meta-data，供客户端访问</p></li><li><p>Eureka Server通过接收Eureka Client的心跳消息来判断服务实例是否存活，如果某一个实例的心跳在特定时间（可配置）内没收到，则将其从注册表中移除。心跳默认间隔为30s，一个服务被其它客户端发现，可能需要经过3次心跳，这也是有时候服务注册比较慢的原因。可通过<code>eureka.instance.leaseRenewalIntervalInSeconds</code>配置，但生产环境建议最好保持默认</p></li><li><p>Eureka Client默认不会传播当前应用的健康检查状态，一旦注册成功，只要心跳存在，Eureka总是认为应用处于UP状态。可以启用Eureka的健康检查，将状态传播给Eureka，其它应用只会将请求发给UP状态的服务实例 <code>eureka.client.healthcheck.enabled=true</code>。注意这个配置只能配置在application.yml中，配置在bootstrap.yml中可能导致注册服务时，服务以状态为UNKOWN进行注册</p></li><li><p>Eureka Server是没有后端存储的，服务实例需要通过心跳来更新注册信息，注册信息存于内存中，Eureka Client也有一个基于内存的缓存，不需要每次请求服务都要访问注册中心获取服务地址信息</p></li><li><p>Eureka的自我保护机制：Eureka Server在短时间内丢失比较多的客户端时，会进入自我保护模式，在该模式下，Eureka Server即使发现服务实例已经不再发送心跳了，也不会从服务注册表中删除。这样，当发生网络故障时，服务注册信息仍然存于Eureka中，当网络故障恢复后，会自动退出自我保护模式。自我保护模式是一种应对网络异常的安全保护机制。相关配置： <code>eureka.server.renewal-percent-threshold</code>， 触发自我保护机制的阈值，默认为0.85； <code>eureka.server.enable-self-preservation</code>， 自我保护开启，默认为true，如果设置为false，则关闭客户端程序后，可直观地从Eureka Server的页面发现服务实例被注销删除了。</p></li></ol><p><a href="https://github.com/ronwxy/springcloud-demos" target="_blank" rel="noopener">本文示例代码</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker笔记（十二）：Docker Compose入门</title>
      <link href="/docker-12.html"/>
      <url>/docker-12.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Compose简介"><a href="#1-Compose简介" class="headerlink" title="1. Compose简介"></a>1. Compose简介</h2><p>Docker Compose是Docker官方的用于对Docker容器集群实现编排，快速部署分布式应用的开源项目。Docker Compose通过docker-compose.yml文件来定义一组相关联的应用容器的编排，这组相关联的应用容器一般通过互相交互作为一个整体项目提供服务，比如一个Web项目，既包含业务服务容器，也包含数据库服务容器与缓存服务容器等。</p><p>Compose中两个重要的概念：</p><ul><li>服务（service）： 包含多个运行相同镜像的容器实例</li><li>项目（project）： 由一组关联的应用容器（服务）组成一个完整的业务服务单元，在docker-compose.yml（即Compose的模板文件）中定义</li></ul><p>Copmpose项目由Python编写，通过调用Docker服务提供的API来对容器进行管理。Compose默认的管理对象是项目，可以通过子命令对项目中的一组容器进行生命周期管理。</p><h2 id="2-Compose安装"><a href="#2-Compose安装" class="headerlink" title="2. Compose安装"></a>2. Compose安装</h2><p>在macOS与Win10下，Docker安装自带了docker-compose的二进制文件，可以直接使用。<br>Linux下，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz ~]# curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">[root@iZwz ~]# chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz ~]# docker-compose version</span><br><span class="line">docker-compose version 1.24.1, build 4667896b</span><br><span class="line">docker-py version: 3.7.3</span><br><span class="line">CPython version: 3.6.8</span><br><span class="line">OpenSSL version: OpenSSL 1.1.0j  20 Nov 2018</span><br></pre></td></tr></table></figure><h2 id="3-Compose模板文件"><a href="#3-Compose模板文件" class="headerlink" title="3. Compose模板文件"></a>3. Compose模板文件</h2><p>模板文件是使用Compose的核心，定义了一组相关联的应用容器，使之构成一个项目，里面大部分指令跟docker run相关参数的含义是类似的。默认的模板文件名称为docker-compose.yml，为YAML格式，如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">        <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">        <span class="attr">depends_on:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">db:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure><p>Compose模板文件可以动态读取主机的系统环境变量与当前目录下.env文件中的变量，通过${xx}引用。</p><p>模板文件中的常用指令说明</p><ul><li><p>build<br>指定Dockerfile所在文件夹的路径，可以是绝对路径或相对模板文件的路径。Compose将会自动构建镜像，然后使用该镜像。也可以通过如下方式详细指定。cache_from指定构建镜像的缓存</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">build:</span></span><br><span class="line">    <span class="attr">context:</span> <span class="string">./dir</span></span><br><span class="line">    <span class="attr">dockerfile:</span> <span class="string">Dockerfile-alternate</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">        <span class="attr">buildno:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">cache_from:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">alpine:latest</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">corp/web_app:3.14</span></span><br></pre></td></tr></table></figure></li><li><p>command<br>覆盖容器启动后默认执行的命令。</p></li><li><p>container_name<br>Compose默认会使用 项目名称_服务名称_序号的格式作为容器名称。一般不需要特别指定，因为指定具体名称后，服务将无法进行扩展（scale），因为不允许多个容器具有相同的名称。</p></li><li><p>depends_on<br>解决容器的依赖、启动先后顺序的问题，但是服务不会等待依赖的服务“完全启动”之后才启动。</p></li><li><p>env_file<br>指定环境变量定义文件，可以为单独文件路径或列表，当与environment中有同名冲突时，以environment为准。</p></li><li><p>environment<br>设置环境变量，支持数组或字典两种格式。只有名称的变量会自动获取运行Compose主机上的对应变量的值，以防止信息泄露</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">    <span class="attr">RACK_ENV:</span> <span class="string">development</span></span><br><span class="line">    <span class="attr">SESSION_SECRET:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">RACK_ENV=development</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SESSION_SECRET</span></span><br></pre></td></tr></table></figure></li><li><p>expose<br>暴露端口，不映射到宿主机，只被连接的服务访问</p></li><li><p>healthcheck<br>通过命令检查容器是否健康运行，如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">healthcheck:</span></span><br><span class="line">    <span class="attr">test:</span> <span class="string">["CMD",</span> <span class="string">"curl"</span><span class="string">,</span> <span class="string">"-f"</span><span class="string">,</span> <span class="string">"http://localhost"</span><span class="string">]</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">retries:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>image<br>指定镜像名称或镜像ID，所有服务都必要要么通过build，要么通过image来指定镜像。</p></li><li><p>labels<br>为容器添加Docker元数据信息</p></li><li><p>network_mode<br>设置网络模式，与docker run的–network一样，如bridge，host，none等，也可以是如下形式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network_mode:</span> <span class="string">"service:[service name]"</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">"container:[container name/id]"</span></span><br></pre></td></tr></table></figure></li><li><p>networks<br>配置容器连接的网络，如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">service1:</span></span><br><span class="line">        <span class="attr">networks:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">some-network</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">other-network</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">    <span class="attr">some-network:</span></span><br><span class="line">    <span class="attr">other-network:</span></span><br></pre></td></tr></table></figure></li><li><p>ports<br>暴露端口信息，遵循端口映射规则。</p></li><li><p>secrets<br>存储敏感数据，如密码等信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">MYSQL_ROOT_PASSWORD_FILE:</span> <span class="string">/run/secrets/db_root_password</span></span><br><span class="line">    <span class="attr">secrets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">db_root_password</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">my_other_secret</span></span><br><span class="line"></span><br><span class="line"><span class="attr">secrets:</span></span><br><span class="line">    <span class="attr">my_secret:</span></span><br><span class="line">        <span class="attr">file:</span> <span class="string">./my_secret.txt</span></span><br><span class="line">    <span class="attr">my_other_secret:</span></span><br><span class="line">        <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>volumes<br>容器的数据卷挂在路径设置，可以设置多个，与docker -v类似，如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cache/:/tmp/cache</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">~/configs:/etc/configs/:ro</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-Compose命令"><a href="#4-Compose命令" class="headerlink" title="4. Compose命令"></a>4. Compose命令</h2><p>Compose命令默认是针对项目本身，也可以指定为项目中的服务或容器。<br>docker-compose 命令的基本使用格式为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose [-f=&lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span><br></pre></td></tr></table></figure><p>命令选项</p><ul><li>-f, –file 指定模板文件，默认为docker-compose.yml，可多次指定</li><li>-p, –project-name 指定项目名称，默认为所在目录名称</li><li>–x-networking 使用Docker的可插拔网络特性</li><li>–x-networking-driver 指定网络驱动，默认为bridge</li><li>–verbose 输出更多调试信息</li><li>-v, –version 打印版本信息</li></ul><p>命令使用说明</p><ul><li>build 格式为<code>docker-compose build [options] [SERVICE...]</code>，构建项目中的服务容器，选项包括 –force-rm（删除构建过程中的临时容器），–no-cache（构建镜像过程不使用cache），–pull（始终尝试通过pull来获取最新版本镜像）</li><li>config 验证模板文件格式是否正确</li><li>down 停止up命令启动的容器，并移除网络</li><li>exec 进入指定的容器</li><li>images 列出compose文件中包含的镜像</li><li>kill 格式为<code>docker-compose kill [options] [SERVICE...]</code>，强制停止服务容器</li><li>logs 格式为<code>docker-compose logs [options] [SERVICE...]</code>，查看服务容器的输出</li><li>pause 格式为<code>docker-compose pause [SERVICE...]</code>， 暂停一个服务容器</li><li>port 格式为<code>docker-compose port [options] SERVICE PRIVATE_PORT</code>，打印容器端口所映射的公共端口，–index=index（指定容器序号，默认为1）</li><li>ps 格式为<code>docker-compose ps [options] [SERVICE...]</code>，列出项目中目前的所有容器</li><li>pull 格式为<code>docker-compose pull [options] [SERVICE...]</code>，拉去服务依赖的镜像</li><li>push 推送服务依赖的镜像到Docker镜像仓库</li><li>restart 重启项目中服务，格式为<code>docker-compose restart [options] [SERVICE...]</code></li><li>rm 删除所有停止的服务容器，格式<code>docker-compose rm [options] [SERVICE...]</code>， -f（强制直接删除）</li><li>run 在指定服务上执行一个命令，不会自动创建端口，以避免冲突</li><li>scale 格式<code>docker-compose scale [options] [SERVICE=NUM...]</code>，设置指定服务运行的容器个数，少则新建，多则删除</li><li>start 格式<code>docker-compose start [SERVICE...]</code>，启动已经存在的服务容器</li><li>stop 停止运行中的容器</li><li>top 查看各个服务容器内运行的进程</li><li>unpause 格式<code>docker-compose unpause [SERVICE...]</code>，恢复处于暂停状态的服务</li><li>up 格式<code>docker-compose up [options] [SERVICE...]</code>，尝试自动完成包括构建镜像，创建服务，启动服务，关联服务相关容器的一系列操作，大部分时候都可以通过该命令来启动一个项目，-d（在后台启动所有容器）。<code>docker-compose up --no-recreate</code>只启动处于停止状态的容器，忽略已经运行的服务，<code>docker-compose up --no-deps -d &lt;SERVICE_NAME&gt;</code>重新创建服务，但不影响到它所依赖的服务</li></ul><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>Compose是Docker官方的服务容器编排工具，对一些简单的但包含多个组件的服务可以借助Compose来快速搭建环境，如开源的错误监控系统sentry，包括sentry服务本身，redis，postgres。对于业务生产环境，则一般使用功能更为丰富的第三方编排系统如Kubernetes来部署。</p></br>     欢迎关注我的微信公众号：jboost-ksxy———————————————————————————————————————————————————————————————![微信公众号](/assets/qrcode-05.jpg) ]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件系统的非功能要素与设计思路</title>
      <link href="/arch-1.html"/>
      <url>/arch-1.html</url>
      
        <content type="html"><![CDATA[<p>对于具备一定复杂度的软件系统，我们一般都会进行架构设计。架构设计中涉及功能要素与非功能要素，功能要素对应业务需求，关注需要实现的业务模块与功能，非功能要素对应系统本身的运行需求，一般包括性能、可用性、可伸缩性、可扩展性、安全等几个方面，软件系统的非功能架构设计，就是通过一些技术手段来满足这几个方面的运行需求。</p><a id="more"></a><h2 id="一-性能"><a href="#一-性能" class="headerlink" title="一. 性能"></a>一. 性能</h2><p>性能直观表现就是用户使用系统时响应的快慢程度。一般有响应时间（如用户点击一个按钮经服务端处理后，收到反馈的时长）、吞吐量（系统单位时间内能处理事务的个数，TPS —— Transaction-Per-Second）、支持并发数（能支持同时处理多少个并发在线用户）等衡量指标。</p><p>系统性能可通过相应的测试进行评估，一般包括：</p><ul><li>性能测试：验证系统在资源可接受范围内，是否能达到性能预期。比如2核8G的服务器配置，在CPU负载不超过指定值的情况下，系统的吞吐量能否达到1k。</li><li>负载测试：不断给系统增加并发请求以增加对系统的压力，直到系统的某项或多项性能指标达到安全临界值。这时候，继续增加压力，系统的处理能力如吞吐量不增反降。</li><li>压力测试：在超过安全负载的情况下，继续对系统施加压力，直到系统崩溃或不能再处理任何请求，即系统在达到崩溃临界点时最大能承受多大的压力。</li><li>稳定测试：在模拟生产环境的场景下，包括软硬件配置、网络环境等条件，加载一定的业务压力（业务压力也尽量模拟生产环境下的情况），运行一段比较长的时间，看系统是否能稳定地运行。</li></ul><p>测试报告形如下表</p><p>|并发数|响应时间（ms）|TPS|错误率（%）|CPU负载|内存使用（GB）<br>:—:|:—:|:—:|:—:|:—:|:—:|:—:|<br>性能测试|10|500|20|0|5|8<br>性能测试|30|1000|40|2|15|14<br>负载测试|40|1200|45|20|30|16<br>压力测试|60|2000|30|40|50|16<br>压力测试|80|超时|0|100|-|-</p><p>系统高性能的设计思路：</p><ol><li>客户端优化，包括浏览器缓存（App本地缓存）、静态资源压缩、减少Cookie传输，减少HTTP请求（合并接口）等。</li><li>缓存，包括CDN缓存与服务端缓存。CDN将静态内容分发至离用户最近的网络服务商机房，通过反向代理服务器，缓存热点资源，从而加快用户请求的响应速度，减轻后端服务的负载压力；服务端缓存通过本地缓存与分布式缓存，缓存热点数据，从而加快数据请求过程，减轻数据库的负载压力。</li><li>异步，对不需要立即获取结果的操作异步化，减少用户响应时间，改善系统的可扩展性与性能。异步一般通过消息队列实现。</li><li>集群，将同一个服务使用多个实例通过负载均衡来提高服务的整体处理能力。集群需要服务实现无状态化，即对每一个请求的处理在服务本地不保留任何数据与状态。</li><li>代码优化，多线程，资源服用（数据库连接池、线程池、HTTP连接池等），减少HTTP及数据库访问次数（如避免在循环中调用数据库访问，可优化成一次获取数据到本地再处理）。</li><li>数据库访问，索引的使用，读写分离，分库分表，NoSQL的引入，存储结构优化等。</li></ol><h2 id="二-可用性"><a href="#二-可用性" class="headerlink" title="二. 可用性"></a>二. 可用性</h2><p>系统的高可用就是当系统的某个服务器宕机时，系统服务或系统的核心服务依然可用。</p><p>对于互联网服务，一般要求7*24小时提供不间断的服务能力。系统的可用性一般就通过服务可用时间比来衡量，如三个9的可用性，就是在一段考核时间内，99.9%的时间服务可用。</p><p>系统高可用的设计主要通过冗余与失效转移的手段来实现：</p><ol><li>冗余，在系统的每一层，都通过部署多台服务器以负载均衡的形式提供访问（集群的形式），避免单点问题。关系型数据库无法通过集群部署，可提供多台互相备份，在主服务挂掉时，从服务能快速切换。</li><li>失效转移，在集群中其中一台服务器出现故障时，负载均衡能实时监测到并且不再往这台服务器分发请求，已失败的请求能重新调度到其它可用服务器。</li></ol><p>提高系统高可用也需要在开发测试阶段尽可能地进行质量保证，通过代码review，多维度测试，预发布验证，灰度发布等手段，来减少生产环境的bug引入率，提高系统的可用性。同时，在各环节添加必要的监控与告警，包括服务器资源、网络、应用等多个维度，当问题发生时能及时获得告警通知。即一方面通过多种途径规避问题的发生，另一方面当问题真正发生时，能快速响应尽可能减少影响。</p><h2 id="三-可伸缩性"><a href="#三-可伸缩性" class="headerlink" title="三. 可伸缩性"></a>三. 可伸缩性</h2><p>可伸缩性是从提升系统服务能力的角度衡量的一个因素，如果能通过不断向集群中加入服务器就能提高系统的处理能力，来应对不断增长的用户并发访问，则系统是具有可伸缩性的。</p><p>系统可伸缩性的设计思路：</p><ol><li>应用服务无状态化，对任何一个请求集群中任何一台服务器处理都能做到无差异化。</li><li>缓存服务器的伸缩可能导致缓存路由失效，可通过一致性Hash算法来降低缓存路由失效的比率。</li><li>关系型数据库很难通过集群实现可伸缩性，需要在数据库之外实现，如分库分表（不到万不得已不要使用分表）。</li><li>NoSQL，本身就具备良好的伸缩性，如HDFS。</li></ol><h2 id="四-可扩展性"><a href="#四-可扩展性" class="headerlink" title="四. 可扩展性"></a>四. 可扩展性</h2><p>系统的可扩展性关注功能性需求，衡量系统能否快速响应需求变化，即增加一个功能基本不需要修改现有系统或调整很少。</p><p>系统可扩展性的设计思路：</p><ol><li>解耦，事件驱动架构，生产者、消费者模式，如基于消息队列</li><li>拆分，将复杂业务拆分成简单的职责单一的，高内聚、低耦合的服务单元，新增服务对现有服务影响不大</li><li>复用，将比较固定的不常变动的服务下沉作为基础服务，新的业务功能基于基础服务的复用实现</li><li>开放服务，将平台服务能力通过开放接口的形式提供给第三方，拓展平台业务服务能力</li></ol><h2 id="五-安全"><a href="#五-安全" class="headerlink" title="五. 安全"></a>五. 安全</h2><p>攻击无处不在，衡量系统安全性的标准是系统针对现有的与潜在的各种攻击与窃密手段，是否有相应的可靠的应对策略。</p><p>系统的安全保障设计思路：</p><ol><li>信息加密，包括单项散列加密（如密码加密，MD5，SHA）、对称加密、非对称加密（公钥私钥，https传输）</li><li>信息过滤，如敏感词过滤，黑名单机制等</li><li>风险控制，通过规则引擎控制访问，或基于统计模型进行监控告警</li><li>限流，限制单位时间内的访问量，如手机验证码</li></ol><p>安全是相对的，没有绝对安全的系统，只能通过一些保障手段使攻击成本大于其获利成本来保障系统免受攻击。</p><h2 id="六-总结"><a href="#六-总结" class="headerlink" title="六. 总结"></a>六. 总结</h2><p>本文主要参考《大型网站技术架构》，对软件系统的几个核心的非功能性要素及其设计思路进行了介绍与总结，为软件系统的设计提供参考。</p>]]></content>
      
      
      <categories>
          
          <category> Architecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot（十二）：LocalDateTime格式化处理</title>
      <link href="/springboot-localdatetime.html"/>
      <url>/springboot-localdatetime.html</url>
      
        <content type="html"><![CDATA[<p>Java 8之后，日期类的处理建议使用java.time包中对应的LocalDateTime, LocalDate, LocalTime类。（参考<a href="/jdk8.html">Java8新特性</a>）</p><a id="more"></a><p>在Spring Boot中（验证版本：2.1.5.RELEASE），日期类的序列化格式可能不是自己所希望的，需要定义为自己的格式。有两种方式实现。</p><h2 id="1-注解方式"><a href="#1-注解方式" class="headerlink" title="1. 注解方式"></a>1. 注解方式</h2><p>分别使用 @JsonFormat， @DateTimeFormat 来定义序列化（bean转json）与反序列（json转bean）时的格式，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line"><span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line"><span class="keyword">private</span> LocalDateTime dateTime;</span><br></pre></td></tr></table></figure><h2 id="2-统一配置方式"><a href="#2-统一配置方式" class="headerlink" title="2. 统一配置方式"></a>2. 统一配置方式</h2><p>定义一个配置类，对ObjectMapper对象进行定制，指定日期类对应的序列化与反序列化处理对象，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalDateTimeFormatConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_DATE_TIME_PATTERN = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_DATE_PATTERN = <span class="string">"yyyy-MM-dd"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_TIME_PATTERN = <span class="string">"HH:mm:ss"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectMapper <span class="title">objectMapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        JavaTimeModule javaTimeModule = <span class="keyword">new</span> JavaTimeModule();</span><br><span class="line">        javaTimeModule.addSerializer(LocalDateTime<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">LocalDateTimeSerializer</span>(<span class="title">DateTimeFormatter</span>.<span class="title">ofPattern</span>(<span class="title">DEFAULT_DATE_TIME_PATTERN</span>)))</span>;</span><br><span class="line">        javaTimeModule.addSerializer(LocalDate<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">LocalDateSerializer</span>(<span class="title">DateTimeFormatter</span>.<span class="title">ofPattern</span>(<span class="title">DEFAULT_DATE_PATTERN</span>)))</span>;</span><br><span class="line">        javaTimeModule.addSerializer(LocalTime<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">LocalTimeSerializer</span>(<span class="title">DateTimeFormatter</span>.<span class="title">ofPattern</span>(<span class="title">DEFAULT_TIME_PATTERN</span>)))</span>;</span><br><span class="line">        javaTimeModule.addDeserializer(LocalDateTime<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">LocalDateTimeDeserializer</span>(<span class="title">DateTimeFormatter</span>.<span class="title">ofPattern</span>(<span class="title">DEFAULT_DATE_TIME_PATTERN</span>)))</span>;</span><br><span class="line">        javaTimeModule.addDeserializer(LocalDate<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">LocalDateDeserializer</span>(<span class="title">DateTimeFormatter</span>.<span class="title">ofPattern</span>(<span class="title">DEFAULT_DATE_PATTERN</span>)))</span>;</span><br><span class="line">        javaTimeModule.addDeserializer(LocalTime<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">LocalTimeDeserializer</span>(<span class="title">DateTimeFormatter</span>.<span class="title">ofPattern</span>(<span class="title">DEFAULT_TIME_PATTERN</span>)))</span>;</span><br><span class="line">        objectMapper.registerModule(javaTimeModule);</span><br><span class="line">        <span class="keyword">return</span> objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>注解的方式需要在每个属性上进行标注，如果日期类属性较多则较为繁琐，自定义配置类方式可以对日期进行统一的格式化处理。两者都存在的情况下，以注解为准，即注解方式会覆盖统一配置方式。</p><p>———————————————————————————————————————————————</p><p><img src="/assets/qrcode-05.jpg" alt="微信公众号"><br>欢迎关注我的微信公众号，及时获取最新分享</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx（一）：基本用途与用法</title>
      <link href="/nginx-1.html"/>
      <url>/nginx-1.html</url>
      
        <content type="html"><![CDATA[<p>最近由于事情较多，加上个人的懈怠，有一段时间没更新了。习惯的养成很难，但一旦养成，从中的受益也常会超乎意料，还是得坚持。接下来准备对一些开发维护过程中常用的工具软件与服务进行整理，如本系列的nginx，后续的redis，消息队列，jenkins等，欢迎关注。</p><p>nginx是一个轻量级的高性能的HTTP服务器，在Web应用部署中很常见。也正因为很常见，所以掌握其基本原理与用法显得很有必要，本系列文章对nginx的相关内容进行梳理，以供初学者参考、熟悉者回顾。</p><a id="more"></a><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>在nginx以前，比较流行的HTTP服务器应属Apache（LAMP中A就是指Apache）。但根据netcraft的调查显示，近两年nginx已经超越Apache，成为市场占有率第一的HTTP服务器。如下图<br><img src="/assets/httpserver-trend.png" alt="httpserver-trend"></p><p>nginx能战胜Apache有几个主要原因，一是其足够轻量，不管是安装与维护，还是资源的占用都非常简单与轻量；二是其高性能，nginx基于事件驱动机制，具备非常好的性能，据称能支持高达50000个并发连接数；三是其具有很高的稳定性，相对其它HTTP服务器在访问负载很高时会导致内存耗尽进而可能失去响应，nginx采用分阶段资源分配技术，CPU与内存占有率都很低，在高并发场景下，稳定性更高。</p><p>在日常使用中，nginx主要在三个方面为我们提供服务：</p><ol><li>作为静态服务器提供静态资源的访问，如html网站，文件等</li><li>为后端服务提供反向代理</li><li>为反向代理的后端服务集群提供负载均衡</li></ol><h2 id="2-静态服务器"><a href="#2-静态服务器" class="headerlink" title="2. 静态服务器"></a>2. 静态服务器</h2><p>静态服务器一般就是提供Web前端的一些静态资源，如html页面，js、css文件的访问，用法配置示例如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location &#x2F;static&#x2F; &#123;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        alias &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;garten-web&#x2F;dist&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中</p><ul><li>index指定网站的初始页，可以跟多个文件，空格隔开，nginx根据顺序检查文件是否存在，如上例如果用户直接输入/static则会访问/usr/local/nginx/html/garten-web/dist/index.html（如果不存在则再看index.htm是否存在）</li><li>alias是与root对应的用法，都用于访问本地文件系统的资源，在匹配到location配置的url路径后，在alias或root配置的目录寻找对应的资源，区别在于：alias就在配置的目录下寻找对应的资源，而root则会将location配置路径附加到root路径后，在拼接后的目录下寻找对应的资源。如上例中访问 /static/hello.html，使用alias则会访问到/usr/local/nginx/html/garten-web/dist/hello.html，使用root则会访问到/usr/local/nginx/html/garten-web/dist/static/hello.html</li></ul><blockquote><p>alias配置的目录后有没有“/”要与location后面的路径是否有“/”保持一致，否则找不到资源</p></blockquote><h2 id="3-反向代理"><a href="#3-反向代理" class="headerlink" title="3. 反向代理"></a>3. 反向代理</h2><p>了解反向代理之前先看看什么是正向代理。</p><p>举个不那么和谐的例子，当你需要访问某些国外网站的时候，直接输入域名是打不开的，这时可以找一台能访问这些网站的服务器来做代理（这台服务器能访问你访问不了的网站，你能访问这台服务器），你访问网站时，实际是通过代理来中转访问。这种情况，你是知道目标网站的地址的，但是服务器只知道请求来自于代理服务器，而不知道是你（真正的客户端）在访问，所以正向代理代理的是客户端，是对服务端隐藏了真实的客户端信息。</p><p>而对于反向代理，客户端是明确的，但具体在后端请求了哪个服务却不明确了，比如你请求的是 <a href="http://www.abc.com，" target="_blank" rel="noopener">www.abc.com，</a> 在反向代理端，它可能是 <a href="http://www.cba.com" target="_blank" rel="noopener">www.cba.com</a> 的代理，也可能是 <a href="http://www.ccc.com" target="_blank" rel="noopener">www.ccc.com</a> 的代理， 不看配置你是不知道它到底代理的谁。因此，反向代理代理的是服务器端，隐藏了服务端的信息。</p><p>nginx中配置反向代理很简单，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location &#x2F;api&#x2F; &#123;</span><br><span class="line">        proxy_pass  http:&#x2F;&#x2F;192.168.0.120:8080&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用nginx的反向代理，可以解决两个问题：</p><ol><li>跨域问题：前后端分离情况下，前端网页访问后端接口存在跨域问题，对后端接口的访问统一通过前端网站域名访问，在nginx中通过对接口的路径进行匹配后反向代理到后端接口服务。如上例中访问接口login可通过 <a href="http://localhost/api/login" target="_blank" rel="noopener">http://localhost/api/login</a> 访问，nginx将会反向代理到 <a href="http://192.168.0.120:8080/login" target="_blank" rel="noopener">http://192.168.0.120:8080/login</a> 后端接口地址</li><li>负载均衡：如果后端服务部署的是服务器集群，则对服务的访问需要做负载均衡，nginx通过反向代理结合upstream来实现负载均衡</li></ol><p>反向代理的路径路由规则：如果proxy_pass配置的路径最后带“/”，则类似于alias，不会在proxy_pass的uri后面拼接location的路径，如果没带“/”，则会进行拼接，类似于root。<br>比如我们按上例配置访问 <a href="http://localhost/api/login" target="_blank" rel="noopener">http://localhost/api/login</a> 则代理到 <a href="http://192.168.0.120:8080/login" target="_blank" rel="noopener">http://192.168.0.120:8080/login</a></p><p>但如果是按以下配置（proxy_pass配置路径不带子路径，且后面没带“/”），</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;api&#x2F; &#123;</span><br><span class="line">    proxy_pass  http:&#x2F;&#x2F;192.168.0.120:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则会被代理到 <a href="http://192.168.0.120:8080/api/login，" target="_blank" rel="noopener">http://192.168.0.120:8080/api/login，</a> 将location的路径拼接了。</p><p>如果proxy_pass配置的路径带子路径，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;api&#x2F; &#123;</span><br><span class="line">    proxy_pass  http:&#x2F;&#x2F;192.168.0.120:8080&#x2F;api&#x2F;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则不管后面带不带“/”，都不会拼接location的路径，只是与/api/后面的部分进行拼接。</p><blockquote><p>注意：如果是不带“/”   proxy_pass  <a href="http://192.168.0.120:8080/api/login" target="_blank" rel="noopener">http://192.168.0.120:8080/api/login</a> 则会被代理到 proxy_pass  <a href="http://192.168.0.120:8080/apilogin" target="_blank" rel="noopener">http://192.168.0.120:8080/apilogin</a> 了， 这时，可通过将location与proxy_pass配置路径保持一致即可——要么都带“/”，要么都不带。</p></blockquote><h2 id="4-负载均衡"><a href="#4-负载均衡" class="headerlink" title="4. 负载均衡"></a>4. 负载均衡</h2><p>nginx通过反向代理proxy_pass结合upstream来对后端服务器集群实现负载均衡，在nginx配置的http节点下定义upstream，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    server 192.168.0.120:8080;</span><br><span class="line">    server 192.168.0.121:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在server节点下的location里配置反向代理，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;api&#x2F; &#123;</span><br><span class="line">    proxy_pass  http:&#x2F;&#x2F;backend&#x2F;api&#x2F;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就会将接收到的请求顺序循环分配到后端的服务器上，如果某个服务器宕机，也能自动将其剔除，不再分配请求，直到其恢复。这是默认的负载均衡策略，即轮询策略。</p><p>nginx负载均衡的策略包括:</p><ol><li><p>权重轮询，权重轮询在上述轮询策略的基础上加了服务器的请求分配权重，以根据服务器配置的不同，将更多的请求分配到配置更高的服务器上。如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    server 192.168.0.120:8080 weight&#x3D;10;</span><br><span class="line">    server 192.168.0.121:8080 weight&#x3D;20;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分配给121的请求将比分配给120的请求多一倍。</p></li><li><p>ip_hash，通过对请求来源ip求hash值，将相同ip的请求分配到相同的服务器上，此种策略可以解决分布式session的问题。配置如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 192.168.0.120:8080;</span><br><span class="line">    server 192.168.0.121:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>url_hash，对访问url求hash值，将同一个url的请求分配到相同的服务器上，对有本地缓存的场景比较适用。配置如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    server 192.168.0.120:8080;</span><br><span class="line">    server 192.168.0.121:8080;</span><br><span class="line">    hash $request_uri;</span><br><span class="line">    hash_method crc32;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hash_method指定hash算法</p></li><li><p>fair，根据后端服务器的响应时间来合理分配请求，响应时间短的优先分配。配置如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    server 192.168.0.120:8080;</span><br><span class="line">    server 192.168.0.121:8080;</span><br><span class="line">    fair;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>nginx以其轻量级、高性能、高稳定性的特性成为HTTP服务器的主流，是不论开发者还是运维人员都必须了解掌握的服务软件。本文从静态服务器，反向代理，负载均衡三个日常使用场景的角度对nginx进行了简单介绍。</p></br>     欢迎关注我的微信公众号：jboost-ksxy ———————————————————————————————————————————————————————————————![微信公众号](/assets/qrcode-05.jpg) ]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker笔记（十一）：Dockerfile详解与最佳实践</title>
      <link href="/docker-11.html"/>
      <url>/docker-11.html</url>
      
        <content type="html"><![CDATA[<p>Dockerfile是一个文本文件，包含了一条条指令，每条指令对应构建一层镜像，Docker基于它来构建一个完整镜像。本文介绍Dockerfile的常用指令及相应的最佳实践建议。</p><a id="more"></a><h2 id="1-理解构建上下文（build-context）"><a href="#1-理解构建上下文（build-context）" class="headerlink" title="1. 理解构建上下文（build context）"></a>1. 理解构建上下文（build context）</h2><p>Docker镜像通过<code>docker build</code>指令构建，该指令执行时当前的工作目录就是docker构建的上下文，即build context，上下文中的文件及目录都会作为构建上下文内容发送给Docker Daemon。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build --no-cache -t helloapp:v2 -f dockerfiles/Dockerfile context</span><br></pre></td></tr></table></figure><p>如上 –no-cache 表示镜像构建时不使用缓存，-f 指定Dockerfile文件位置， context 指定build context目录。</p><p>将一些非必要的文件包含到build context中，会导致build context过大，从而导致镜像过大，会增加镜像构建、推送及拉取的时间，以及容器运行时的大小。</p><p>执行docker build时会显示build context的大小，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sending build context to Docker daemon  187.8MB</span><br></pre></td></tr></table></figure><p><strong>最佳实践建议</strong></p><ol><li>使用.dockerignore来排除不需要加入到build context中的文件，类似于.gitignore</li><li>不要安装不必要的包，所有包含的东西都是镜像必须的，非必须的不要包含。</li><li>解耦应用，如果应用有分层，解耦应用到多个容器，便于横向扩展，如web应用程序栈包含web服务应用，数据库，缓存等。</li><li>最少化镜像层数：只有RUN、COPY、ADD指令会创建镜像层，其它指令创建临时的中间镜像，不会增大镜像构建的大小</li><li>如果可能，尽可能使用多阶段构建，只复制你需要的组件到最终镜像，这使得你可以在中间构建阶段包含工具与debug信息，同时又不会增大最终镜像的大小。</li><li>排序多行参数：将参数按字母排序，有利于避免包重复，及后续的维护与提高易读性</li></ol><h2 id="2-FROM"><a href="#2-FROM" class="headerlink" title="2. FROM"></a>2. FROM</h2><p><strong>作用</strong><br>FROM指定基础镜像，每一个定制镜像，必须以一个现有镜像为基础。因此一个Dockerfile中FROM是必须的指令，并且必须是第一条。使用格式，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM &lt;image&gt;:&lt;tag&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注释以<span class="comment">#开头。基础镜像的tag可不指定，默认使用latest</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 示例：FROM mysql:5.7</span></span><br></pre></td></tr></table></figure><p><strong>最佳实践建议</strong></p><ol><li>如果不想以任何镜像为基础，则可以使用<code>FROM scratch</code></li><li>尽量使用官方镜像作为基础镜像</li><li>推荐使用Alpine镜像，因为它足够轻量级（小于5MB），但麻雀虽小五脏俱全，基本具有Linux的基础功能</li></ol><h2 id="3-RUN"><a href="#3-RUN" class="headerlink" title="3. RUN"></a>3. RUN</h2><p><strong>作用</strong><br>用来执行命令行命令，是最常用的指令之一。使用格式，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> shell格式，跟直接在命令行输入命令一行</span></span><br><span class="line">RUN &lt;命令&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 示例：RUN mkdir -p /usr/src/redis </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">exec</span>格式，类似于函数调用</span></span><br><span class="line">RUN ["可执行文件", "参数1", "参数2"]</span><br></pre></td></tr></table></figure><p>RUN指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建指令中指定–no-cache参数，如：<code>docker build --no-cache</code></p><p><strong>最佳实践建议</strong></p><ol><li>将比较长的复杂的指令通过 \ 分为多行，让Dockerfile文件可读性、可理解性、可维护性更高，将多个指令通过 &amp;&amp; 连接，减少镜像的层数</li><li>确保每一层只添加必需的东西，任何无关的东西都应该清理掉，如所有下载、展开的文件，apt 缓存文件等，以尽可能减少镜像各层的大小</li><li>将<code>RUN apt-get update</code> 与 <code>RUN apt-get install</code> 组合成一条RUN指令（将apt-get update单独作为一条指令会因为缓存问题导致后续的apt-get install 指令失败）</li></ol><p>比如先按如下Dockerfile创建了一个镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:18.04</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y curl</span><br></pre></td></tr></table></figure><p>一段时间后，再按以下Dockerfile创建另一个镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:18.04</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y curl nginx</span><br></pre></td></tr></table></figure><p>因为RUN指令创建的镜像层会被缓存，所以下面镜像的<code>RUN apt-get update</code>并不会执行，直接使用了前面构建的镜像层，这样，curl、nginx就可能安装已经过时的版本。</p><p>因此 在 <code>apt-get update</code> 之后立即接 <code>&amp;&amp; apt-get install -y</code> ，这叫做“ cache busting”（缓存破坏），也可以通过指定包的版本，来达到同样的目的，这叫“ version pinning” （版本指定）示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">    reprepro \</span><br><span class="line">    ruby1.9.1 \</span><br><span class="line">    ruby1.9.1-dev \</span><br><span class="line">    #删除apt 缓存减少镜像层的大小</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br></pre></td></tr></table></figure><ol start="4"><li>使用管道（pipes）。一些RUN指令依赖于从一个指令管道输出到另一个，如<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN wget -O - https://some.site | wc -l &gt; /number</span><br></pre></td></tr></table></figure>Docker使用/bin/sh -c 解释器来执行这些指令，只会评估管道最后一条命令的退出码来确定是否成功，如上例中只要wc -l成功了就算wget失败，也会认为是成功的。<br>如果要使管道命令的任何一步报错都导致指令失败，则可通过加 <code>set -o pipefile &amp;&amp;</code> 来实现，如<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN set -o pipefail &amp;&amp; wget -O - https://some.site | wc -l &gt; /number</span><br></pre></td></tr></table></figure>不是所有的shell都支持<code>-o pipefail</code>选项，如果不支持的话可以使用如下形式，显式地指定一个支持的shell<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN ["/bin/bash", "-c", "set -o pipefail &amp;&amp; wget -O - https://some.site | wc -l &gt; /number"]</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-COPY-ADD"><a href="#4-COPY-ADD" class="headerlink" title="4. COPY | ADD"></a>4. COPY | ADD</h2><p><strong>作用</strong><br>COPY从构建上下文的目录中复制文件/目录到镜像层的目标路径。使用格式，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt;... &lt;目标路径&gt; </span><br><span class="line">COPY [--chown=&lt;user&gt;:&lt;group&gt;] ["&lt;源路径1&gt;",... "&lt;目标路径&gt;"]</span><br></pre></td></tr></table></figure><p>同RUN一样，也有两种格式。源文件可以多个，甚至可以是通配符，目标路径是容器的绝对路径，可以是相对工作目录（WORKDIR指定）的相对路径，目标路径不存在时会自动创建。使用<code>--chown=&lt;user&gt;:&lt;group&gt;</code>来改变文件的所属用户与组。<br>ADD与COPY的使用格式与性质差不多，但功能更丰富，如源路径可以是URL（下载后放到目标路径下，文件权限为600），也可以为tar压缩包，压缩格式为gzip，bzip2及xz的情况下，ADD 指令将会自动解压缩这个压缩文件到目标路径去 </p><p><strong>最佳实践建议</strong></p><ol><li>如果在Dockerfile中有多处需要使用不同的文件，分别使用COPY，而不是一次性COPY所有的，这可以保证每一步的构建缓存只会在对应文件改变时，才会失效。比如<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">COPY requirements.txt /tmp/</span><br><span class="line">RUN pip install --requirement /tmp/requirements.txt</span><br><span class="line">COPY . /tmp/</span><br></pre></td></tr></table></figure>如果把<code>COPY . /tmp/</code> 放在RUN上面，将使RUN层镜像缓存失效的场景更多——因为 . 目录（当前目录）中任何一个文件的改变都会导致缓存失效。</li><li>因为镜像大小的原因， 使用ADD来获取远程包是非常不推荐的，应该使用curl或wget，这种方式可以在不再需要使用时删除对应文件，而不需要增加额外的层，如，应避免如下用法<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ADD http://example.com/big.tar.xz /usr/src/things/</span><br><span class="line">RUN tar -xJf /usr/src/things/big.tar.xz -C /usr/src/things</span><br><span class="line">RUN make -C /usr/src/things all</span><br></pre></td></tr></table></figure>而应使用<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RUN mkdir -p /usr/src/things \</span><br><span class="line">    &amp;&amp; curl -SL http://example.com/big.tar.xz \</span><br><span class="line">    | tar -xJC /usr/src/things \</span><br><span class="line">    &amp;&amp; make -C /usr/src/things all</span><br></pre></td></tr></table></figure></li><li>如果不需要使用ADD的自动解压特性，尽量使用COPY（语义更清晰）</li></ol><h2 id="5-CMD"><a href="#5-CMD" class="headerlink" title="5. CMD"></a>5. CMD</h2><p><strong>作用</strong><br>CMD指定容器的启动命令。容器实质就是进程，进程就需要启动命令及参数，CMD指令就是用于指定默认的容器主进程的启动命令的。使用格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> shell格式 </span></span><br><span class="line">CMD &lt;命令&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">exec</span>格式</span></span><br><span class="line">CMD ["可执行文件", "参数1", "参数2"...]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数列表格式，在指定了ENTRYPOINT指令后，用CMD来指定具体的参数</span></span><br><span class="line">CMD ["参数1", "参数2"...]</span><br></pre></td></tr></table></figure><p>在容器运行时可以指定新的命令来覆盖Dockerfile中设置的这个默认命令 </p><p><strong>最佳实践建议</strong></p><ol><li>服务类镜像建议：<code>CMD [&quot;apache2&quot;,&quot;-DFOREGROUND&quot;]</code>，<code>CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</code> 容器进程都应以前台运行，不能以后台服务的形式运行，否则启动就退出了。</li><li>其它镜像，建议给一个交互式的shell，如bash，python，perl等：<code>CMD [&quot;python&quot;]</code>, <code>CMD [&quot;php&quot;, &quot;-a&quot;]</code></li></ol><h2 id="6-ENTRYPOINT"><a href="#6-ENTRYPOINT" class="headerlink" title="6. ENTRYPOINT"></a>6. ENTRYPOINT</h2><p><strong>作用</strong><br>ENTRYPOINT的目的和CMD一样，都是在指定容器启动是要运行的程序及参数。 ENTRYPOINT在运行时也可以替代，不过比CMD要略显繁琐，需要通过docker run的参数 –entrypoint 来指定。如果指定了ENTRYPOINT，则CMD将只是提供参数，传递给ENTRYPOINT。使用ENTRYPOINT可以在容器运行时直接为默认启动程序添加参数。 与RUN指令格式一样，ENTRYPOINT也分为exec格式和shell格式。</p><p><strong>最佳实践建议</strong></p><ol><li>ENTRYPOINT可用来指定镜像的主命令，允许镜像能像命令一样运行，可以使用CMD来作为默认的标志（参数），如<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT ["s3cmd"]</span><br><span class="line">CMD ["--help"]</span><br></pre></td></tr></table></figure>直接run时，相当于执行了<code>s3cmd --help</code>。也可以使用shell脚本，在脚本中做一些预处理的工作，如<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">COPY ./docker-entrypoint.sh /</span><br><span class="line">ENTRYPOINT ["/docker-entrypoint.sh"]</span><br><span class="line">CMD ["postgres"]</span><br></pre></td></tr></table></figure></li></ol><h2 id="7-LABEL"><a href="#7-LABEL" class="headerlink" title="7. LABEL"></a>7. LABEL</h2><p><strong>作用</strong><br>为镜像添加label以方便组织镜像，记录licensce信息，帮助自动化实现等等。字符串中包含空格需要转义或包含在引号中， 如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Set one or more individual labels</span></span><br><span class="line">LABEL com.example.version="0.0.1-beta"</span><br><span class="line">LABEL vendor1="ACME Incorporated"</span><br><span class="line">LABEL com.example.release-date="2019-09-12"</span><br><span class="line">LABEL com.example.version.is-production=""</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set multiple labels on one line</span></span><br><span class="line">LABEL com.example.version="0.0.1-beta" com.example.release-date="2019-09-12"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set multiple labels at once, using line-continuation characters to <span class="built_in">break</span> long lines</span></span><br><span class="line">LABEL vendor=ACME\ Incorporated \</span><br><span class="line">      com.example.is-beta= \</span><br><span class="line">      com.example.is-production="" \</span><br><span class="line">      com.example.version="0.0.1-beta" \</span><br><span class="line">      com.example.release-date="2019-09-12"</span><br></pre></td></tr></table></figure><h2 id="8-ENV"><a href="#8-ENV" class="headerlink" title="8. ENV"></a>8. ENV</h2><p><strong>作用</strong><br>ENV设置环境变量，无论是后面的其它指令，如 RUN（使用 $环境变量key 的形式） ，还是运行时的应用，都可以直接使用这里定义的环境变量。 使用格式有两种，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">只能设置一个key value</span></span><br><span class="line">ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">可以设置多个，value中如果包含空格可以使用\来进行转义，也可以通过<span class="string">""</span>括起来；也可以用反斜线来续行</span></span><br><span class="line">ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</span><br></pre></td></tr></table></figure><p>除了RUN，还有这些指令可以引用环境变量：ADD 、 COPY 、 ENV 、 EXPOSE 、 LABEL 、 USER 、 WORKDIR 、 VOLUME 、STOPSIGNAL 、 ONBUILD </p><p><strong>最佳实践建议</strong></p><ol><li>定义环境变量，更新PATH环境变量，如要使 CMD [“nginx”] 运行，可设置环境变量 <code>ENV PATH /usr/local/nginx/bin:$PATH</code></li><li>ENV也可以用于定义常量，便于维护</li></ol><h2 id="9-ARG"><a href="#9-ARG" class="headerlink" title="9. ARG"></a>9. ARG</h2><p><strong>作用</strong><br>ARG设置构建参数，即docker build命令时传入的参数。和ENV的效果差不多，都是设置环境变量，不同的是，ARG设置的是构建环境的环境变量，在容器运行时是不会存在这些环境变量的。<br>Dockerfile中的ARG指令是定义参数名称，以及默认值（可选）。该默认值可以在执行构建命令docker build时用 –build-arg &lt;参数名&gt;=&lt;值&gt; 来覆盖。使用格式，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARG &lt;参数名&gt;[=&lt;默认值&gt;]</span><br></pre></td></tr></table></figure><p><strong>最佳实践建议</strong></p><ol><li>不要使用ARG来保存密码之类的信息，因为通过docker history还是可以看到docker build执行时的所有值</li><li>使用ARG，对于使用CI系统（持续集成），用同样的构建流程构建不同的 Dockerfile 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改 </li></ol><h2 id="10-WORKDIR"><a href="#10-WORKDIR" class="headerlink" title="10. WORKDIR"></a>10. WORKDIR</h2><p><strong>作用</strong><br>WORKDIR用于指定工作目录（或当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，会自动创建。使用格式，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR &lt;工作目录路径&gt;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">**最佳实践建议**</span><br><span class="line">1. WORKDIR应该使用绝对路径，显得更为清楚、可靠</span><br><span class="line">2. 使用WORKDIR，避免使用`RUN cd … &amp;&amp; do-something`，可读性差，难以维护</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 11. VOLUME</span></span></span><br><span class="line"></span><br><span class="line">**作用**</span><br><span class="line">VOLUME用于定义匿名卷。容器运行时应该尽量保持容器存储层不发生写操作，应该将数据写入存储卷。VOLUME就是为了防止运行时用户忘记将动态文件所保存的目录挂载为卷，我们事先在Dockerfile中指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。使用格式，</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">VOLUME ["&lt;路径1&gt;", "&lt;路径2&gt;"...]</span><br><span class="line">VOLUME &lt;路径&gt;</span><br></pre></td></tr></table></figure><p>如 <code>VOLUME /data</code>， 任何向/data目录写入的数据都会写入匿名卷。可以运行容器时覆盖这个挂载设置 <code>docker run -d -v host-path:/data xxxx</code></p><p><strong>最佳实践建议</strong></p><ol><li>VOLUME应该被用来暴露所有的数据存储，配置存储，或者被容器创建的文件、目录。</li><li>如果数据动态变化，强烈建议使用VOLUME。</li></ol><h2 id="12-EXPOSE"><a href="#12-EXPOSE" class="headerlink" title="12. EXPOSE"></a>12. EXPOSE</h2><p><strong>作用</strong><br>EXPOSE指令是声明运行时容器提供的服务端口，也只是一个声明，在容器运行时并不会因为这个声明应用就一定会开启这个端口的服务,容器启动时，还是需要通过 <code>-p host-port:container-port</code>来实现映射。EXPOSE主要是帮助镜像使用者了解这个镜像服务的监听端口，以方便进行映射配置，另一个用处是在运行时如果是使用随机端口映射，也就是通过 <code>docker run -P</code>的形式时，会自动随机映射EXPOSE声明的端口。使用格式，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...] </span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">**最佳实践建议**</span><br><span class="line">1. 应该使用常用的惯用的端口，如nginx 80，mongoDB 27017</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 13. USER</span></span></span><br><span class="line"></span><br><span class="line">**作用**</span><br><span class="line">USER指令和WORKDIR相似，都是改变环境状态并影响以后的层。 WORKDIR是改变工作目录， USER则是改变之后的层在执行RUN , CMD以及ENTRYPOINT这类命令时的身份。USER帮助你切换到指定的用户，这个用户必</span><br><span class="line">须是事先建立好的，否则无法切换。使用格式</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">USER &lt;用户名&gt;[:&lt;用户组&gt;]</span><br></pre></td></tr></table></figure><p><strong>最佳实践建议</strong></p><ol><li>如果一个服务不需要权限也能运行，则使用USER来切换到非root用户，如<code>RUN groupadd -r postgres &amp;&amp; useradd --no-log-init -r -g postgres postgres</code></li><li>避免使用sudo，因为可能存在一些不可预见的TTY与信号转发行为导致问题，如果实在需要，考虑使用“gosu”。为了减少镜像层数，应避免不断切换USER<br>使用gosu示例</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 建立 redis 用户，并使用 gosu 换另一个用户执行命令</span></span><br><span class="line">RUN groupadd -r redis &amp;&amp; useradd -r -g redis redis</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载 gosu</span></span><br><span class="line">RUN wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/</span><br><span class="line">releases/download/1.7/gosu-amd64" \</span><br><span class="line">&amp;&amp; chmod +x /usr/local/bin/gosu \</span><br><span class="line">&amp;&amp; gosu nobody true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置 CMD，并以另外的用户执行</span></span><br><span class="line">CMD [ "exec", "gosu", "redis", "redis-server" ]</span><br></pre></td></tr></table></figure><h2 id="14-HEALTHCHECK"><a href="#14-HEALTHCHECK" class="headerlink" title="14. HEALTHCHECK"></a>14. HEALTHCHECK</h2><p><strong>作用</strong><br>HEALTHCHECK用于检查容器的健康状态，Docker可通过健康状态来决定是否对容器进行重新调度。使用格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HEALTHCHECK [选项] CMD &lt;命令&gt;</span><br></pre></td></tr></table></figure><p>支持的选项为</p><ul><li>–interval=&lt;间隔&gt; ：两次健康检查的间隔，默认为30秒</li><li>–timeout=&lt;时长&gt; ：执行健康检查命令的超时时间，如果超时，则本次健康检查就被视为失败，默认30秒</li><li>–retries=&lt;次数&gt; ：当连续失败指定的次数后，将容器状态置为unhealthy ，默认3次</li></ul><p>命令的返回值决定了该次健康检查的成功与否—— 0 ：成功； 1 ：失败； 2 ：保留（不要使用这个值），如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib</span><br><span class="line">/apt/lists/*</span><br><span class="line">HEALTHCHECK --interval=5s --timeout=3s \</span><br><span class="line">    CMD curl -fs http://localhost/ || exit 1</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">可以使用docker ps 或docker inspect来查看容器的健康状态。</span><br><span class="line"></span><br><span class="line">**最佳实践建议**</span><br><span class="line">1. 如果基础镜像有健康检查指令，想要屏蔽掉其健康检查，可以使用`HEALTHCHECK NONE`</span><br><span class="line">2. 对一些可能造成假死（进程还在， 但提供不了服务了）的服务建议提供健康检查，以便及时重新调度恢复服务</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 15. ONBUILD</span></span></span><br><span class="line"></span><br><span class="line">**作用**</span><br><span class="line">ONBUILD后跟的指令，只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。使用格式</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">ONBUILD &lt;其它指令&gt;</span><br></pre></td></tr></table></figure><p>它后面跟的是其它指令，比如 RUN , COPY 等，这些指令在当前镜像构建时并不会被执行。<br>ONBUILD命令在本镜像的子镜像中执行，把ONBUILD想象为父镜像为子镜像声明的一条指令，Docker会在子镜像所有命令之前执行ONBUILD指令。</p><p><strong>最佳实践建议</strong></p><ol><li>当在ONBUILD指令中使用ADD或COPY时要注意，如果build context中没有指定的资源，可能导致灾难性的错误。</li></ol><h2 id="16-用缓存镜像提高效率"><a href="#16-用缓存镜像提高效率" class="headerlink" title="16. 用缓存镜像提高效率"></a>16. 用缓存镜像提高效率</h2><p>Docker在构建镜像时会复用缓存中已经存在的镜像，如果明确不使用缓存，则可加参数<code>docker build --no-cache=true</code><br>使用缓存镜像的规则</p><ol><li>从一个已存在于缓存的父镜像开始构建，则会将当前镜像的下一行指令与所有继承于那个父镜像的子镜像比较，如果其中没有一个是使用相同的指令构建的，则缓存失效</li><li>大部分情况下，将Dockerfile中的指令与其中一个子镜像简单比较就够了，但是某些指令需要更多的检查与说明：对于ADD，COPY指令，文件内容会被检查，会计算每一个文件的checksum，checksum中不会考虑最后修改及最后访问时间，在缓存中查找时，checksum会与已经存在的镜像进行比较，如果文件中有修改，则缓存失效。除了ADD，COPY命令，缓存检查不会查看容器中的文件来决定缓存匹配，如处理<code>RUN apt-get -y update</code>命令时，容器中文件的更新不会进行检查来确定缓存是否命中， 这种情况下， 只会检查指令字符串本身是否匹配。</li><li>一旦缓存失效，所有后续的指令都会产生新的镜像，不会再使用缓存。</li></ol><h2 id="17-其它镜像构建方式"><a href="#17-其它镜像构建方式" class="headerlink" title="17. 其它镜像构建方式"></a>17. 其它镜像构建方式</h2><ol><li><p>通过标准输入来生成Dockerfile构建，不会发送build context（从stdin读取build context，只包含Dockerfile），适用于一次性构建，不需要写Dockerfile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将会构建一个名称与tag均为none的镜像</span></span><br><span class="line">echo -e 'FROM busybox\nRUN echo "hello world"' | docker build -</span><br><span class="line"><span class="meta">#</span><span class="bash">或 </span></span><br><span class="line">docker build - &lt;&lt;EOF</span><br><span class="line">FROM busybox</span><br><span class="line">RUN echo "hello world"</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建一个命名的镜像</span></span><br><span class="line">docker build -t myimage:latest - &lt;&lt;EOF</span><br><span class="line">FROM busybox</span><br><span class="line">RUN echo "hello world"</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>连字符 - 作为文件名告诉Docker从stdin读取Dockerfile</p></li><li><p>使用stdin来生成Dockerfile， 但是使用当前目录作为build context</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> build an image using the current directory as context, and a Dockerfile passed through stdin</span></span><br><span class="line">docker build -t myimage:latest -f- . &lt;&lt;EOF</span><br><span class="line">FROM busybox</span><br><span class="line">COPY somefile.txt .</span><br><span class="line">RUN cat /somefile.txt</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>使用远程git仓库构建镜像，从stdin生成Dockerfile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker build -t myimage:latest -f - https://github.com/docker-library/hello-world.git &lt;&lt;EOF</span><br><span class="line">FROM busybox</span><br><span class="line">COPY hello.c .</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ol></br>     欢迎关注我的微信公众号：jboost-ksxy———————————————————————————————————————————————————————————————![微信公众号](/assets/qrcode-05.jpg) ]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK13，不如温习下Java8</title>
      <link href="/jdk8.html"/>
      <url>/jdk8.html</url>
      
        <content type="html"><![CDATA[<p>JDK13于昨天正式GA，版本新特性可参考： <a href="https://www.oschina.net/news/109934/jdk-13-released" target="_blank" rel="noopener">https://www.oschina.net/news/109934/jdk-13-released</a> </p><a id="more"></a><p>虽然JDK更新迅速，但开发者貌似并不买账，据统计，目前仍以JDK8使用最多，预计可能还会延续好长一段时间。虽然JDK版本已至13，但对Java8的新特性，掌握程度如何呢？<br>本文对Java8的主要特性进行了梳理。供温习参考。</p><h2 id="1-接口默认方法"><a href="#1-接口默认方法" class="headerlink" title="1. 接口默认方法"></a>1. 接口默认方法</h2><p>以前的接口只允许有抽象方法（没有实现体），java8中提供了接口默认方法支持，即可以提供方法的默认实现，实现类可以直接继承，也可以覆盖。默认方法主要解决接口的修改导致现有实现类不兼容的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">InterfaceDefaultFunctionTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFunction</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function">T <span class="title">func</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认方法</span></span><br><span class="line">        <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">func2</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> t.hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//静态方法</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span>&lt;T&gt; <span class="keyword">void</span> <span class="title">print</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInterface</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyFunction&lt;String&gt; myFunction = <span class="keyword">new</span> MyFunction&lt;String&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">func</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(myFunction.func(<span class="string">"abc"</span>));</span><br><span class="line">        System.out.println(myFunction.func2(<span class="string">"abc"</span>));</span><br><span class="line">        LambdaTest.MyFunction.print(<span class="string">"efg"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认方法通过关键字 default 声明。同时也可以在接口中定义静态方法。</p><h2 id="2-函数式接口"><a href="#2-函数式接口" class="headerlink" title="2. 函数式接口"></a>2. 函数式接口</h2><p>函数式接口就是有且仅有一个抽象方法的接口（可以有其它非抽象方法），如1所示代码中 MyFunction 就是一个函数式接口，只有一个抽象方法 func， 其它非抽象方法如默认方法 func2， 静态方法 print 不影响其函数式接口的特性。</p><p>函数式接口可以使用注解 @FunctionalInterface 标注，该注解会去检查接口是否符合函数式接口的规范要求，不符合的话IDE会给出提示。</p><p>java中内置了一些函数式接口，</p><table><thead><tr><th align="center">函数式接口</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Consumer<T></td><td align="center">包含方法 void accept(T t)， 对类型为T的对象t进行操作</td></tr><tr><td align="center">Supplier<T></td><td align="center">包含方法 T get()，返回类型为T的对象</td></tr><tr><td align="center">Function&lt;T,R&gt;</td><td align="center">包含方法 R apply(T t)，对类型为T的对象进行操作，返回类型R的对象</td></tr><tr><td align="center">Predicat<T></td><td align="center">包含方法 boolean test(T t)， 判断类型为T的对象是否满足条件</td></tr></tbody></table><p>以及基于这些接口的其它变种或子接口，如BiConsumer&lt;T,U&gt;，BiFunction&lt;T,U,R&gt;等。还有如Runnable，Callable等接口，也属于函数式接口 —— 都只有一个抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BiConsumer</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t, U u)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> BiConsumer&lt;T, U&gt; <span class="title">andThen</span><span class="params">(BiConsumer&lt;? <span class="keyword">super</span> T, ? <span class="keyword">super</span> U&gt; after)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (l, r) -&gt; &#123;</span><br><span class="line">            accept(l, r);</span><br><span class="line">            after.accept(l, r);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Lambda表达式"><a href="#3-Lambda表达式" class="headerlink" title="3. Lambda表达式"></a>3. Lambda表达式</h2><p>lambda表达式实质就是一个匿名函数，在python中很常见，java到了jdk8提供了支持。<br>lambda表达式的格式形如： (参数) -&gt; {方法体语句}，当参数只有一个时，左边小括号可以省略，当方法体语句只有一条时，右边大括号可以省略。</p><p>Java的lambda表达式基本上是对函数式接口实现的一种简化 —— 用lambda表达式直接代替一个函数式接口的具体实现（抽象方法的实现）。当我们使用jdk8在IDE中编写1中代码时，IDE会给出提示，<br><img src="/assets/lambda-warn.png" alt="lambda-warn"></p><p>匿名实现类可以用lambda表达式替换。上述代码使用lambda表达式替换可调整为，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInterface</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyFunction&lt;String&gt; myFunction = s -&gt; s.toUpperCase();</span><br><span class="line">    System.out.println(myFunction.func(<span class="string">"abc"</span>));</span><br><span class="line">    System.out.println(myFunction.func2(<span class="string">"abc"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lambda表达式甚至可作为方法参数传入（实质也是作为一个函数式接口的实现类实例）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFunction</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">func</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(MyFunction&lt;String&gt; function, String s)</span></span>&#123;</span><br><span class="line">    System.out.println(function.func(s));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInterface</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">//将lambda表达式作为方法参数传入</span></span><br><span class="line">   print((String s) -&gt; s.toUpperCase(), <span class="string">"abc"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>局部变量在lambda表达式中是只读的，虽可不声明为final，但无法修改。如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInterface</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//lambda表达式中无法修改局部变量i，将报编译错误</span></span><br><span class="line">    print((String s) -&gt; &#123;i = i+<span class="number">10</span>; <span class="keyword">return</span> s.toUpperCase();&#125;, <span class="string">"abc"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-方法引用"><a href="#4-方法引用" class="headerlink" title="4. 方法引用"></a>4. 方法引用</h2><p>当需要使用lambda表达式时，如果已经有了相同的实现方法，则可以使用方法引用来替代lambda表达式，几种场景示例如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">FunctionReferenceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFunctionReference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实例::实例方法</span></span><br><span class="line">        Consumer&lt;String&gt; consumer = s -&gt; System.out.println(s); <span class="comment">//lambda表达式</span></span><br><span class="line">        Consumer&lt;String&gt; consumer2 = System.out::println; <span class="comment">//方法引用</span></span><br><span class="line">        consumer.accept(<span class="string">"abc"</span>);</span><br><span class="line">        consumer2.accept(<span class="string">"abc"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类::静态方法</span></span><br><span class="line">        Comparator&lt;Integer&gt; comparator = (x, y) -&gt; Integer.compare(x, y); <span class="comment">//lambda表达式</span></span><br><span class="line">        Comparator&lt;Integer&gt; comparator2 = Integer::compare; <span class="comment">//方法引用</span></span><br><span class="line">        System.out.println(comparator.compare(<span class="number">10</span>, <span class="number">8</span>));</span><br><span class="line">        System.out.println(comparator2.compare(<span class="number">10</span>, <span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类::实例方法， 当引用方法是形如 a.func(b)时，用类::实例方法的形式</span></span><br><span class="line">        BiPredicate&lt;String, String&gt; biPredicate = (a, b) -&gt; a.equals(b); <span class="comment">//lambda表达式</span></span><br><span class="line">        BiPredicate&lt;String, String&gt; biPredicate2 = String::equals; <span class="comment">//方法引用</span></span><br><span class="line">        System.out.println(biPredicate.test(<span class="string">"abc"</span>, <span class="string">"abb"</span>));</span><br><span class="line">        System.out.println(biPredicate2.test(<span class="string">"abc"</span>,<span class="string">"abb"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//type[]::new 数组引用</span></span><br><span class="line">        Function&lt;Integer,Integer[]&gt; fun= n-&gt; <span class="keyword">new</span> Integer[n]; <span class="comment">//lambda表达式</span></span><br><span class="line">        Function&lt;Integer,Integer[]&gt; fun2=Integer[]::<span class="keyword">new</span>; <span class="comment">//方法引用</span></span><br><span class="line">        System.out.println(fun.apply(<span class="number">10</span>));</span><br><span class="line">        System.out.println(fun2.apply(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器引用</span></span><br><span class="line">        Function&lt;String,String&gt; func = n-&gt; <span class="keyword">new</span> String(n); <span class="comment">//lambda表达式</span></span><br><span class="line">        Function&lt;String,String&gt; func2 = String::<span class="keyword">new</span>; <span class="comment">//方法引用</span></span><br><span class="line">        System.out.println(func.apply(<span class="string">"aaa"</span>));</span><br><span class="line">        System.out.println(func2.apply(<span class="string">"aaa"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Stream-API"><a href="#5-Stream-API" class="headerlink" title="5. Stream API"></a>5. Stream API</h2><p>Stream与lambda应该是java8最重要的两大特性。Stream 对集合的处理进行了抽象，可以对集合进行非常复杂的查找、过滤和映射等操作。提供了一种高效的且易于使用的处理数据的方式。<br>Stream的三个特性：</p><ul><li>Stream本身不会存储元素</li><li>Stream不会改变操作对象（即集合），会返回一个新的Stream</li><li>Stream的中间操作不会立刻执行，而是会等到需要结果的时候才执行</li></ul><p>Java8 的Collection接口包含了两个方法 stream(), parallelStream()， 分别返回一个顺序流与一个并行流，所有Collection类型（如List， ）的对象可以调用这两个方法生成流。<br>Java8 的Arrays类也提供了 stream(T[] array)等方法用以生成流。也可以使用静态方法 Stream.iterate() 和 Stream.generate() 来创建无限流。</p><p>Stream的中间操作包括</p><table><thead><tr><th align="center">操作</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">filter(Predicate p)</td><td align="center">接收 Lambda ， 从流中过滤出满足条件的元素</td></tr><tr><td align="center">distinct()</td><td align="center">通过hashCode() 和 equals() 去除重复元素</td></tr><tr><td align="center">limit(long maxSize)</td><td align="center">截断流，使元素的个数不超过给定数量</td></tr><tr><td align="center">skip(long n)</td><td align="center">跳过前面的n个元素，若流中元素不足n个，则返回一个空流</td></tr><tr><td align="center">map(Function f)</td><td align="center">将每个元素使用函数f执行，将其映射成一个新的元素</td></tr><tr><td align="center">mapToDouble(ToDoubleFunction f)</td><td align="center">将每个元素使用f执行，产生一个新的DoubleStream流</td></tr><tr><td align="center">mapToInt(ToIntFunction f)</td><td align="center">将每个元素使用f执行，产生一个新的IntStream流</td></tr><tr><td align="center">mapToLong(ToLongFunction f)</td><td align="center">将每个元素使用f执行，产生一个新的LongStream流</td></tr><tr><td align="center">flatMap(Function f)</td><td align="center">将流中的每个值都通过f转换成另一个流，然后把所有流连接成一个流</td></tr><tr><td align="center">sorted()</td><td align="center">按自然顺序排序，产生一个新流</td></tr><tr><td align="center">sorted(Comparator comp)</td><td align="center">根据比较器排序，产生一个新流</td></tr><tr><td align="center">allMatch(Predicate p)</td><td align="center">判断是否匹配所有元素</td></tr><tr><td align="center">anyMatch(Predicate p)</td><td align="center">判断是否匹配至少一个元素</td></tr><tr><td align="center">noneMatch(Predicate p)</td><td align="center">判断是否没有匹配任意元素</td></tr><tr><td align="center">findFirst()</td><td align="center">返回第一个元素</td></tr><tr><td align="center">findAny()</td><td align="center">返回任意一个元素</td></tr><tr><td align="center">reduce(T iden, BinaryOperator b)</td><td align="center">对流中的元素进行reduce操作，返回T类型对象</td></tr><tr><td align="center">reduce(BinaryOperator b)</td><td align="center">对流中的元素进行reduce操作，返回Optional<T>对象</td></tr></tbody></table><p>Stream的终止操作包括</p><table><thead><tr><th align="center">操作</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">count()</td><td align="center">返回元素总数</td></tr><tr><td align="center">max(Comparator c)</td><td align="center">返回最大值</td></tr><tr><td align="center">min(Comparator c)</td><td align="center">返回最小值</td></tr><tr><td align="center">forEach(Consumer c)</td><td align="center">内部迭代调用Consumer操作</td></tr><tr><td align="center">collect(Collector c)</td><td align="center">将流转换为其他形式，一般通过Collectors来实现</td></tr></tbody></table><p>Stream使用示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//转换为List，这里没啥意义，仅做示范</span></span><br><span class="line">    List&lt;User&gt; users = list.stream().collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//转换为Set</span></span><br><span class="line">    Set&lt;User&gt; users1 = list.stream().collect(Collectors.toSet());</span><br><span class="line">    <span class="comment">//转换为Collection</span></span><br><span class="line">    Collection&lt;User&gt; users2 = list.stream().collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));</span><br><span class="line">    <span class="comment">//计数</span></span><br><span class="line">    <span class="keyword">long</span> count = list.stream().collect(Collectors.counting());</span><br><span class="line">    <span class="comment">//求和</span></span><br><span class="line">    <span class="keyword">int</span> total = list.stream().collect(Collectors.summingInt(User::getAge));</span><br><span class="line">    <span class="comment">//求平均值</span></span><br><span class="line">    <span class="keyword">double</span> avg= list.stream().collect(Collectors.averagingInt(User::getAge));</span><br><span class="line">    <span class="comment">//获取统计对象，通过该统计对象可获取最大值，最小值之类的数据</span></span><br><span class="line">    IntSummaryStatistics iss= list.stream().collect(Collectors.summarizingInt(User::getAge));</span><br><span class="line">    <span class="comment">//将值通过","拼接</span></span><br><span class="line">    String str= list.stream().map(User::getName).collect(Collectors.joining(<span class="string">","</span>));</span><br><span class="line">    <span class="comment">//最大值</span></span><br><span class="line">    Optional&lt;User&gt; max= list.stream().collect(Collectors.maxBy(Comparator.comparingInt(User::getAge)));</span><br><span class="line">    <span class="comment">//最小值</span></span><br><span class="line">    Optional&lt;User&gt; min = list.stream().collect(Collectors.minBy(Comparator.comparingInt(User::getAge)));</span><br><span class="line">    <span class="comment">//从累加器开始，对指定的值，这里是年龄，进行sum的reduce操作</span></span><br><span class="line">    <span class="keyword">int</span> t =list.stream().collect(Collectors.reducing(<span class="number">0</span>, User::getAge, Integer::sum));</span><br><span class="line">    <span class="comment">//对转换的结果再进行处理</span></span><br><span class="line">    <span class="keyword">int</span> how = list.stream().collect(Collectors.collectingAndThen(Collectors.toList(), List::size));</span><br><span class="line">    <span class="comment">//分组</span></span><br><span class="line">    Map&lt;String, List&lt;User&gt;&gt; map= list.stream().collect(Collectors.groupingBy(User::getName));</span><br><span class="line">    <span class="comment">//根据条件进行分区</span></span><br><span class="line">    Map&lt;Boolean,List&lt;User&gt;&gt; vd= list.stream().collect(Collectors.partitioningBy(u -&gt; u.getName().startsWith(<span class="string">"W"</span>)));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-Optional类"><a href="#6-Optional类" class="headerlink" title="6. Optional类"></a>6. Optional类</h2><p>Optional是一个容器类，可以避免显式的null判断，基本使用示例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">OptionalTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptional</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// of 不允许传入null值，否则抛出NPE</span></span><br><span class="line">        Optional&lt;Integer&gt; optional = Optional.of(<span class="keyword">new</span> Integer(<span class="number">10</span>));</span><br><span class="line">        System.out.println(optional.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ofNullable 允许传入null，但是直接调用get会抛出NoSuchElementException异常，</span></span><br><span class="line">        <span class="comment">// 可通过isPresent判断是否存在值</span></span><br><span class="line">        Optional&lt;Integer&gt; optional1 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span>(optional1.isPresent()) &#123;</span><br><span class="line">            System.out.println(optional1.get());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"optional1 is empty"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// orElse 判断是否存在值，存在则返回，不存在则返回参数里的值</span></span><br><span class="line">        Integer value = optional1.orElse(<span class="keyword">new</span> Integer(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// map方法，如果optional有值，则对值进行处理返回新的Optional，</span></span><br><span class="line">        <span class="comment">// 如果没有值则返回Optional.empty()</span></span><br><span class="line">        optional = optional.map(x -&gt; x*x);</span><br><span class="line">        System.out.println(optional.get());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 与map类似，只是要求返回值必须是Optional，进一步避免空指针</span></span><br><span class="line">        optional = optional.flatMap(x -&gt;Optional.of(x*x));</span><br><span class="line">        System.out.println(optional.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-Base64"><a href="#7-Base64" class="headerlink" title="7. Base64"></a>7. Base64</h2><p>在java8中，Base64成为了java类库的标准，可直接使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Base64Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBase64</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//base64编码</span></span><br><span class="line">        String encode = Base64.getEncoder().encodeToString(<span class="string">"abc"</span>.getBytes());</span><br><span class="line">        System.out.println(encode);</span><br><span class="line">        <span class="comment">//base64解码</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(Base64.getDecoder().decode(encode)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-日期时间类"><a href="#8-日期时间类" class="headerlink" title="8. 日期时间类"></a>8. 日期时间类</h2><p>以前的Date类是非线程安全的，并且一些常用的日期时间运算需要自己编写util工具类。java8推出了java.time包，里面包含了如 LocalDate, LocalTime, LocalDateTime等类，可方便地进行日期时间的运算，如日期间隔、时间间隔，日期时间的加减，格式化等等。</p><p>—————————————————————————————<br>作者：空山新雨<br>欢迎关注我的微信公众号：jboost-ksxy<br><img src="/assets/qrcode-05.jpg" alt="微信公众号"> </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker笔记（十）：使用Docker来搭建一套ELK日志分析系统</title>
      <link href="/docker-elk.html"/>
      <url>/docker-elk.html</url>
      
        <content type="html"><![CDATA[<p>一段时间没关注ELK（elasticsearch —— 搜索引擎，可用于存储、索引日志, logstash —— 可用于日志传输、转换，Kibana —— WebUI，将日志可视化），发现最新版已到7.4了。所以别问程序员为什么这么忙？因为不是在加班就是在学习新框架中。本文整理了使用Docker来快速搭建一套ELK日志分析系统的方法。</p><a id="more"></a><h2 id="1-部署elk"><a href="#1-部署elk" class="headerlink" title="1. 部署elk"></a>1. 部署elk</h2><p>github上有人整理了一套使用docker compose来部署elk的配置，可直接下载使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/deviantony/docker-elk.git</span><br></pre></td></tr></table></figure><p>如果没有git，那就安装一下（<code>yum install git</code>），或者直接下载github仓库的源码包。</p><p>当前是基于7.2.1版（docker-elk目录下.env文件中定义，可修改）。</p><p>调整一下相应的配置。</p><p>修改docker-compose，设置es密码等，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 在elasticsearch部分设置环境变量，将jvm堆内存增大到了1g，设置es elastic用户的密码</span></span><br><span class="line">  environment:</span><br><span class="line">        ES_JAVA_OPTS: "-Xmx1g -Xms1g"</span><br><span class="line">        ELASTIC_PASSWORD: Passw0rd</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 将logstash的端口映射从默认的5000改为5044，因为后面会用filebeat，不改也可以，对应就行</span></span><br><span class="line">  ports:</span><br><span class="line">        - "5044:5044"</span><br><span class="line">        - "9600:9600"</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 将jvm内存也增大一点</span></span><br><span class="line">  environment:</span><br><span class="line">        LS_JAVA_OPTS: "-Xmx512m -Xms512m"</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 在volumes部分增加es数据目录的挂载，对es数据持久化，避免容器销毁数据丢失</span></span><br><span class="line">  volumes:</span><br><span class="line">      - /mnt/elk/esdata:/usr/share/elasticsearch/data</span><br></pre></td></tr></table></figure><blockquote><p>注意： 因为es容器内部是以elasticsearch用户启动进程的，所以在做持久化数据目录挂载的时候，需要将目录权限进行设置，否则会因为没有访问权限而启动失败。elasticsearch的uid是1000，可以建一个uid为1000的用户，然后将目录所有者赋予该用户。</p></blockquote><p>修改es配置文件，将xpack从trial改为basic，禁用付费功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim elasticsearch/config/elasticsearch.yml</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash">xpack.license.self_generated.type: trial</span></span><br><span class="line">  xpack.license.self_generated.type: basic</span><br></pre></td></tr></table></figure><p>修改logstash配置文件，设置es的用户名密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim logstash/config/logstash.yml</span><br><span class="line"></span><br><span class="line">  xpack.monitoring.elasticsearch.username: elastic</span><br><span class="line">  xpack.monitoring.elasticsearch.password: Passw0rd</span><br></pre></td></tr></table></figure><p>修改logstash的pipeline配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vim logstash/pipeline/logstash.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 这里codec根据具体情况配置 </span></span><br><span class="line">  input &#123;</span><br><span class="line">          beats &#123;</span><br><span class="line">                  port =&gt; 5044</span><br><span class="line">                  codec =&gt; "json" </span><br><span class="line">          &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment"># Add your filters / logstash plugins configuration here</span></span></span><br><span class="line">  output &#123;</span><br><span class="line">          elasticsearch &#123;</span><br><span class="line">                  hosts =&gt; "elasticsearch:9200"</span><br><span class="line">                  index =&gt; "%&#123;[@metadata][beat]&#125;-%&#123;[@metadata][version]&#125;-%&#123;+YYYY.MM.dd&#125;"</span><br><span class="line">                  user =&gt; "elastic"</span><br><span class="line">                  password =&gt; "Passw0rd"</span><br><span class="line">          &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>修改kibana配置，设置es密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim kibana/config/kibana.yml</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment"># X-Pack security credentials</span></span></span><br><span class="line">  elasticsearch.username: elastic</span><br><span class="line">  elasticsearch.password: Passw0rd</span><br></pre></td></tr></table></figure><p>配置调整后，使用 <code>docker-compose up -d</code> 即可启动es，logstash，kibana三个容器。第一次启动需要下载所有镜像，会比较慢，启动完后，访问 elk所在服务器IP:5601即可进入kibana页面。</p><p>这里默认是起一个es容器，如果想起多个，参考： <a href="https://github.com/deviantony/docker-elk/wiki/Elasticsearch-cluster" target="_blank" rel="noopener">https://github.com/deviantony/docker-elk/wiki/Elasticsearch-cluster</a></p><h2 id="2-部署filebeat"><a href="#2-部署filebeat" class="headerlink" title="2. 部署filebeat"></a>2. 部署filebeat</h2><p>filebeat部署在产生日志的服务器上。先下载镜像，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull docker.elastic.co/kibana/kibana:7.3.1</span><br></pre></td></tr></table></figure><p>下载一个示例配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O https://raw.githubusercontent.com/elastic/beats/7.3/deploy/docker/filebeat.docker.yml</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vim filebeat.docker.yml</span><br><span class="line"></span><br><span class="line">filebeat.config:</span><br><span class="line">  modules:</span><br><span class="line">    path: $&#123;path.config&#125;/modules.d/*.yml</span><br><span class="line">    reload.enabled: false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">filebeat.autodiscover:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  providers:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    - <span class="built_in">type</span>: docker</span></span><br><span class="line"><span class="meta">#</span><span class="bash">      hints.enabled: <span class="literal">true</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">processors:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- add_cloud_metadata: ~</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- add_host_metadata: ~</span></span><br><span class="line"></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  paths:</span><br><span class="line">  - /var/log/elk/*.log</span><br><span class="line"></span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: ["你的elk服务器IP:5044"]</span><br></pre></td></tr></table></figure><p>去掉了一些不必要的配置，基本就是一个input, 一个output。input paths部分配置你日志所在目录，注意这里是容器内的目录，真正服务器的日志目录需要在启动容器时挂载到这里配置的目录。</p><p>启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name filebeat --user=root -v $(pwd)/filebeat.docker.yml:/usr/share/filebeat/filebeat.yml:ro \</span><br><span class="line">  -v /mnt/logs/elk/:/var/log/elk/ docker.elastic.co/beats/filebeat:7.3.1 filebeat -e -strict.perms=false</span><br></pre></td></tr></table></figure><p>对配置文件及实际日志目录与容器日志目录进行了挂载。</p><p>启动成功后，对应目录下的日志就会通过filebeat，logstash传输到es，进入kibana对日志数据建立索引进行查询了。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>前面用elk来搭建日志分析系统还是5.1版，两年时间已到7.4，配置方式，包括UI风格都做了很大的调整，很有一种人间一年，技术圈十载的感觉。<br>本文整理了基于Docker来搭建ELK框架的整个过程，供参考。<br></br><br>—————————————————————————————<br>作者：空山新雨<br>欢迎关注我的微信公众号：jboost-ksxy （一个不只有技术干货的公众号）<br><img src="/assets/qrcode-05.jpg" alt="微信公众号"> </p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> elk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker笔记（九）：网络管理</title>
      <link href="/docker-9.html"/>
      <url>/docker-9.html</url>
      
        <content type="html"><![CDATA[<p>Docker的应用运行在容器中，其相互之间或与外部之间是如何通信的，涉及到哪些知识点，本文对相关内容进行整理。因网络这块牵涉的面较多，因此只从日常使用或理解的角度出发，过于专业的就不深入探讨了。</p><a id="more"></a><h2 id="1-Docker默认的网络拓扑"><a href="#1-Docker默认的网络拓扑" class="headerlink" title="1. Docker默认的网络拓扑"></a>1. Docker默认的网络拓扑</h2><p>在<a href="/docker-2.html">Docker笔记（二）：Docker管理的对象</a>中，介绍了Docker通过一些驱动程序来实现容器之间或容器与外部的互联，包括bridge（默认的虚拟网桥形式），host（与主机共享网络栈），overlay（跨Docker Daemon容器间的互联），macvlan（为容器分配mac地址），none（禁用所有网络）等。</p><p>默认情况下，Docker启动时会创建一个虚拟网桥 docker0，可以理解为一个软件交换机。当创建一个 Docker 容器的时候，会创建一对 veth pair 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 eth0 ；另一端在宿主机本地并被挂载到 docker0 网桥，名称以veth 开头，如 veth340c305，docker0会在挂载到它上面的网口之间进行转发，从而实现主机与容器之间及容器与容器之间的相互通信。Docker默认的网络拓扑图如下：<br><img src="/assets/docker0.png" alt="docker0"></p><p>我们可以在宿主机上通过<code>ifconfig</code>查看相关的网络接口，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">~$ ifconfig</span><br><span class="line">docker0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        inet6 fe80::42:46ff:fe26:ce0b  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 02:42:46:26:ce:0b  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 16868344  bytes 127838098551 (127.8 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 17929275  bytes 137867853738 (137.8 GB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">veth340c305: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet6 fe80::50f7:7ff:fe8f:6e72  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 52:f7:07:8f:6e:72  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 8093606  bytes 126893792744 (126.8 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 8795102  bytes 10834735399 (10.8 GB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">veth6c803b7: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet6 fe80::1045:4cff:fe66:7f5a  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 12:45:4c:66:7f:5a  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 140  bytes 9832 (9.8 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>通过<code>brctl show</code>可查看网络接口的挂载情况，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~$ brctl show</span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">docker08000.02424626ce0bnoveth340c305</span><br><span class="line">veth6c803b7</span><br></pre></td></tr></table></figure><p>由上可看出网络接口veth340c305，veth6c803b7都挂在虚拟网桥docker0上。</p><h2 id="2-容器与外部的互联"><a href="#2-容器与外部的互联" class="headerlink" title="2. 容器与外部的互联"></a>2. 容器与外部的互联</h2><p>我们前面的许多容器启动命令都有添加类似 -p 8080:8080 的参数，以指定将宿主机端口映射到容器端口，从而通过访问 <code>宿主机IP：宿主机端口</code> 的地址来访问对应端口的容器服务。<br>端口映射的完整格式为 <code>宿主机IP：宿主机端口：容器端口</code>，其中前两个是可以两者都取，或只取其一</p><ul><li><code>宿主机IP：宿主机端口：容器端口</code>：将指定宿主机IP的一个指定端口映射到容器端口，如<code>192.168.40.205:8090:8080</code></li><li><code>宿主机IP::容器端口</code>：将指定宿主机IP的一个随机端口映射到容器端口上，如果宿主机有多个IP，则可以通过这种格式指定绑定其中一个宿主机IP，随机端口范围为49000~49900</li><li><code>宿主机端口：容器端口</code>：将宿主机所有网络接口IP的指定端口映射到容器端口上，<code>8090:8080</code>等效于<code>0.0.0.0:8090:8080</code>（<code>0.0.0.0</code>即表示所有网络接口地址）</li></ul><p>可以使用 <code>docker port 容器ID或名称 容器端口</code>或<code>docker ps</code>命令来查看端口映射情况，如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~$ docker port test-dev 8080</span><br><span class="line">0.0.0.0:32768</span><br><span class="line"></span><br><span class="line">~$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE                                           COMMAND                  CREATED             STATUS              PORTS                               NAMES</span><br><span class="line">696a76944e72        cnbots:dev                                      "/bin/sh -c '/usr/lo…"   23 minutes ago      Up 23 minutes       0.0.0.0:32768-&gt;8080/tcp             test-dev</span><br></pre></td></tr></table></figure><p>在容器启动时，可以多次使用 -p 来指定映射多个端口。</p><p>如果不指定具体的宿主机端口，则可以使用 -P（大写）来分配一个宿主机的随机端口（范围为49000~49900）， 如<code>docker run -d -P --name test-dev test:dev</code>，然后通过<code>docker port 容器ID或名称 容器端口</code>或<code>docker ps</code>命令来查看具体映射到了哪个端口。</p><h2 id="3-容器之间的互联"><a href="#3-容器之间的互联" class="headerlink" title="3. 容器之间的互联"></a>3. 容器之间的互联</h2><p>同一个Docker Daemon下的容器，彼此之间是可以通过容器IP互相访问的（如何查看容器IP？用<code>docker inspect 容器ID或名称</code>命令），如果要实现两个容器之间可以通过容器名直接访问，则可以通过自建一个docker网络。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个自定义网络，-d 表示网络类型，可以为bridge（网桥，软件交换机），或overlay（跨Docker Daemon容器间的互联）</span></span><br><span class="line">~$ docker network create -d bridge my-net</span><br><span class="line">0c97fc265ed1cab67d84b9376d6914c9558419c73bb5abc040e75c945cd99f0a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动一个centos容器centos1，通过 --network 指定自定义网络</span></span><br><span class="line">~$ docker run -it --name centos1 --network my-net centos:7.3.1611 bash</span><br><span class="line">[root@3dcf507bd12a /]# </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再启动一个centos容器centos2（打开另一个窗口），指定同一个自定义网络</span></span><br><span class="line">~$ docker run -it --name centos2 --network my-net centos:7.3.1611 bash</span><br><span class="line">[root@16dcce660a89 /]# </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在centos1容器中直接ping centos2</span></span><br><span class="line">[root@3dcf507bd12a /]# ping centos2</span><br><span class="line">PING centos2 (172.19.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from centos2.my-net (172.19.0.2): icmp_seq=1 ttl=64 time=0.111 ms</span><br><span class="line">64 bytes from centos2.my-net (172.19.0.2): icmp_seq=2 ttl=64 time=0.058 ms</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在centos2容器中直接ping centos1</span></span><br><span class="line">[root@16dcce660a89 /]# ping centos1</span><br><span class="line">PING centos1 (172.19.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from centos1.my-net (172.19.0.3): icmp_seq=1 ttl=64 time=0.061 ms</span><br><span class="line">64 bytes from centos1.my-net (172.19.0.3): icmp_seq=2 ttl=64 time=0.054 ms</span><br></pre></td></tr></table></figure><p>由上可见通过自定义网桥连接的容器可以通过容器名称互相访问。如果需要多个容器之间互联，则可以使用Docker Compose。</p><h2 id="4-配置容器的DNS"><a href="#4-配置容器的DNS" class="headerlink" title="4. 配置容器的DNS"></a>4. 配置容器的DNS</h2><p>如果要自定义所有容器的DNS，则可以在 /etc/docker/daemon.json 中增加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"dns"</span> : [</span><br><span class="line">        <span class="string">"114.114.114.114"</span>,</span><br><span class="line">        <span class="string">"8.8.8.8"</span></span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以在启动容器时通过参数指定单个容器的DNS配置，<code>--dns=IP_ADDRESS</code>，这会将指定DNS的地址添加到容器的 /etc/resolv.conf 文件中，让容器用这个DNS服务器来解析所有不在 /etc/hosts 中的主机名。 </p><h2 id="5-Docker网络的底层实现"><a href="#5-Docker网络的底层实现" class="headerlink" title="5. Docker网络的底层实现"></a>5. Docker网络的底层实现</h2><p>容器的网络访问控制，主要是通过Linux上的<strong>iptables防火墙</strong>来实现与管理的。</p><ol><li><strong>容器访问外部网络</strong><br>容器访问外部网络，需要通过本地系统的转发，可以通过如下命令查看转发是否打开<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">sysctl net.ipv4.ip_forward</span></span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为1为打开，为0则未打开，可通过如下命令打开，也可以在Docker服务启动时通过参数--ip-forward=<span class="literal">true</span>打开</span></span><br><span class="line"><span class="meta">$</span><span class="bash">sysctl -w net.ipv4.ip_forward=1</span></span><br></pre></td></tr></table></figure></li></ol><p>容器所有到外部网络的访问，源地址都会被 NAT 成本地系统的 IP 地址。这是使用 iptables 的源地址伪装操作实现的，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~# iptables -t nat -nL</span><br><span class="line">Chain POSTROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">MASQUERADE  all  --  172.17.0.0/16        0.0.0.0/0</span><br></pre></td></tr></table></figure><p>上述规则将所有源地址在 172.17.0.0/16 的网段（容器IP所在网段），目标地址为任意网段（包括外部网络）的流量动态伪装为从系统网卡发出。MASQUERADE 跟传统 SNAT 的好处是它能动态从网卡获取地址。 </p><ol start="2"><li><strong>外部访问容器</strong></li></ol><p>通过 -p 或 -P 指定端口映射，允许外部访问容器端口，实质也是在本地的 iptable 的 nat 表中添加相应的规则，如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~# iptables -t nat -nL</span><br><span class="line">Chain DOCKER (2 references)</span><br><span class="line">target     prot opt source               destination                 </span><br><span class="line">DNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3306 to:172.17.0.2:3306</span><br><span class="line">DNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:11090 to:172.17.0.3:11090</span><br></pre></td></tr></table></figure><p>这里的规则映射了 0.0.0.0 ，意味着将接受主机来自所有网络接口的流量。</p><ol start="3"><li><strong>容器之间的访问</strong><br>容器之间能互相访问，需要满足两个条件：1）容器的网络拓扑是否已经互联，默认情况下容器都连接到docker0网桥上，默认是互联的。2）本地系统的防火墙iptables是否允许通过。当容器启动时通过–link互联时，也是在iptables中创建对应规则来实现。</li></ol><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>本文整理了Docker网络相关知识，对容器之间及容器与外部之间的通信机制应该有了一定的了解。除了默认的网络实现，Docker还提供了网络的配置及自定义网络，出于篇幅，本文介绍到这，后续再补充。<br></br><br>我的微信公众号：jboost-ksxy （一个不只有技术干货的公众号，欢迎关注，及时获取更新内容）<br>———————————————————————————————————————————————————————————————<br><img src="/assets/qrcode-05.jpg" alt="微信公众号"> </p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发人员需要掌握的日常Linux命令集</title>
      <link href="/linux-cmd.html"/>
      <url>/linux-cmd.html</url>
      
        <content type="html"><![CDATA[<p>不会运维的开发不是好测试。</p><a id="more"></a><p>本文整理了开发人员日常用到的linux相关命令，供参考。</p><h2 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h2><p><code>cd</code> # 进入某个目录，不接参数进入当前用户目录（等同于cd ~），如/home/devuser，可接绝对路径或相对路径（../..表示上上级目录），也可以接 “-” 回到上次所在目录</p><p><code>pwd</code> # 显示当前所在目录</p><p><code>ls -la</code> # 列出当前目录所有对象，-a表示包含以.开头的隐藏文件或目录<br><code>ll -h</code> # ll 等同于 ls -l， -h表示按K M G 显示文件大小</p><p><code>df -h</code> # 显示系统各盘符的空间使用情况<br><code>du -h --max-depth=1</code> # 显示当前目录下各文件大小，–max-depth=1只列出当前目录下的文件或目录，不会列出子目录下的文件</p><p><code>mv test.log /home/devuser/</code> # 移动文件（夹） 或重命名</p><p><code>cp [-r] test test.bak</code> # 复制文件，如果是文件夹则加 -r，表示复制文件夹下所有子文件夹内容<br><code>rm -[r]f /home/devuser/</code> # 删除文件，如果删除文件夹则加 -r </p><p><code>find / -name test.log</code> # 在根目录下查找文件名为test.log的文件<br><code>find /var/log/ -size +50M -exec rm -f {} \;</code> # 在/var/log/目录下查找大于50M的文件并删除，建议先将rm改为ls确认<br><code>find /var/log/ -type f -atime +10</code> # 搜索在过去10天内未被使用过的文件<br><code>find /var/log/ -type f -mtime -10</code> # 搜索在10天内被创建或者修改过的文件<br><code>find /var/log/ -type f -atime +10|xargs rm -f</code> # |xargs 作用与 -exec类似<br><code>find ./ -name &quot;*.log&quot; -exec &#39;cat&#39; {} \; &gt; test.log</code> # 将当前目录下所有.log文件内容合并到一个文件test.log</p><p><code>which java</code> # 在系统PATH路径下查找java可执行文件<br><code>whereis java</code> # 查找二进制、源文件、man文件，从文件索引中查找，而不仅仅从PATH路径下查找</p><p><code>zip test.zip test.log test2.log</code> # 创建一个zip格式的压缩包，可以接多个文件或文件夹<br><code>zip -r file.zip file1 file2 dir1</code> # 将几个文件和目录同时压缩成一个zip格式的压缩包<br><code>unzip test.zip</code> # 解压一个zip格式压缩包</p><p><code>tar -zcvf test.tar.gz</code> 要被压缩的文件名或目录 # 以gzip进行压缩 -z 按gzip，-c 压缩，-v 显示内容 -f 指定文件名<br><code>tar -zxvf test.tar.gz -C 解压缩到的目录</code> # 解压到指定目录 -x 解压<br><code>tar -ztvf test.tar.gz</code> # 不解压，只查看内容</p><p><code>tar -jcvf test.tar.bz2 要被压缩的文件名或目录</code> # 以bzip2进行压缩<br><code>tar -jxvf test.tar.bz2 -C 解压缩到的目录</code> # 解压到指定目录</p><h2 id="文本相关"><a href="#文本相关" class="headerlink" title="文本相关"></a>文本相关</h2><p><code>touch test.log</code> # 创建空文件<br><code>echo -e &#39;abc\ncba&#39;&gt; test.log</code> # 覆盖的形式往文件写入内容 -e 解析转移字符，不然当成字符串<br><code>echo &#39;aaa&#39; &gt;&gt; test.log</code> # 追加的形式往文件写入内容</p><p><code>cat [-n] test.log |grep [-v] abc</code> # 过滤文件中包含 abc 的行， 加-v表示不包含， -n表示打印行号<br><code>cat test.log |grep  abc|wc -l</code> # 计算文件中包含 abc 的行数</p><p><code>head -n 2 test.log</code> # 查看一个文件的前两行<br><code>tail -n 2 test.log</code> # 查看一个文件的最后两行<br><code>tail -n +1000 test.log</code> # 从1000行开始显示，显示1000行以后的<br><code>cat test.log | head -n 2000 | tail -n +1000</code> # 显示1000行到2000行的<br><code>cat test.log | tail -n +1000 | head -n 1000</code> # 从第1000行开始，显示1000行</p><p><code>more test.log</code> # 一页一页地查看文件内容，空格键往后一页，B键往前一页，不能通过上下键控制翻滚，会一次加载整个文件<br><code>less test.log</code> # 一页一页地显示文件内容，可以通过上下键控制往前往后翻，可以向上向下搜，不需一次加载整个文件，所以速度比more快，“less is more”， less比more更强大</p><p><code>tail -200f test.log</code> # 查看最后200行，根据文件描述符进行追踪，当文件改名或被删除，追踪停止<br><code>tail -F test.log</code> # 查看最后10行，只要对应文件名存在，就保持监视，即使文件被删除或改名后，如果再次创建相同的文件名，也会继续追踪</p><p><code>grep abc test.log</code> # 在文件中查找关键词”abc”，类似于 <code>cat test.log|grep abc</code><br><code>grep ^abc test.log</code> # 在文件中查找以”abc”开始的词汇<br><code>grep [0-9] test.log</code> # 选择文件中所有包含数字的行<br><code>grep abc -R /var/log</code>/* # 在目录 ‘/var/log’ 及随后的目录中搜索字符串”abc”</p><p><code>sed &#39;s/abc/ccc/g&#39; test.log</code> # 将test.log文件中的 “abc” 替换成 “ccc”并打印，不改变原有文件<br><code>sed &#39;/^$/d&#39; test.log</code> # 从文件中删除所有空白行并打印，不改变原有文件</p><p><code>paste test.log test2.log</code> # 按两列合并两个文件每行的内容并打印，test.log在左边，test2.log在右边<br><code>paste -d &#39;+&#39; file1 file2</code> # 合并两个文件每行的内容并打印，中间用”+”拼接</p><p><code>sort test.log</code> # 对文件内容进行排序，每行首字母排序<br><code>sort test.log test2.log</code> # 排序两个文件的内容<br><code>sort test.log test2.log | uniq</code> # 取出两个文件的并集(重复的行只保留一份)<br><code>sort test.log test2.log | uniq -u</code> # 删除交集，留下其他的行<br><code>sort test.log test2.log | uniq -d</code> # 取出两个文件的交集(同时存在于两个文件中的行)</p><p># comm 类似于集合的差集运算，需要两个文件都是排序的<br><code>comm -1 test.log test2.log</code> # 比较两个文件的内容只删除test.log所包含的内容<br><code>comm -2 test.log test2.log</code> # 比较两个文件的内容只删除test2.log所包含的内容<br><code>comm -3 test.log test2.log</code> # 比较两个文件的内容删除两个文件共有的内容</p><h2 id="权限相关"><a href="#权限相关" class="headerlink" title="权限相关"></a>权限相关</h2><p><code>chmod +x test.sh</code> # 为一个文件增加可执行权限<br><code>chmod ugo+rwx test.sh</code> # 设置文件的所有者(u)、群组(g)以及其他人(o)读（r，4 ）、写(w，2)和执行(x，1)的权限，+ 改为 - 即删除权限<br><code>chmod 755 test.sh</code> # 对文件所有者，群组，其他人分别设置7（rwx=4+2+1），5（rx=4+1）,5（rx=4+1）的权限</p><p><code>chown [-R] 用户名:群组名 test.log</code> #改变一个文件的所有者和群组，如果是作用于文件夹下所有文件或目录，则加 -R<br><code>chgrp 群组名 test.log</code> # 改变文件的群组</p><h2 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h2><p><code>top</code> # 实时显示系统中各个进程的资源占用状况<br><code>top -H -p 进程号</code> # 列出进程的所有线程，按1键根据CPU占有率排序<br><code>ps -ef|grep 进程名称</code> # 查看某个进程，一般用户找进程ID<br><code>kill -9 进程ID</code> # 停止某个进程<br><code>jps</code> # 查看所有java进程</p><h2 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h2><p><code>ifconfig</code> # 查看系统各网卡信息（IP，mac地址，子网掩码等）<br><code>ss -s</code> # 查看当前系统tcp、udp连接数</p><p><code>netstat -ano|grep 端口号</code> # 查看某个端口是否起来<br><code>lsof -i:端口号</code> # 查看某个端口对应的进程信息，lsof可能需要额外安装 （sudo yum install lsof）</p><p><code>ssh devuser@192.168.40.206</code> # 远程连接另一台linux主机</p><p><code>curl http://www.baidu.com</code> # get方式请求某个地址<br><code>curl -i -X POST -H &quot;Content-type:application/json&quot; -d &#39;{&quot;a&quot;:&quot;x&quot;,&quot;b&quot;:[&quot;y&quot;]}&#39;  http://xxx</code> # POST方式请求某个接口</p><p><code>wget http://xxx.zip</code> # 下载文件</p><p><code>scp test.log devuser@192.168.40.206:/home/devuser/</code># 传输文件到另一台主机的目录下，如果是文件夹则加 -r<br># nc 传输，可用于文件传输（scp需要密码，nc不需要密码），需要安装 sudo yum install nc<br><code>nc -l 1234 &gt; test.log</code> # 接收方，监听1234端口，将接收内容存于test.log<br><code>nc 192.168.40.205 1234 &lt; test.log</code> # 发送方，向接收方(ip为192.168.40.205)发送test.log的内容</p><h2 id="系统相关"><a href="#系统相关" class="headerlink" title="系统相关"></a>系统相关</h2><p><code>top</code> # 查看CPU、内存使用情况，即各进程使用情况<br><code>free -g</code> # 查看内存使用情况<br><code>date</code> # 查看系统当前时间<br><code>uptime</code> # 查看当前CPU使用负载情况，及系统已运行时间，相当于top的第一行<br><code>su</code> # 切换到root用户<br><code>su devuser</code> # 切换到devuser用户<br></br><br>欢迎关注我的微信公众号：jboost-ksxy （一个不只有实战干货的技术公众号，及时获取更新内容）<br>———————————————————————————————————————————————————————————————<br><img src="/assets/qrcode-05.jpg" alt="微信公众号"> </p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s云集群混搭模式，可能帮你节省50%的服务成本</title>
      <link href="/mix-eci.html"/>
      <url>/mix-eci.html</url>
      
        <content type="html"><![CDATA[<p>现在大部分中小企业或团队都是使用云平台来部署自己的服务，如阿里云，亚马逊云等。一般来说，业务的负载都具备一定的规律，比如每天集中在某几个小时，或呈现时间段周期性波峰、波谷交替的现象，如下图<br><img src="/assets/load-trend.png" alt="业务负载周期性"></p><p>如果使用ECS来部署服务，则可能大部分时间ECS的资源没有得到充分利用，造成成本浪费，尤其对于像GPU之类成本较高的资源就更加了。这个时候，我们可以考虑使用云集群的混搭模式来节约成本。</p><h2 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h2><p>假设有一个这样的业务场景，包括如下特点及要求：</p><ol><li>整个系统包括业务服务与两层视觉服务</li><li>各层服务之间调用需做负载均衡</li><li>每天的业务量主要集中在上午几个小时</li><li>平时业务量较低时仍要保证服务可用</li><li>尽可能降低成本，尤其是GPU服务器成本（GPU贵啊）</li></ol><p><img src="/assets/biz-top.png" alt="业务部署架构"></p><h2 id="k8s云集群混搭模式"><a href="#k8s云集群混搭模式" class="headerlink" title="k8s云集群混搭模式"></a>k8s云集群混搭模式</h2><p>现在各大云平台都已经提供容器云服务，如阿里云有基于ECI（弹性容器实例）的Serverless Kubernetes集群服务，基于ECS节点不需要提供master的Kubernetes托管版集群服务，及自己提供master的Kubernetes专有版集群服务等。为了迎合类似上述业务场景的需求，也提供了Kubernetes + virtual node（虚拟节点）的混合集群服务，如下图所示</p><p><img src="/assets/k8s-vn.png" alt="k8s-vn"></p><p>其中的虚拟节点基于ECI支持多种功能，如GPU容器实例、大规格容器实例等，增强了Kubernetes集群的弹性，使集群不局限于ECS节点的资源，做到弹性无限扩容。</p><h2 id="部署方案"><a href="#部署方案" class="headerlink" title="部署方案"></a>部署方案</h2><p>结合前面的业务场景，我们可以采用k8s的混合集群服务来部署我们的项目，如下图</p><p><img src="/assets/biz-deploy.png" alt="biz-deploy"></p><p>实现步骤：</p><ol><li>创建Kubernetes托管版集群</li><li>加入已有ECS节点</li><li>添加一个虚拟节点，通过添加应用 ack-virtual-node 来实现</li><li>分别创建无状态的业务Deployment、AI-1 Deployment、AI-2 Deployment（对应三层服务）</li><li>分别在业务Deployment上创建公网SLB，AI-1 Deployment、AI-2 Deployment上创建内网SLB</li><li>分别在各Deployment上根据CPU或内存使用阈值配置弹性水平伸缩HPA</li><li>根据需要可以在某个或某些Deployment上配置定时伸缩，通过添加应用 ack-kubernetes-cronhpa-controller 来实现</li></ol><blockquote><p>因为水平伸缩一般需要一定时间，延迟可能会对业务造成影响，所以在业务负载比较规律的时候，可以通过定时伸缩（就是定时扩展到多少个容器，再定时收缩到多少个容器）来改善；目前定时伸缩配置的查看与更新只能通过kubectl命令行进行。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>按照官方文档的计费方式，一个普通的2核8G的ECS一年大概费用是2600左右，如果通过容器服务的方式（按秒计费），假设每天起8小时，则一年大概费用1550左右，如果业务负载再集中到几个小时，费用会更低，对于比较稀缺又昂贵的GPU服务就更加了。但是如果服务全部按容器24小时租赁，其成本就又比ECS贵了（一年约4600），所以在平时业务负载较低的时候，可以将容器调度到ECS上保障服务的提供，业务负载高时，通过HPA或cronHPA的方式动态伸缩到虚拟节点上。对于业务负载具有一定规律的服务来说，采用这种混搭的部署方式将极大地降低你的云服务成本。不过目前k8s云集群服务应该推出时间不久，产品的易用性还比较低，对不具备一定容器与编排基础的人使用门槛相对较高。</p></br>     欢迎关注我的微信公众号：jboost-ksxy （一个不只有实战干货的技术公众号，及时获取更新内容）———————————————————————————————————————————————————————————————![微信公众号](/assets/qrcode-05.jpg) ]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技巧：如何自定义logback日志文件的名称</title>
      <link href="/trick-logback-prop.html"/>
      <url>/trick-logback-prop.html</url>
      
        <content type="html"><![CDATA[<p>在logback.xml中获取自定义变量值。</p><a id="more"></a><p>我们可以通过在logback.xml中配置appender来指定日志输出格式及输出文件路径，这在一台主机或一个文件系统上部署单个实例没有问题，但是如果部署多个实例（比如通过容器的方式），多个实例同时往同一文件写日志可能就会引起问题。这时可以将每个实例的日志文件加以区分，如IP或UUID，或两者结合的形式。</p><p>可以有4种方式来实现logback.xml中获取自定义变量值：</p><ol><li>通过设置环境变量或传递系统属性（比如在程序启动时通过-D传递）的方式，两者是可以直接在logback.xml中通过 <code>${变量名}</code> 获取的。</li><li>自定义logback.xml的加载时机，在其加载前将需要设置的属性注入到logback的context中，这种方式相对复杂，本文不讨论。</li><li>通过实现PropertyDefiner接口来提供属性值设置</li><li>通过实现LoggerContextListener接口来设置属性值</li></ol><p>第一种方式简单，但不能通过程序生成属性值，第二种方式稍显复杂，本文主要介绍后两种方式。</p><h2 id="PropertyDefiner方式"><a href="#PropertyDefiner方式" class="headerlink" title="PropertyDefiner方式"></a>PropertyDefiner方式</h2><p>首先定义一个类，实现PropertyDefiner接口，可以通过继承PropertyDefinerBase会更方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ch.qos.logback.core.PropertyDefinerBase;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 将本地IP拼接到日志文件名中，以区分不同实例，避免存储到同一位置时的覆盖冲突问题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ronwxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/20 16:17   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IPLogDefiner</span> <span class="keyword">extends</span> <span class="title">PropertyDefinerBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(IPLogDefiner<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getUniqName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String localIp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            localIp = InetAddress.getLocalHost().getHostAddress();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            LOG.error(<span class="string">"fail to get ip..."</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        String uniqName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span> (localIp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            uniqName = localIp + <span class="string">"-"</span> + uniqName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPropertyValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getUniqName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实现方法 <code>getPropertyValue</code> 中返回你需要生成的值，本例中是返回 <code>本地IP-UUID</code> 的形式。</p><p>然后在logback.xml中，添加 <code>&lt;define&gt;</code> 配置，指定属性名（本例中为localIP）及获取属性值的实现类，这样就可以在配置中通过 <code>${localIP}</code>来引用该属性值了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">define</span> <span class="attr">name</span>=<span class="string">"localIP"</span> <span class="attr">class</span>=<span class="string">"com.cnbot.common.IPLogDefiner"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"interfaceLogFile"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>D:\\logs\\elk\\interface-$&#123;localIP&#125;.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"># 省略了其它配置</span><br></pre></td></tr></table></figure><h2 id="LoggerContextListener方式"><a href="#LoggerContextListener方式" class="headerlink" title="LoggerContextListener方式"></a>LoggerContextListener方式</h2><p>定义一个实现LoggerContextListener接口的类，在start方法中，将需要设置的属性设置到logback的Context中，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.Level;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.Logger;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.LoggerContext;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.spi.LoggerContextListener;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.Context;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.spi.ContextAwareBase;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.spi.LifeCycle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 第二种实现方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ronwxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/20 18:45   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerStartupListener</span> <span class="keyword">extends</span> <span class="title">ContextAwareBase</span> </span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">LoggerContextListener</span>, <span class="title">LifeCycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (started) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Context context = getContext();</span><br><span class="line">        context.putProperty(<span class="string">"localIP"</span>, getUniqName());</span><br><span class="line">        started = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getUniqName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String localIp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            localIp = InetAddress.getLocalHost().getHostAddress();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            <span class="comment">//LOG.error("fail to get ip...", e);</span></span><br><span class="line">        &#125;</span><br><span class="line">        String uniqName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span> (localIp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            uniqName = localIp + <span class="string">"-"</span> + uniqName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqName;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//省略了其它函数</span></span><br></pre></td></tr></table></figure><p>然后在logback.xml中，配置如上监听器类，这样就可以通过 <code>${localIP}</code> 获取到上面 <code>context.putProperty(&quot;localIP&quot;, getUniqName());</code> 设置的值了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;define name="localIP" class="com.cnbot.common.IPLogDefiner"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextListener</span> <span class="attr">class</span>=<span class="string">"com.cnbot.common.LoggerStartupListener"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">define</span> <span class="attr">name</span>=<span class="string">"localIP"</span> <span class="attr">class</span>=<span class="string">"com.cnbot.common.IPLogDefiner"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"interfaceLogFile"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>D:\\logs\\elk\\interface-$&#123;localIP&#125;.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"># 省略了其它配置</span><br></pre></td></tr></table></figure><p>这种方式能设置任意个数的属性值，比前一种方式灵活。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在logback.xml中获取自定义属性值，主要是需要在加载前将对应的属性值进行设置，这样加载时才能有效获取。本文虽是自定义日志文件名称，但不局限于此，所有需要动态获取的变量都可以按这种方式实现。</p></br>  欢迎关注我的微信公众号：jboost-ksxy———————————————————————————————————————————————————————————————![微信公众号](/assets/qrcode-05.jpg) ]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker笔记（八）：数据管理</title>
      <link href="/docker-8.html"/>
      <url>/docker-8.html</url>
      
        <content type="html"><![CDATA[<p>前面（哪个前面我也忘了）有说过，如果我们需要对数据进行持久化保存，不应使其存储在容器中，因为容器中的数据会随着容器的删除而丢失，而因通过将数据存储于宿主机文件系统的形式来持久化。在Docker容器中管理数据主要有数据卷、宿主机目录挂载两种方式</p><a id="more"></a><h2 id="1-数据卷的方式"><a href="#1-数据卷的方式" class="headerlink" title="1. 数据卷的方式"></a>1. 数据卷的方式</h2><p>数据卷是一个特殊的文件目录（或文件），具备如下特性：</p><ol><li>可以在容器之间共享和重用</li><li>对数据卷的修改会立马生效</li><li>数据卷的更新，不会影响到镜像</li><li>数据卷默认会一直存在，不会随容器的删除而消亡</li></ol><h3 id="1-1-创建数据卷"><a href="#1-1-创建数据卷" class="headerlink" title="1.1 创建数据卷"></a>1.1 创建数据卷</h3><p>可以使用<code>docker volume create 数据卷名称</code>的命令来创建一个数据卷，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker volume create volume1</span><br><span class="line">volume1</span><br></pre></td></tr></table></figure><h3 id="1-2-查看数据卷"><a href="#1-2-查看数据卷" class="headerlink" title="1.2 查看数据卷"></a>1.2 查看数据卷</h3><p>创建完后，这个数据卷具体对应宿主机哪个文件目录在上面是没法得知的，可以通过<code>docker volume inspect 数据卷名称</code>来查看，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker volume inspect volume1</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "CreatedAt": "2019-08-12T19:43:47+08:00",</span><br><span class="line">        "Driver": "local",</span><br><span class="line">        "Labels": &#123;&#125;,</span><br><span class="line">        "Mountpoint": "/var/lib/docker/volumes/volume1/_data",</span><br><span class="line">        "Name": "volume1",</span><br><span class="line">        "Options": &#123;&#125;,</span><br><span class="line">        "Scope": "local"</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>可以看到数据卷volume1对应的文件目录是“/var/lib/docker/volumes/volume1/_data”。</p><p><code>docker inspect xxx</code>这个命令挺有用的，不论是查看镜像相关信息（<code>docker image inspect 镜像名/镜像ID</code>），还是查看容器相关信息（<code>docker container inspect 容器名/容器ID</code>），都可以使用，其中的image,container,volume是可以省略的，只要xxx部分不冲突就行。</p><p>可以通过<code>docker volume ls</code> 命令来查看所有数据卷，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               volume1</span><br></pre></td></tr></table></figure><h3 id="1-3-使用数据卷"><a href="#1-3-使用数据卷" class="headerlink" title="1.3 使用数据卷"></a>1.3 使用数据卷</h3><p>可以在启动容器时通过 -v 或 –mount 的方式将一个数据卷挂载到容器的某个目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker run -dit --name ubuntu1 -v volume1:/vol1 ubuntu:18.04</span><br><span class="line">b060e793d44de2ca871da257b47598334658952943a13d1c478df5c3ae91a01c</span><br></pre></td></tr></table></figure><p>按照 <code>-v 数据卷名:容器目录</code> 的格式，也可以使用 –mount 按照 <code>--mount source=数据卷名,target=容器目录</code> 的格式，如我们再启动一个挂载相同数据卷的容器 ubuntu2，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker run -dit --name ubuntu2 --mount source=volume1,target=/vol2 ubuntu:18.04</span><br><span class="line">b30971f8a4bbadee10774fce0b4568b5b7b1c9cde36f4bf84ac911a4cdaf6c8d</span><br></pre></td></tr></table></figure><p>可以在数据卷所在目录中创建一个文件来看看效果，先创建文件 hello.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# cd /var/lib/docker/volumes/volume1/_data</span><br><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ _data]# touch hello.txt</span><br><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ _data]# ls</span><br><span class="line">hello.txt</span><br></pre></td></tr></table></figure><p>然后通过<code>docker exec</code>来查看容器ubuntu1目录/vol1，及容器ubuntu2目录/vol2的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker exec -it ubuntu1 ls /vol1</span><br><span class="line">hello.txt</span><br><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker exec -it ubuntu2 ls /vol2</span><br><span class="line">hello.txt</span><br></pre></td></tr></table></figure><p>可以看到通过挂载目录 /vol1， /vol2 都可以访问到数据卷volume1对应目录下的内容。这就像linux的软链接一样，将容器目录链接到了数据卷目录。并且上述示例也说明，同一个数据卷是可以在被多个容器共享的。</p><p>数据卷的共享也可以通过 <code>volumes-from 容器名称/容器ID</code> 参数来实现，如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker run -dit --name ubuntu3 --volumes-from ubuntu2 ubuntu:18.04</span><br><span class="line">bb5c6d61a1e6eeb18ba8c889e471b2f3215f97efca79b311eeca5968b2700df8</span><br><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker exec -it ubuntu3 ls /vol2</span><br><span class="line">hello.txt</span><br></pre></td></tr></table></figure><p>通过<code>--volumes-from ubuntu2</code>来直接使用ubuntu2挂载的容器配置。</p><h3 id="1-4-删除数据卷"><a href="#1-4-删除数据卷" class="headerlink" title="1.4 删除数据卷"></a>1.4 删除数据卷</h3><p>数据卷不会随着容器的删除而自动删除。<br>如果一个数据卷还被某个容器使用，则不能删除；<br>如果一个数据卷只被一个容器使用，则可在删除容器时通过指定 <code>-v</code> 参数同时删除其挂载的数据卷；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker rm -v ubuntu3</span><br><span class="line">ubuntu3</span><br></pre></td></tr></table></figure><p>可以通过 <code>docker volume rm 数据卷名称</code> 来删除某个数据卷；<br>可以通过 <code>docker volume prune</code> 清理掉所有未被任何容器使用的数据卷。</p><h2 id="2-宿主机目录挂载方式"><a href="#2-宿主机目录挂载方式" class="headerlink" title="2. 宿主机目录挂载方式"></a>2. 宿主机目录挂载方式</h2><p>在容器启动时，使用 <code>-v 宿主机目录:容器目录</code> 或 <code>--mount type=bind,source=宿主机目录,target=容器目录</code>的参数格式指定将宿主机目录挂载到容器目录上。宿主机目录必须是绝对路径。两者之间的区别是 <code>-v</code> 如果在宿主机目录不存在时会自动创建目录，而<code>--mount</code>不会。如，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker run -dit --name ubuntu1 -v /root/v1:/vol1 ubuntu:18.04</span><br><span class="line">25c91911709eebc9290b47b483666f7b7be840df947117f7cad323583905b9f1</span><br><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker run -dit --name ubuntu2 --mount type=bind,source=/root/v2,target=/vol1 ubuntu:18.04</span><br><span class="line">docker: Error response from daemon: invalid mount config for type "bind": bind source path does not exist: /root/v2.</span><br><span class="line">See 'docker run --help'.</span><br><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# mkdir /root/v2</span><br><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker run -dit --name ubuntu2 --mount type=bind,source=/root/v2,target=/vol1 ubuntu:18.04</span><br><span class="line">5a57285e9261d048dc71cf0476055a290f80538afff2cefd2a24f8b4468b5171</span><br></pre></td></tr></table></figure><p>/root/v1,/root/v2都没有事先创建，用 <code>-v</code> 不会报错，会自动创建； <code>--mount</code>则会报错，目录必须先存在。</p><p>docker不仅支持目录的挂载，也支持文件的挂载，如，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker run --rm -it -v $HOME/.bash_history:/root/.bash_history ubuntu:18.04 bash </span><br><span class="line">root@3ae4ed4e687d:/# history</span><br><span class="line">    1  ll webapps/</span><br><span class="line">    2  ll confluence/images/</span><br></pre></td></tr></table></figure><p>通过将宿主机当前用户的历史操作文件挂载到容器的root用户下的历史操作文件，可在容器中通过<code>history</code>命令查看到宿主机的操作历史。</p><p>可通过 <code>docker inspect</code>来查看容器的挂载情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker inspect ubuntu1</span><br><span class="line">--省略了其它信息--</span><br><span class="line">"Mounts": [</span><br><span class="line">            &#123;</span><br><span class="line">                "Type": "bind",</span><br><span class="line">                "Source": "/root/v1",</span><br><span class="line">                "Destination": "/vol1",</span><br><span class="line">                "Mode": "",</span><br><span class="line">                "RW": true,</span><br><span class="line">                "Propagation": "rprivate"</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">--省略了其它信息--</span><br></pre></td></tr></table></figure><p>可在“Mounts”部分看到挂载信息。</p><h2 id="3-只读控制"><a href="#3-只读控制" class="headerlink" title="3. 只读控制"></a>3. 只读控制</h2><p>有时候，为了数据安全，我们不允许容器对挂载目录的内容进行修改，即对容器来说，挂载目录是只读的，这可以通过在挂载参数后面加限制实现。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker run -dit --name ubuntu3 -v /root/v1:/vol1:ro ubuntu:18.04</span><br><span class="line">25eca348ed307afcbef92bc03f0a1304b31b52e6db1fa07772b5dbd1040ff7b6</span><br><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker exec -it ubuntu3 bash</span><br><span class="line">root@25eca348ed30:/# touch /vol1/hello.txt</span><br><span class="line">touch: cannot touch '/vol1/hello.txt': Read-only file system</span><br></pre></td></tr></table></figure><p><code>-v</code>是在后面加<code>ro</code>（read-only），<code>--mount</code>则是形如<code>--mount type=bind,source=宿主机目录,target=容器目录,read only</code>的格式，可自行试验。<br>加了read only的挂载我们再通过<code>docker inspect</code>命令查看，可看到两者之间的差异 —— Mode与RW的值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">"Mounts": [</span><br><span class="line">            &#123;</span><br><span class="line">                "Type": "bind",</span><br><span class="line">                "Source": "/root/v1",</span><br><span class="line">                "Destination": "/vol1",</span><br><span class="line">                "Mode": "ro",</span><br><span class="line">                "RW": false,</span><br><span class="line">                "Propagation": "rprivate"</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>如果要对数据进行持久化管理或在容器之间共享数据，则需要将数据通过数据卷或宿主机目录（或文件）挂载的方式来将数据存储于宿主机上，使得数据的生命周期独立于容器的生命周期。这类似于我们不要把重要文件放在系统盘，而应放在其它数据盘一样，因为系统盘会由于重装系统或系统故障导致文件丢失。本文对Docker的数据管理进行了整理，后续对Docker的网络配置管理部分进行整理，欢迎持续关注。</p></br>     我的微信公众号：jboost-ksxy （一个不只有实战干货的技术公众号，欢迎关注，及时获取更新内容）———————————————————————————————————————————————————————————————![微信公众号](/assets/qrcode-05.jpg) ]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>就业，该去小公司还是大公司？</title>
      <link href="/company-choice.html"/>
      <url>/company-choice.html</url>
      
        <content type="html"><![CDATA[<p>前几天跟一朋友交流，他说一个表弟明年就要毕业了，马上面临找工作，是去一线城市找大公司的工作好，还是留在二线城市中小公司发展好。我说，去大公司好。为什么会有这个结论，这篇文章结合自己的经历说说我的一些感受。</p><a id="more"></a><p>我的第一份工作是在一家外企，当时抱着“逃离”上海的想法去了二线城市的分公司，但是管理文化氛围跟总部几乎都是一样的，这份工作经历对我后面的工作不论是做事风格、习惯上还是思考问题的方式方法上都有很大的影响。后面陆续进入国企，民企，再进入初创公司，从公司规模上可以说各种类型的都有过体验。下面从环境因素，平台效应因素等几个角度说说自己的感受。</p><h2 id="环境因素"><a href="#环境因素" class="headerlink" title="环境因素"></a>环境因素</h2><p>环境对一个人的影响还是很重要的，不论是大家熟知的“近朱者赤近墨者黑”的说法，还是令我们中国人挤破脑袋的“学区房”现象，都说明环境对一个人的成长起着至关重要的作用。</p><p>小公司与大公司的环境差异首先体现在人员的素养、水平上。大公司的准入门槛相对高一些，所以人员的素质、水平也相对要高一些，如果你周围牛人比较多的话，跟牛人待久了，你也可能慢慢就步入牛人之列了——“近朱者赤”。而小公司，尤其是初创公司，为了尽快招人干活，往往人员的素质、水平会良莠不齐，你可能很难找到一个各方面让你信服，想跟着他学的真正的“牛人”。</p><p>其次在制度、流程规范上。大公司在制度、流程、规范方面相对健全完善，不论是人事管理还是日常合作分工都比较明确，你知道什么时候应该干什么（因为都给你安排好了），处理什么事情应该找谁，都有章可循，有人可找。而在小公司，可能很多人感觉的就一个字——“乱”，人员职责、分工、权限没有明确定义，没有人引导，不知道在什么阶段应该干什么，或者怎么干，明明是个小兵，老板却恨不得你是个全才，啥事都希望你能搞定。有人把在大公司工作比喻是做一颗螺丝钉，而觉得在小公司才能锻炼综合能力，但我觉得在一定的阶段，螺丝钉似的工作才能让你在专业能力上面得到更大的提升，而小公司所谓的综合能力，往往演变的是“打杂”能力，老板为了节约成本，充分发挥（压榨）每个人的能力（价值），往往一人要分饰多角，比如做人事的既要管招聘，又要管行政，甚至还可能被拉去监督项目进度，很难让你在一个专业的领域深度成长。</p><p>再次在产品规模上，大公司产品的日活规模可能少则上百万，多则上亿，不论是在技术实现还是产品运营上，都需要较高的要求与水准，你在其中能学习的技能与套路是小公司日活几千或几万的产品规模无法比拟的。</p><p>最后在文化氛围上，一般大公司都有形成自己的企业文化，包括周围人的工作风格、习惯，都会对你产生潜移默化的影响。比如我现在的不论是写代码，还是写文字，都会反复检查好几遍的习惯就是在第一家公司工作时养成的。因为你的每一行代码你的leader可能都会仔细帮你review，找出有问题的地方让你反复修正直到合格，你的每一封邮件都会被别人（在外企很多时候还包括美国人、印度人）认真查看，所以促使你在发出前会仔细核查是否有遗漏的点，是否存在错别字或语法错误，久而久之，就养成了这种反复检查的比较严谨的做事风格。而在小公司，一般很难在短时间内形成自己的企业文化，很多事情的处理都比较粗放，缺乏对细节的把握，你很难从企业文化氛围上受益。</p><p>如果用游泳来比喻大公司与小公司的差异，我觉得大公司就像是一个掌握各项泳姿、动作标准的游泳运动员，有规范有节奏，从而游得更远；而小公司则更像一个会“狗爬式”的乡下野孩子，虽然路子野，但有效——尽管比较费力，但是能游起来，但能游多远，得看方向对不对，人能不能坚持。</p><h2 id="平台效应因素"><a href="#平台效应因素" class="headerlink" title="平台效应因素"></a>平台效应因素</h2><p>现在有些企业招聘，都明确要求毕业院校必须是985、211，甚至有些岗位直接面向BAT。前不久看到一个案例，上海交大硕博毕业因本科不是211，而被招聘企业直接拒绝。<br><img src="/assets/case-10.jpg" alt="case1">    <img src="/assets/case-11.jpg" alt="case2"></p><p>现实就是这样，看背景，看出身。名企工作与名校毕业一样，对后面的跳槽都会有较大的加分与优势。从小公司跳大公司难，但从大公司跳小公司就容易很多，见过许多阿里系的普通技术人员跳到中小企业做技术管理者的情况。</p><p>名企光环，除了对后面的就业与跳槽方面具备优势，在社会活动上也具备一定的优势，比如现在很多技术书籍，相当一部分出自阿里系，不是说非阿里系的人不具备这个能力，而是因为有着阿里这个名企光环，出的东西更容易被人接受与认可，尽管不一定水平有多好。</p><h2 id="什么人适合去小公司"><a href="#什么人适合去小公司" class="headerlink" title="什么人适合去小公司"></a>什么人适合去小公司</h2><p>毕竟不是每个人都能去大公司，那么什么人适合去小公司呢？我觉得可能主要包括两类，一类是自己在某个领域已经取得了较好的成长，具备了独当一面或者懂得如何带领他人来做事情的能力，这种情况一般是为了追求高薪或对某个领域或公司比较看好，有自己想法的人；另一类是目前还不具备进入大公司的资本与能力的人，人总得工作与生活，所以不得不先进入小公司成长，但这部分人除非自身公司发展特别好，否则还是应该尽力往大公司靠，努力进入大公司体验其管理模式与文化氛围，对你整个职业生涯是有很大帮助的。</p><h2 id="选择什么样的小公司"><a href="#选择什么样的小公司" class="headerlink" title="选择什么样的小公司"></a>选择什么样的小公司</h2><p>选择什么样的小公司比较好，虽然很多时候也没有太多的选择，毕竟好的小公司也是可遇不可求的事情，但如果有的话，我觉得还是尽力选择满足如下四个条件的小公司比较好。</p><ol><li>靠谱的老板。小公司的管理文化与前途基本由老板的品质与能力决定，所以一个有能力、靠谱的老板是第一要素。</li><li>高水平的管理团队，技术、管理、营销各方面。管理团队对于创业公司来说非常重要，只有一个稳定的各方面成熟的团队，成功的几率才会大一点，你在里面能获得的成长空间也更多一些。</li><li>产品项目具备长远发展的潜力。企业经营就是做一个别人愿意花钱购买的产品，并寻找一个将产品源源不断卖不出的方式，所以产品是不是刚需，有没有人买单，能不能长久很重要。</li><li>可靠的资源与渠道。有可靠的资源与渠道，才能将产品源源不断地卖出去，企业才能保持可持续发展。</li></ol><p>以上四点从上往下重要性依次递减，同时满足四个条件的小公司应该是极少的，是可遇不可求的事情，可以按从上往下的重要性进行选择。</p><p>另外进入小公司，可能常见的一个东西是期权，我认为期权是一个美丽的梦，如果以上四点都靠谱，没有期权也能获得很好的锻炼与成长，如果不靠谱，那么就算拿了期权大概率也是一个美丽的梦，看起来很美好，但不会成真的那种，所以面对期权（画饼），也要保持理性。</p><h2 id="职场没有伊甸园"><a href="#职场没有伊甸园" class="headerlink" title="职场没有伊甸园"></a>职场没有伊甸园</h2><p>最后，不论是大公司，还是小公司，都不存在职场的伊甸园，只有自己不断成长，进步，自己强大了，才有更多的选择空间。<br></br><br>我的微信公众号：jboost-ksxy （一个不只有技术干货的公众号，欢迎关注，及时获取更新内容）<br>———————————————————————————————————————————————————————————————<br><img src="/assets/qrcode-05.jpg" alt="微信公众号"> </p>]]></content>
      
      
      <categories>
          
          <category> Career </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker笔记（七）：常用服务安装——Nginx、MySql、Redis</title>
      <link href="/docker-7.html"/>
      <url>/docker-7.html</url>
      
        <content type="html"><![CDATA[<p>开发中经常需要安装一些常用的服务软件，如Nginx、MySql、Redis等，如果按照普通的安装方法，一般都相对比较繁琐 —— 要经过下载软件或源码包，编译安装，配置，启动等步骤，使用 Docker 来安装这些服务软件能极大地简化安装过程，且速度也很快。</p><a id="more"></a><p>本文以下操作假定你已经装好了docker，并做好了镜像配置。如果没有，请参考 <a href="/docker-3.html">Docker笔记（三）：Docker安装与配置</a></p><h2 id="1-MySql-安装"><a href="#1-MySql-安装" class="headerlink" title="1. MySql 安装"></a>1. MySql 安装</h2><h3 id="1-1-下载镜像"><a href="#1-1-下载镜像" class="headerlink" title="1.1 下载镜像"></a>1.1 下载镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~$ docker pull mysql:5.7</span><br></pre></td></tr></table></figure><h3 id="1-2-创建挂载目录"><a href="#1-2-创建挂载目录" class="headerlink" title="1.2 创建挂载目录"></a>1.2 创建挂载目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~$ mkdir -p apps/mysql/conf apps/mysql/data apps/mysql/logs</span><br></pre></td></tr></table></figure><p>如上分别创建了配置文件目录，数据存放目录，以及日志文件目录</p><h3 id="1-3-启动容器实例"><a href="#1-3-启动容器实例" class="headerlink" title="1.3 启动容器实例"></a>1.3 启动容器实例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~$ docker run -d -p 3306:3306 --name mysql -v /home/devuser/apps/mysql/conf/my.cnf:/etc/mysql/conf.d/my.cnf -v /home/devuser/apps/mysql/logs:/var/log/mysql -v /home/devuser/apps/mysql/data:/var/lib/mysql --restart=always -e MYSQL_ROOT_PASSWORD=Passw0rd mysql:5.7</span><br></pre></td></tr></table></figure><p>其中<br>-d： 表示在后台运行<br>-p： 宿主机端口与容器端口映射<br>–name： 容器名称<br>-v： 宿主机目录与容器目录映射<br>–restart=always：除非被<code>docker stop</code>命令明确停止，否则一直尝试重启处于停止态的容器；如果Docker重启，也会自动启动容器<br>-e： 设置环境变量，这里设置了mysql root用户的密码为Passw0rd</p><p>如此，MySql服务就跑起来了，很快很简单有木有。</p><h2 id="2-Redis-安装"><a href="#2-Redis-安装" class="headerlink" title="2. Redis 安装"></a>2. Redis 安装</h2><h3 id="2-1-拉取镜像"><a href="#2-1-拉取镜像" class="headerlink" title="2.1 拉取镜像"></a>2.1 拉取镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~$ docker pull redis:5.0.5</span><br></pre></td></tr></table></figure><h3 id="2-2-启动容器"><a href="#2-2-启动容器" class="headerlink" title="2.2 启动容器"></a>2.2 启动容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~$ docker run -d --name redis -p 6379:6379 -v /home/devuser/apps/redis/data:/data --restart=always redis:5.0.5 redis-server --appendonly yes --requirepass "Passw1rd"</span><br></pre></td></tr></table></figure><p>-p， -v 与上同，不赘述<br>redis-server –appendonly yes : 在容器启动时执行redis-server命令，并打开redis持久化配置<br>–requirepass： 设置密码</p><h3 id="2-3-连接"><a href="#2-3-连接" class="headerlink" title="2.3 连接"></a>2.3 连接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~$ docker exec -it redis redis-cli -h 172.17.0.4 -p 6379 -a Passw1rd</span><br><span class="line">Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.</span><br><span class="line">172.17.0.4:6379&gt; keys *</span><br><span class="line">(empty list or set)</span><br><span class="line">172.17.0.4:6379&gt;</span><br></pre></td></tr></table></figure><p>这种方式把密码暴露了，其它登录用户通过history即可看到密码，不是太安全。可改用如下方式，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~$ docker exec -it redis redis-cli</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; auth 'Passw1rd'</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or set)</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h2 id="3-Nginx-安装"><a href="#3-Nginx-安装" class="headerlink" title="3. Nginx 安装"></a>3. Nginx 安装</h2><h3 id="3-1-拉取镜像"><a href="#3-1-拉取镜像" class="headerlink" title="3.1 拉取镜像"></a>3.1 拉取镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~$ docker pull nginx</span><br></pre></td></tr></table></figure><p>会拉取最新的（latest）镜像</p><h3 id="3-2-创建目录"><a href="#3-2-创建目录" class="headerlink" title="3.2 创建目录"></a>3.2 创建目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~$ mkdir -p apps/nginx/html apps/nginx/logs apps/nginx/conf</span><br></pre></td></tr></table></figure><h3 id="3-3-先不指定映射路径启动一个容器"><a href="#3-3-先不指定映射路径启动一个容器" class="headerlink" title="3.3 先不指定映射路径启动一个容器"></a>3.3 先不指定映射路径启动一个容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ docker run -d -p 80:80 --name nginx nginx</span><br><span class="line">1fdcd13457a6eaacb511878e10d84ffbe48fe63fd1fb3705f58b2d4195b151d8</span><br></pre></td></tr></table></figure><p>这里如果直接指定映射路径运行会报错，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~$ docker run -d -p 80:80 --name nginx -v ~/apps/nginx/html:/usr/share/nginx/html -v ~/apps/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v ~/apps/nginx/logs:/var/log/nginx nginx</span><br><span class="line">dab56c13f9e76aad37fcf73411c78d495a6466f1c0d214949650dbae44adddf4</span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:345: starting container process caused "process_linux.go:424: container init caused \"rootfs_linux.go:58: mounting \\\"/home/devuser/apps/nginx/conf/nginx.conf\\\" to rootfs \\\"/home/docker_image/overlay2/e40ccaf4d845a9af92487b47cbc4d505c5c776800ef8887c5b43833b10661427/merged\\\" at \\\"/home/docker_image/overlay2/e40ccaf4d845a9af92487b47cbc4d505c5c776800ef8887c5b43833b10661427/merged/etc/nginx/nginx.conf\\\" caused \\\"not a directory\\\"\"": unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type.</span><br></pre></td></tr></table></figure><h3 id="3-4-将运行容器的配置文件复制到宿主机目录下"><a href="#3-4-将运行容器的配置文件复制到宿主机目录下" class="headerlink" title="3.4 将运行容器的配置文件复制到宿主机目录下"></a>3.4 将运行容器的配置文件复制到宿主机目录下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~$ docker cp 1fdcd13457a6:/etc/nginx/nginx.conf ~/apps/nginx/conf/</span><br></pre></td></tr></table></figure><h3 id="3-5-删除容器并重新运行"><a href="#3-5-删除容器并重新运行" class="headerlink" title="3.5 删除容器并重新运行"></a>3.5 删除容器并重新运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~$ docker stop 1fdcd1345</span><br><span class="line">~$ docker rm 1fdcd1345</span><br><span class="line">~$ docker run -d -p 80:80 --name nginx -v ~/apps/nginx/html:/usr/share/nginx/html -v ~/apps/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v ~/apps/nginx/logs:/var/log/nginx nginx</span><br></pre></td></tr></table></figure><h3 id="3-6-更新配置后重新加载"><a href="#3-6-更新配置后重新加载" class="headerlink" title="3.6 更新配置后重新加载"></a>3.6 更新配置后重新加载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~$ docker kill -s HUP nginx</span><br></pre></td></tr></table></figure><p>类似于 <code>nginx -s reload</code></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>本文没有总结。<br></br><br>我的微信公众号：jboost-ksxy （一个不只有技术干货的公众号，欢迎关注，及时获取更新内容）<br>———————————————————————————————————————————————————————————————<br><img src="/assets/qrcode-05.jpg" alt="微信公众号"> </p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot（十一）：注解结合JWT实现简单的接口鉴权</title>
      <link href="/springboot-simpleauth.html"/>
      <url>/springboot-simpleauth.html</url>
      
        <content type="html"><![CDATA[<p>一般服务的安全包括认证（Authentication）与授权（Authorization）两部分，认证即证明一个用户是合法的用户，比如通过用户名密码的形式，授权则是控制某个用户可以访问哪些资源。比较成熟的框架有Shiro、Spring Security，如果要实现第三方授权模式，则可采用OAuth2。但如果是一些简单的应用，比如一个只需要鉴别用户是否登录的APP，则可以简单地通过注解+拦截器的方式来实现。本文介绍了具体实现过程，虽基于Spring Boot实现，但稍作修改（主要是拦截器配置）就可以引入其它Spring MVC的项目。</p><a id="more"></a><h2 id="1-涉及的知识点"><a href="#1-涉及的知识点" class="headerlink" title="1. 涉及的知识点"></a>1. 涉及的知识点</h2><ol><li>注解：用来标记某个接口是否需要登录</li><li>拦截器：拦截所有请求，判断请求的接口是否需要登录验证（基于是否标记了注解），如果需要，验证相应的信息（token），通过则放行，否则返回错误信息</li><li>JWT： Json Web Token，一种流行的认证解决方案，它可以生成携带信息的token，但token一旦生成，其过期时间就不好更新，如果需要实现用户有操作就自动延长过期时间的场景，就相对比较麻烦。我们这里只用来生成token，过期通过redis实现</li><li>RedisTemplate： 将token存在redis中，通过redis的过期机制来控制token的有效期</li><li>ThreadLocal：可以将一次请求中多个环节需要访问的变量通过ThreadLocal来传递，比如userId</li></ol><h2 id="2-依赖配置"><a href="#2-依赖配置" class="headerlink" title="2. 依赖配置"></a>2. 依赖配置</h2><p>在pom.xml中添加JWT与redis依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jwt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在application.yml配置文件中添加redis相关配置属性</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123654</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">3000</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><h2 id="3-定义注解"><a href="#3-定义注解" class="headerlink" title="3. 定义注解"></a>3. 定义注解</h2><p>注解的定义你可以根据项目的具体场景，比如需要登录的接口比较多，就可以定义如 @SkipAuth 的注解来标记不需要登录的接口，反之，则可以定义如 @NeedAuth 的注解来标记需要登录的接口，总之就是让标记接口这个操作尽可能少。但也可以基于另一种考虑，万一需要登录的接口忘了加不就存在安全问题吗，所以用 @SkipAuth 相对要保险点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SkipAuth &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-定义token管理器"><a href="#4-定义token管理器" class="headerlink" title="4. 定义token管理器"></a>4. 定义token管理器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTokenManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成TOKEN</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createToken</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用uuid作为源token</span></span><br><span class="line">        String token = Jwts.builder().setId(userId).setIssuedAt(<span class="keyword">new</span> Date())</span><br><span class="line">            .signWith(SignatureAlgorithm.HS256, JwtConstant.JWT_SECRET).compact();</span><br><span class="line">        <span class="comment">//存储到redis并设置过期时间</span></span><br><span class="line">        redisTemplate.boundValueOps(JwtConstant.AUTHORIZATION + <span class="string">":"</span> + userId)</span><br><span class="line">            .set(token, JwtConstant.TOKEN_EXPIRES_HOUR, TimeUnit.HOURS);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkToken</span><span class="params">(TokenModel model)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (model == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String token = redisTemplate.boundValueOps(JwtConstant.AUTHORIZATION + <span class="string">":"</span> </span><br><span class="line">            + model.getUserId()).get();</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span> || !token.equals(model.getToken())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果验证成功，说明此用户进行了一次有效操作，延长token的过期时间</span></span><br><span class="line">        redisTemplate.boundValueOps(model.getUserId())</span><br><span class="line">            .expire(JwtConstant.TOKEN_EXPIRES_HOUR, TimeUnit.HOURS);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteToken</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        redisTemplate.delete(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在登录接口通过时，调用 <code>createToken</code> 创建token，并保存到redis中，设置过期时间， 在调用未被 @SkipAuth 注解标记的接口时，调用 <code>checkToken</code> 来验证，并更新token的过期时间， 退出登录时，删除token。</p><h2 id="5-定义拦截器"><a href="#5-定义拦截器" class="headerlink" title="5. 定义拦截器"></a>5. 定义拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTokenManager tokenManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                             HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String requestPath = request.getRequestURI().substring(request.getContextPath().length());</span><br><span class="line">        <span class="comment">// 如果不是映射到方法直接通过</span></span><br><span class="line">        <span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">        Method method = handlerMethod.getMethod();</span><br><span class="line">        <span class="comment">// 如果方法注明了 SkipAuth，则不需要登录token验证</span></span><br><span class="line">        <span class="keyword">if</span> (method.getAnnotation(SkipAuth<span class="class">.<span class="keyword">class</span>) !</span>= <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从header中得到token</span></span><br><span class="line">        String authorization = request.getHeader(JwtConstant.AUTHORIZATION);</span><br><span class="line">        <span class="comment">// 验证token</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(authorization))&#123;</span><br><span class="line">            WebUtil.outputJsonString(ApiResponse.failed(<span class="string">"未提供有效Token！"</span>), response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Claims claims = Jwts.parser().setSigningKey(JwtConstant.JWT_SECRET)</span><br><span class="line">                .parseClaimsJws(authorization).getBody();</span><br><span class="line">            String userId = claims.getId();</span><br><span class="line">            TokenModel model = <span class="keyword">new</span> TokenModel(userId, authorization);</span><br><span class="line">            <span class="keyword">if</span> (tokenManager.checkToken(model)) &#123;</span><br><span class="line">                <span class="comment">// 通过ThreadLocal设置下游需要访问的值</span></span><br><span class="line">                AuthUtil.setUserId(model.getUserId());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">"连接"</span> + requestPath + <span class="string">"拒绝"</span>);</span><br><span class="line">                WebUtil.outputJsonString(ApiResponse.failed(<span class="string">"未提供有效Token！"</span>), response);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"连接"</span> + requestPath + <span class="string">"发生错误:"</span>, e);</span><br><span class="line">            WebUtil.outputJsonString(ApiResponse.failed(<span class="string">"校验Token发生异常！"</span>), response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//结束后清除，否则由于线程池复用，导致ThreadLocal的值被其他用户获取</span></span><br><span class="line">        AuthUtil.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器通过对请求方法是否标记注解 @SkipAuth 来判断是否需要进行token验证，如果验证通过，则从JWT token中解析出userId，通过AuthUtil工具方法保存到ThreadLocal中，供下游访问。在请求处理结束调用 <code>afterCompletion</code> 方法中，要清除掉ThreadLocal中的值，否则由于线程池的复用，导致被其他用户获取。</p><p>然后，注册拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AuthInterceptor authInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthInterceptor</span><span class="params">(AuthInterceptor authInterceptor)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authInterceptor = authInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 注册鉴权拦截器</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(authInterceptor)</span><br><span class="line">            .addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">            .excludePathPatterns(<span class="string">"/error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里将 /error 这个接口排除了，因为如果接口处理过程中出现异常，则spring boot会自动跳转到 /error 接口，又会进入拦截器校验（因为/error接口没有标注 @SkipAuth 注解）。</p><h2 id="6-验证"><a href="#6-验证" class="headerlink" title="6. 验证"></a>6. 验证</h2><p>通过以上几步，一个简单的接口认证功能就实现了，我们可以通过添加一个登录接口，两个测试接口（一个需要认证，一个不需要认证）来验证下。<br>登录接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SkipAuth</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ApiResponse <span class="title">login</span><span class="params">(@RequestBody Map&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">    String username = MapUtils.getString(params, <span class="string">"username"</span>);</span><br><span class="line">    String password = MapUtils.getString(params, <span class="string">"password"</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">"ksxy"</span>.equals(username) &amp;&amp; <span class="string">"jboost"</span>.equals(password))&#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.success(tokenManager.createToken(username));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.failed(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登录成功后，通过<code>createToken</code>方法创建了JWT token。<br>测试接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SkipAuth</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/skip-auth"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ApiResponse <span class="title">skipAuth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> ApiResponse.success(<span class="string">"不需要认证的接口调用"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/need-auth"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ApiResponse <span class="title">needAuth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ApiResponse.success(<span class="string">"username: "</span> + AuthUtil.getUserId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>本文介绍了一个简单的接口认证方案，适用于不需要基于用户角色进行授权的场景。如果有较复杂的授权需求，则还是基于Shiro， Spring Security， OAuth2等框架来实现。这里也可以不用JWT，但是需要自己去做一些处理，比如将userId以某种形式包含在token中，解析时取出。<br>本文完整实例代码：<a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-simpleauth" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-simpleauth</a><br><br><br><img src="/assets/card-2.png" alt="微信公众号"></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>老被跨域问题烦？看看都有哪些处理方法</title>
      <link href="/cors.html"/>
      <url>/cors.html</url>
      
        <content type="html"><![CDATA[<p>前面写的《IT技术人员的自我修养》，没想到几天内收到了不少良好的反馈，在此也感谢大家的关注。往后会不定时分享一些技术、管理领域的工作经验总结与感悟，欢迎大家持续关注、交流。最近被问及一个跨域的问题，包括之前面试时发现很多面试者对跨域及其处理也是一知半解，故本文对该问题进行了梳理总结，以供参考。</p><a id="more"></a><h2 id="1-什么是跨域"><a href="#1-什么是跨域" class="headerlink" title="1. 什么是跨域"></a>1. 什么是跨域</h2><p>理解什么是跨域，就要先了解一个叫“同源策略”的东西，什么是“同源策略”？这是浏览器为了网站访问安全，对来自不同源的请求做一些必要的访问限制的一种策略。那什么叫“同源”呢？我们知道，一个http请求地址一般包含四部分：<code>协议://域名:端口/路径</code>，所谓同源，就是前面三者，即协议、域名、端口都一样。举例说明，假如我们有一个地址 <code>http://blog.jboost.cn/docker-1.html</code>， 来看以下地址是否与它同源</p><table><thead><tr><th align="center">地址</th><th align="center">是否同源</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><a href="https://blog.jboost.cn/docker-1.html">https://blog.jboost.cn/docker-1.html</a></td><td align="center">不同源</td><td align="center">协议不同，一个http，一个https</td></tr><tr><td align="center"><a href="http://www.jboost.cn/docker-1.html" target="_blank" rel="noopener">http://www.jboost.cn/docker-1.html</a></td><td align="center">不同源</td><td align="center">域名不同</td></tr><tr><td align="center"><a href="http://blog.jboost.cn:8080/docker-1.html">http://blog.jboost.cn:8080/docker-1.html</a></td><td align="center">不同源</td><td align="center">端口不同，一个是默认端口80，一个是8080</td></tr><tr><td align="center"><a href="http://blog.jboost.cn/docker-2.html">http://blog.jboost.cn/docker-2.html</a></td><td align="center">同源</td><td align="center">虽然路径不同，但协议、域名、端口（默认80）都相同</td></tr></tbody></table><p>那么浏览器对不同源的请求做了哪些访问限制呢？共有三种限制</p><ol><li>对Cookie、LocalStorage，以及IndexDB（浏览器提供的类NoSQL的一个本地数据库）的访问</li><li>对DOM的访问</li><li>AJAX请求</li></ol><p>而跨域就是要打破这种访问限制，对不同源的资源请求也能顺利进行，最常见的就是AJAX请求，比如前后端分离架构中，两者服务域名不同，前端通过AJAX直接访问服务端接口，就会存在跨域问题。</p><h2 id="2-为什么会存在跨域"><a href="#2-为什么会存在跨域" class="headerlink" title="2. 为什么会存在跨域"></a>2. 为什么会存在跨域</h2><p>前面说“同源策略”时已经提到，浏览器是为了网站的访问安全，才设置了跨域这道屏障。那么前面所说的三种限制，分别都是如何来保障网站安全的。</p><ol><li>对本地存储Cookie、LocalStorage、IndexDB的访问限制<br>我们系统的登录凭证一般是通过在Cookie中设置 SESSIONID（如针对浏览器表单请求）或直接返回 token（如针对REST请求）的形式返回给客户端的，比如Tomcat是通过在Cookie中设置名为 JSESSIONID 的属性来保存的，而一般REST请求的token前端会存储于 LocalStorage 中，如果不存在访问限制，则你访问的其它网站可能就会获取到这些凭证，然后伪造你的身份来发起非法请求，这就太不安全了。</li><li>对DOM的访问限制<br>如果不对DOM进行访问限制，那么其它网站，尤其一些钓鱼网站，就可以通过 <code>&lt;iframe&gt;</code> 的形式拿到你访问网站的DOM，进而获取到你输入的一些敏感信息，比如用户名、密码…</li><li>对AJAX请求的限制<br>同源策略规定，AJAX请求只能发给同源的网址，否则就会报错。至于为什么要限制，一方面是避免1中所提到伪造非法请求，另一方面我理解是AJAX过于灵活，如果不做限制，可能网站的接口资源就会被其它网站随意使用，就像你的私有物品被别人招呼都不打任意拿去用一样。</li></ol><p>总之，同源策略是浏览器提供的最基本的一种安全保障机制或约定。</p><h2 id="3-怎么实现跨域访问"><a href="#3-怎么实现跨域访问" class="headerlink" title="3. 怎么实现跨域访问"></a>3. 怎么实现跨域访问</h2><p>我们平常遇到的跨域问题基本都出现在AJAX请求的场景，一般而言，可以通过代理、CORS、JSONP等方式来解决跨域问题。</p><h3 id="3-1-代理"><a href="#3-1-代理" class="headerlink" title="3.1 代理"></a>3.1 代理</h3><p>既然“同源策略”是浏览器端的机制，那我们就可以绕开浏览器，最常见的做法就是使用代理，如 Nginx，比如我们前端项目的域名是 <a href="http://blog.jboost.cn，服务端接口域名是" target="_blank" rel="noopener">http://blog.jboost.cn，服务端接口域名是</a> <a href="http://api.jboost.cn，我们在" target="_blank" rel="noopener">http://api.jboost.cn，我们在</a> Nginx 中提供如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    # 端口</span><br><span class="line">    listen 80;</span><br><span class="line">    # 域名</span><br><span class="line">    server_name blog.jboost.cn;</span><br><span class="line">    # 所有 http:&#x2F;&#x2F;blog.jboost.cn&#x2F;api&#x2F;xxx 请求都会被转发到 http:&#x2F;&#x2F;api.jboost.cn&#x2F;api&#x2F;xxx</span><br><span class="line">    location ^~ &#x2F;api &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;api.jboost.cn;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则前端通过AJAX请求服务端接口 <a href="http://api.jboost.cn/api/xxx" target="_blank" rel="noopener">http://api.jboost.cn/api/xxx</a> 都可以改为通过 <a href="http://blog.jboost.cn/api/xxx">http://blog.jboost.cn/api/xxx</a> 来访问，从而避免不同源的跨域问题。</p><h3 id="3-2-CORS"><a href="#3-2-CORS" class="headerlink" title="3.2 CORS"></a>3.2 CORS</h3><p>CORS是Cross-Origin Resource Sharing的简写，即跨域资源共享，CORS需要服务端与浏览器同时支持，目前所有浏览器（除IE10以下）都支持CORS，因此，实现CORS，主要就是服务端的工作了。例如在Spring Boot中，我们可通过如下配置注册一个CorsFilter的过滤器来实现跨域支持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">CorsFilter</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CORSAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"corsFilterRegistrationBean"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">corsFilterRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource corsConfigurationSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line"></span><br><span class="line">        CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        corsConfiguration.applyPermitDefaultValues();</span><br><span class="line">        corsConfiguration.setAllowedMethods(Arrays.asList(CorsConfiguration.ALL));</span><br><span class="line">        corsConfiguration.addExposedHeader(HttpHeaders.DATE);</span><br><span class="line"></span><br><span class="line">        corsConfigurationSource.registerCorsConfiguration(<span class="string">"/**"</span>, corsConfiguration);</span><br><span class="line"></span><br><span class="line">        CorsFilter corsFilter = <span class="keyword">new</span> CorsFilter(corsConfigurationSource);</span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        filterRegistrationBean.setFilter(corsFilter);</span><br><span class="line">        filterRegistrationBean.setOrder(Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">        filterRegistrationBean.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实质就是在响应消息的Header中添加几个属性，主要有</p><ul><li>Access-Control-Allow-Origin  必需，表示允许跨域的请求源，可以是具体的域名，也可以是 * ，表示任意域名</li><li>Access-Control-Allow-Methods 必需，表示允许跨域访问的HTTP方法，如GET、POST、PUT、DELETE等，可以是 * ，表示所有</li><li>Access-Control-Allow-Headers 如果请求包括 Access-Control-Request-Headers 头信息，则必需，表示服务器支持的所有头信息字段</li></ul><h3 id="3-3-JSONP"><a href="#3-3-JSONP" class="headerlink" title="3.3 JSONP"></a>3.3 JSONP</h3><p>JSONP是利用浏览器对JS一些标签（如 <code>&lt;script&gt;</code>, <code>&lt;img&gt;</code>等）的 src 属性不具有同源策略限制的特性实现的，如前端添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://api.jboost.cn/hello?name=jboost&amp;callback=jsonpCallback"</span>/&gt;</span><br></pre></td></tr></table></figure><p>并且定义JS方法 <code>jsonpCallback</code>。服务端接口返回内容需要是JS方法<code>jsonpCallback</code>的调用格式，如<code>jsonpCallback({&quot;name&quot;:&quot;jboost&quot;})</code>，这样在<code>jsonpCallback</code>方法中就可以获取服务端实际返回的结果数据<code>{&quot;name&quot;:&quot;jboost&quot;}</code>了。<br>JSONP方式的局限性也很明显，一是只支持GET请求——你没见过哪些<code>&lt;script&gt;</code>, <code>&lt;img&gt;</code>标签是POST请求吧，二是需要对服务端返回数据格式做处理。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>三种跨域支持的实现，代理方式最简单，对客户端、服务端都不具有侵入性，但如果需要支持的请求源比较多，或者是与第三方对接的话，代理方式就不太适用了。CORS相对来说是一种标准的处理方式，并且通过过滤器的方式对业务代码也没有任何侵入性。而JSONP方式局限性较大，只支持GET，并且需要服务端做返回数据格式的支持。可针对具体情况选择适用的方式。</p></br>![微信公众号](/assets/card-2.png)  ]]></content>
      
      
      <categories>
          
          <category> 高效实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot从入门到实战（十）：异步处理</title>
      <link href="/springboot-async.html"/>
      <url>/springboot-async.html</url>
      
        <content type="html"><![CDATA[<p>在业务开发中，有时候会遇到一些非核心的附加功能，比如短信或微信模板消息通知，或者一些耗时比较久，但主流程不需要立即获得其结果反馈的操作，比如保存图片、同步数据到其它合作方等等。如果将这些操作都置于主流程中同步处理，势必会对核心流程的性能造成影响，甚至由于第三方服务的问题导致自身服务不可用。这时候就应该将这些操作异步化，以提高主流程的性能，并与第三方解耦，提高主流程的可用性。</p><a id="more"></a><p>在Spring Boot中，或者说在Spring中，我们实现异步处理一般有以下几种方式：</p><p><strong>1. 通过 @EnableAsync 与 @Asyc 注解结合实现</strong><br><strong>2. 通过异步事件实现</strong><br><strong>3. 通过消息队列实现</strong></p><h2 id="1-基于注解实现"><a href="#1-基于注解实现" class="headerlink" title="1. 基于注解实现"></a>1. 基于注解实现</h2><p>我们以前在Spring中提供异步支持一般是在配置文件 applicationContext.xml 中添加类似如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">task:annotation-driven</span> <span class="attr">executor</span>=<span class="string">"executor"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">task:executor</span> <span class="attr">id</span>=<span class="string">"executor"</span> <span class="attr">pool-size</span>=<span class="string">"10-200"</span> <span class="attr">queue-capacity</span>=<span class="string">"2000"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>Spring的 @EnableAsync 注解的功能与<code>&lt;task:annotation-driven/&gt;</code>类似，将其添加于一个 @Configuration 配置类上，可对Spring应用的上下文开启异步方法支持。 @Async 注解可以标注在方法或类上，表示某个方法或某个类里的所有方法需要通过异步方式来调用。</p><p>我们以一个demo来示例具体用法，demo地址：<a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-async" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-async</a></p><ol><li>添加 @EnableAsync 注解</li></ol><p>在一个 @Configuration 配置类上添加 @EnableAysnc 注解，我们一般可以添加到启动类上，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置相关的异步执行线程池</li></ol><p>可通过配置类的方式对异步线程池进行配置，并提供异步执行时出现异常的处理方法，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncConfig</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;async.corePoolSize:10&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> corePoolSize;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;async.maxPoolSize:200&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPoolSize;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;async.queueCapacity:2000&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> queueCapacity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;async.keepAlive:5&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> keepAlive;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        executor.setCorePoolSize(corePoolSize);</span><br><span class="line">        executor.setMaxPoolSize(maxPoolSize);</span><br><span class="line">        executor.setQueueCapacity(queueCapacity);</span><br><span class="line">        executor.setKeepAliveSeconds(keepAlive);</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">"async-"</span>);</span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        executor.setDaemon(<span class="keyword">false</span>); <span class="comment">//以用户线程模式运行</span></span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyAsyncUncaughtExceptionHandler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAsyncUncaughtExceptionHandler</span> <span class="keyword">implements</span> <span class="title">AsyncUncaughtExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleUncaughtException</span><span class="params">(Throwable throwable, Method method, Object... objects)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"catch exception when invoke "</span> + method.getName());</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们通过实现 AsyncConfigurer 接口提供了一个异步执行线程池对象，各参数的说明可以参考【<a href="/threadpool.html">线程池的基本原理，看完就懂了</a>】，里面有很详细的介绍。且通过实现   AsyncUncaughtExceptionHandler 接口提供了一个异步执行过程中未捕获异常的处理类。</p><ol start="3"><li>定义异步方法</li></ol><p>异步方法的定义只需要在类（类上注解表示该类的所有方法都异步执行）或方法上添加 @Async 注解即可，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"2. running in thread: "</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncMethodWithException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"exception in async method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>测试</li></ol><p>我们可以通过如下测试类来对异步方法进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AnnotationBasedAsyncTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncService asyncService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAsync</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1. running in thread: "</span> + Thread.currentThread().getName());</span><br><span class="line">        asyncService.asyncMethod();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAysncWithException</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1. running in thread: "</span> + Thread.currentThread().getName());</span><br><span class="line">        asyncService.asyncMethodWithException();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为异步方法在一个新的线程中执行，可能在主线程执行完后还没来得及处理，所以通过sleep来等待它执行完成。具体执行结果读者可自行尝试运行，这里就不贴图了。</p><h2 id="2-基于事件实现"><a href="#2-基于事件实现" class="headerlink" title="2. 基于事件实现"></a>2. 基于事件实现</h2><p>第二种方式是通过Spring框架的事件监听机制实现，但Spring的事件监听默认是同步执行的，所以实际上还是需要借助 @EnableAsync 与 @Async 来实现异步。</p><ol><li>添加 @EnableAsync 注解</li></ol><p>与上同，可添加到启动类上。</p><ol start="2"><li><p>自定义事件类<br>通过继承 ApplicationEvent 来自定义一个事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String arg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source, String arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">        <span class="keyword">this</span>.arg = arg;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义事件处理类<br>支持两种形式，一是通过实现 ApplicationListener 接口，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEventHandler</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">MyEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(MyEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"2. running in thread: "</span> + Thread.currentThread().getName());</span><br><span class="line">        System.out.println(<span class="string">"2. arg value: "</span> + event.getArg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二是通过 @EventListener 注解，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEventHandler2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(MyEvent event)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"3. running in thread: "</span> + Thread.currentThread().getName());</span><br><span class="line">        System.out.println(<span class="string">"3. arg value: "</span> + event.getArg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意两者都需要添加 @Async 注解，否则默认是同步方式执行。</p></li><li><p>定义事件发送类<br>可以通过实现 ApplicationEventPublisherAware 接口来使用 ApplicationEventPublisher 的 publishEvent()方法发送事件，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEventPublisher</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationEventPublisher = applicationEventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">(ApplicationEvent event)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationEventPublisher.publishEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p></li></ol><p>可以通过如下测试类来进行测试，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">EventBasedAsyncTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyEventPublisher myEventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAsync</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1. running in thread: "</span> + Thread.currentThread().getName());</span><br><span class="line">        myEventPublisher.publishEvent(<span class="keyword">new</span> MyEvent(<span class="keyword">this</span>,<span class="string">"testing event based async"</span>));</span><br><span class="line">        Thread.sleep(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后发现两个事件处理类都执行了，因为两者都监听了同一个事件 MyEvent 。</p><h2 id="3-基于消息队列实现"><a href="#3-基于消息队列实现" class="headerlink" title="3. 基于消息队列实现"></a>3. 基于消息队列实现</h2><p>以上两种方式都是基于服务器本机运行，如果服务进程出现异常退出，可能导致异步执行中断。如果需要保证任务执行的可靠性，可以借助消息队列的持久化与重试机制。阿里云上的消息队列服务提供了几种类型的消息支持，如顺序消息、定时/延时消息、事务消息等（详情可参考：<a href="https://help.aliyun.com/document_detail/29532.html?spm=5176.234368.1278132.btn4.6f43db25Rn8oey" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/29532.html?spm=5176.234368.1278132.btn4.6f43db25Rn8oey</a> ），如果项目是基于阿里云部署的，可以考虑使用其中一类消息服务来实现业务需求。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>本文对spring boot下异步处理的几种方法进行了介绍，如果对任务执行的可靠性要求不高，则推荐使用第一种方式，如果可靠性要求较高，则推荐使用自建消息队列或云消息队列服务的方式。<br>本文demo源码地址：<a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-async/src/main/java/cn/jboost/async" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-async/src/main/java/cn/jboost/async</a><br></br><br>我的个人博客地址：<a href="http://blog.jboost.cn">http://blog.jboost.cn</a><br>我的微信公众号：jboost-ksxy （一个不只有技术干货的公众号，欢迎关注，及时获取更新内容）<br>———————————————————————————————————————————————————————————————<br><img src="/assets/qrcode-05.jpg" alt="微信公众号"> </p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker笔记（六）：容器管理</title>
      <link href="/docker-6.html"/>
      <url>/docker-6.html</url>
      
        <content type="html"><![CDATA[<p>容器是Docker中的另一核心概念，在Docker中，应用的运行都是在容器内进行的，容器则基于镜像创建。前面已对Docker镜像做了基本介绍，本文对Docker容器管理的相关内容做一个梳理。</p><a id="more"></a><h2 id="1-启动容器"><a href="#1-启动容器" class="headerlink" title="1. 启动容器"></a>1. 启动容器</h2><p>启动容器的命令格式如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE-NAME [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><p>其中OPTIONS部分可指定容器运行的一些可选项，常用选项包括：</p><ul><li>-d 将容器以后台进程（daemon）的形式运行</li><li>-p 指定容器内应用暴露端口与主机端口的映射，如 -p 8080:80 表示将容器内80端口映射到主机的8080端口（主机端口在前，容器端口在后）</li><li>-v 指定容器与主机的挂载目录映射，如 -v /var/log:/log 表示将容器的/log目录挂载到主机的/var/log目录（同样主机目录在前，容器目录在后），后续对容器的/log写操作实际作用于主机的/var/log目录</li><li>-e 为容器设置环境变量</li><li>-t 为容器启动一个伪终端（pseudo-tty）</li><li>-i 让容器的标准输入保持打开，一般与 -t 配合使用，让容器启动后就打开一个可交互的命令行界面</li><li>-w 指定容器的工作目录</li></ul><p>COMMAND [ARG..] 部分就是容器需要运行的应用进程启动命令与参数，如果镜像中有通过 CMD， 或 ENTRYPOINT 指定了容器启动程序，则可省略。另外可通过 –name 指定容器的名称，以及 –restart 来指定重启策略，–restart有三种取值，代表容器支持的三种不同的重启策略</p><table><thead><tr><th align="center">取值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">always</td><td align="left">除非被<code>docker stop</code>命令明确停止，否则一直尝试重启处于停止态的容器；如果Docker重启，也会自动启动容器</td></tr><tr><td align="center">unless-stopped</td><td align="left">与always的区别是，停止态的容器不在Docker重启的时候被重启</td></tr><tr><td align="center">on-failed</td><td align="left">在容器退出时返回值不为0的时候，重启容器；如果Docker重启，容器也会被启动，不管之前是否处于停止状态</td></tr></tbody></table><p>以启动一个mysql数据库服务为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --name mysql \</span><br><span class="line"> -v /home/devuser/apps/mysql/conf/my.cnf:/etc/mysql/conf.d/my.cnf \</span><br><span class="line"> -v /home/devuser/apps/mysql/logs:/var/log/mysql \</span><br><span class="line"> -v /home/devuser/apps/mysql/data:/var/lib/mysql \</span><br><span class="line"> -e MYSQL_ROOT_PASSWORD=Passw0rd --restart=always mysql:5.7</span><br></pre></td></tr></table></figure><p>上述命令启动了一个mysql容器服务，-d 表示以后台进程运行，执行命令后只返回一个容器ID，不会输出任何其它信息；-p 将容器暴露的端口3306映射到宿主机的3306端口，外部主机就可以通过宿主机IP与3306端口来访问mysql服务； –name 指定了容器名称为mysql； -v 将mysql的配置文件路径、日志路径、数据存储路径映射到了宿主机对应的路径目录；-e 设置了一个环节变量指定mysql root账号的密码；–restart 指定容器在异常退出时，包括Docker重启时，自动启动容器。</p><p>我们前面有提过，当我们执行CLI命令时，实际上是客户端（Docker Client）通过发送请求到Docker后台进程（Docker Daemon），由Docker后台进程来执行的，那么当我们执行上述<code>docker run</code>命令的时候，Docker后台进程具体都干了些啥呢？一般来说，包括如下几个操作步骤</p><ol><li>检测本地是否存在指定的镜像，如果不存在，就从公共仓库下载</li><li>利用镜像创建一个容器，并启动它</li><li>分配一个文件系统，并在只读的镜像层上面挂载一层可读写层（容器存储层）</li><li>从宿主机配置的网桥接口中桥接一个虚拟接口到容器中去</li><li>从地址池配置一个 ip 地址给容器</li><li>执行用户指定的应用程序</li><li>执行应用程序完毕后容器被终止 </li></ol><h2 id="2-管理已有容器"><a href="#2-管理已有容器" class="headerlink" title="2. 管理已有容器"></a>2. 管理已有容器</h2><p>一般对已有容器的管理包括如下几个操作：</p><ol><li>查看运行中的容器 <code>docker ps</code> 或 <code>docker container ls</code></li><li>查看所有容器 <code>docker ps -a</code> 或 <code>docker container ls -a</code></li><li>停止运行 <code>docker stop xxx</code></li><li>开始停止状态的容器 <code>docker start xxx</code></li><li>重启运行状态的容器 <code>docker restart xxx</code></li><li>删除停止状态的容器 <code>docker rm xxx</code></li><li>强制删除容器（包括运行状态中） <code>docker rm -f xxx</code></li><li>删除所有停止状态的容器 <code>docker container prune</code></li></ol><p>其中xxx既可以是容器ID（短ID即可，只要与其它区分开来），也可以是容器名称。<br><code>docker rm</code>之前必须要先<code>docker stop</code>将容器置为停止状态，而<code>docker rm -f</code>可以强制删除运行状态的容器，其背后是通过Linux/POSIX信号来实现的，<code>docker rm -f</code>命令直接发出<code>SIGKILL</code>信号，不会给容器内运行进程任何缓冲的时间，立即终止，而<code>docker stop</code>命令却是先发送<code>SIGTERM</code>信号，通知容器进程结束，会为进程预留一个清理并优雅停止的机会，如果一段时间后进程还没有终止，那么就会发送<code>SIGKILL</code>信号，来终止进程的运行。</p><p>我们也可以像镜像操作中一样，组合使用命令来更方便地操作，如强制删除所有容器（慎用）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f $(docker ps -aq)</span><br></pre></td></tr></table></figure><h2 id="3-进入容器"><a href="#3-进入容器" class="headerlink" title="3. 进入容器"></a>3. 进入容器</h2><p>容器在运行时指定 -d 选项时， 是以后台进程的形式运行的，如果我们需要进入容器查看或操作，可以通过<code>docker exec</code>命令，<code>docker exec</code>命令的格式如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec [OPTIONS] container-id COMMAND</span><br></pre></td></tr></table></figure><p>OPTIONS常用的一般是 -t， -i，意义跟在<code>docker run</code>选项中一样 —— 为容器启动一个伪终端（pseudo-tty），并保持标准输入打开，从而可以像Linux命令行一样进行交互， COMMAND一般为 <code>bash</code>。</p><p>另外还有一个命令是<code>docker attach xxx</code>，其中xxx是容器ID，但推荐使用<code>docker exec</code>，因为<code>docker attach</code>中当执行<code>exit</code>退出容器时，容器也会随之终止，但<code>docker exec</code>则不会。</p><p>如果不进入容器，也可以通过<code>docker logs xxx</code>，xxx是容器ID，来查看容器的输出信息。</p><h2 id="4-导入导出容器"><a href="#4-导入导出容器" class="headerlink" title="4. 导入导出容器"></a>4. 导入导出容器</h2><p>可以使用<code>docker export</code>命令将一个容器的快照进行导出，如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export xxx &gt; mycontainer.tar</span><br></pre></td></tr></table></figure><p>其中xxx是容器ID，可以通过<code>docker ps -a</code>查看，上述命令将容器的当前快照导出到了本地文件。</p><p><code>docker import</code>命令则可以将一个容器快照文件导入为镜像，如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat mycontainer.tar | docker import - test/myimage:v1.0</span><br></pre></td></tr></table></figure><p>可以通过URL来导入，如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker import http://test.com/testimage.tgz test/myimage2:v1.0</span><br></pre></td></tr></table></figure><p>由此可见，我们获取镜像又多了一个来源——从已有容器快照文件导入。 </p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>本文对容器的一些基本操作进行了介绍，需要注意的是如之前所说，容器应以无状态的形式运行，所有产生的数据应该通过挂载数据卷的方式写入宿主机文件目录，避免容器销毁时造成数据丢失；尽量使用<code>docker stop</code> + <code>docker rm</code>的方式来替代<code>docker rm -f</code>，使容器内运行程序“优雅”地退出。有时候可能遇到这样的场景，容器创建运行后，我们需要对运行的一些参数进行更新或添加，这时候该怎么操作。后文会对该场景进行介绍，欢迎关注。</p></br>我的个人博客地址：http://blog.jboost.cn         我的微信公众号：jboost-ksxy （一个不只有技术干货的公众号，欢迎关注，及时获取更新内容）———————————————————————————————————————————————————————————————![微信公众号](/assets/qrcode-05.jpg) ]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker笔记（五）：整一个自己的镜像</title>
      <link href="/docker-5.html"/>
      <url>/docker-5.html</url>
      
        <content type="html"><![CDATA[<p>获取镜像的途径有两个，一是从镜像仓库获取，如官方的Docker Hub，二是自定义。上文已经介绍如何从镜像仓库获取镜像，本文基于一个Springboot项目，来介绍自定义一个镜像的基本流程。</p><a id="more"></a><h2 id="1-定制镜像的本质"><a href="#1-定制镜像的本质" class="headerlink" title="1. 定制镜像的本质"></a>1. 定制镜像的本质</h2><p>我们知道镜像是分层存储的，镜像的构建也是一层一层进行的，一层构建完后，就变为只读，在其上再构建下一层。因此定制镜像，实际上就是定义每一层要干的事，比如执行某个命令，设置一个环境变量，声明一个暴露端口等等。然后在构建时，按照各层的定义，一层一层地完成构建，最终形成一个包含这些层的镜像。</p><h2 id="2-Dockerfile文件"><a href="#2-Dockerfile文件" class="headerlink" title="2. Dockerfile文件"></a>2. Dockerfile文件</h2><p>Docker中定义各层要干的事的文件叫Dockerfile，它是一个文本文件，包含了一条条的指令，每一条指令对应一层镜像，指令的内容就描述了这一层该如何构建。如下示例了一个非常简单的Dockerfile，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN echo &#39;&lt;h1&gt;Hello jboost!&lt;&#x2F;h1&gt;&#39; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br></pre></td></tr></table></figure><p>我们定制镜像，必须要以某一个镜像为基础，在其上构建自己需要的层，如上示例中，我们是以nginx镜像为基础，然后在第二层定制了我们自己的内容——修改index.html的内容为<code>&lt;h1&gt;Hello jboost!&lt;/h1&gt;</code>，这样运行容器打开nginx主页时就不会显示默认的页面内容了。</p><p>上面示例中接触了Dockerfile的两个指令</p><ul><li>FROM：FROM指令指定基础镜像，每一个定制镜像必须要有一个基础镜像，所以必须要有一条FROM指令，并且是Dockerfile的第一条指令</li><li>RUN：RUN指令指定需要执行的命令，后面接的命令就像是shell脚本一样可执行</li></ul><p>Dockerfile还提供了许多其它指令，后续我们再集中介绍，本文只对接触到的指令做简单说明。</p><h2 id="3-自定义一个镜像"><a href="#3-自定义一个镜像" class="headerlink" title="3. 自定义一个镜像"></a>3. 自定义一个镜像</h2><p>这部分以一个Springboot项目为基础，介绍自定义一个镜像涉及的基本环节。项目地址为：<a href="https://github.com/ronwxy/swagger-register" target="_blank" rel="noopener">https://github.com/ronwxy/swagger-register</a> ，该项目是一个Swagger API文档注册服务，其它项目可将Swagger API信息注册到该服务，进行统一查看与管理。</p><h3 id="3-1-定义Dockerfile文件"><a href="#3-1-定义Dockerfile文件" class="headerlink" title="3.1 定义Dockerfile文件"></a>3.1 定义Dockerfile文件</h3><p>首先，我们在项目的根目录下创建一个Dockerfile文件（文件名就叫Dockerfile），其内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:8-jdk-alpine</span><br><span class="line">ENV PROFILE&#x3D;dev</span><br><span class="line">RUN mkdir &#x2F;app &#x2F;logs</span><br><span class="line">COPY .&#x2F;target&#x2F;swagger-register-1.0.0-SNAPSHOT.jar &#x2F;app&#x2F;app.jar</span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line">VOLUME &#x2F;register-data</span><br><span class="line">EXPOSE 11090</span><br><span class="line">CMD [&quot;java&quot;, &quot;-Dspring.profiles.active&#x3D;$&#123;PROFILE&#125;&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]</span><br></pre></td></tr></table></figure><p>从上往下依次介绍如下</p><ul><li>第一行：FORM openjdk:8-jdk-alpine， 表示以<code>openjdk:8-jdk-alpine</code>这个镜像为基础镜像，因为这是一个Springboot项目所以必须要有jdk支持，我们在定制镜像时，可以找一个最适合的镜像作为基础镜像。</li><li>第二行：ENV PROFILE=dev， 定义了一个环境变量，这个环境变量可以在后面被引用</li><li>第三行：RUN mkdir /app /logs，通过mkdir命令创建了两个目录，用来保存jar执行文件及日志</li><li>第四行：COPY ./target/swagger-register-1.0.0-SNAPSHOT.jar /app/app.jar 将target目录下的jar包复制到/app目录下，并且进行重命名</li><li>第五行：WORKDIR /app， 指定工作目录为/app，后面各层的当前目录就是指定的工作目录</li><li>第六行：VOLUME /register-data， 定义一个匿名数据卷，前面说过写操作不要直接在容器内进行，而要改为写挂载的数据卷目录，这个定义可在运行容器时通过 -v 来覆盖。</li><li>第七行：EXPOSE 11090， 声明了运行容器时提供的服务端口，也仅仅是个声明而已，只是告诉使用的人要映射这个端口，通过 -p 可映射端口。</li><li>第八行：CMD [“java”, “-Dspring.profiles.active=${PROFILE}”, “-jar”, “app.jar”]， 指定了容器启动命令，因为是一个Springboot项目，所以就是一个java -jar的执行命令，容器启动的时候就会执行该命令来运行Springboot服务，这里引用了第二行定义的环境变量PROFILE</li></ul><h3 id="3-2-配置maven插件"><a href="#3-2-配置maven插件" class="headerlink" title="3.2 配置maven插件"></a>3.2 配置maven插件</h3><p>定义好Dockerfile后，为了方便构建镜像，我们可以借助maven的dockerfile插件<code>dockerfile-maven-plugin</code>，在pom.xml的build部分加入配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Docker maven plugin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dockerfile-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">buildArgs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">JAR_FILE</span>&gt;</span>target/$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">JAR_FILE</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">buildArgs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Docker maven plugin --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>repository指定了镜像的名称，<code>docker.image.prefix</code>需要properties部分进行定义，我这里是<code>springboot</code>。</p><h3 id="3-3-构建镜像"><a href="#3-3-构建镜像" class="headerlink" title="3.3 构建镜像"></a>3.3 构建镜像</h3><p>下载源码：<a href="https://github.com/ronwxy/swagger-register.git" target="_blank" rel="noopener">https://github.com/ronwxy/swagger-register.git</a> ，然后在项目的根目录下执行如下命令(前提是本地已经装好了docker与maven及jdk)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=true dockerfile:build</span><br></pre></td></tr></table></figure><p>该命令首先会执行<code>mvn clean package -Dmaven.test.skip=true</code>对项目进行打包，生成./target/swagger-register-1.0.0-SNAPSHOT.jar文件，然后基于当前目录下的Dockerfile文件进行构建，如下图所示<br><img src="/assets/docker-build.png" alt="docker-build"></p><p>由上图可看出，该镜像构建分八步(对应Dockerfile的八行指令)，每一步生成一个镜像层，每一层都有唯一的ID。由图中也可以看出，除了COPY之类的命令外，每一层的构建实际上是先基于上一层启动一个容器，然后执行该层定义的操作，再移除这个容器来实现的，如第八步中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Step 8/8 : CMD ["java", "-Dspring.profiles.active=$&#123;PROFILE&#125;", "-jar", "app.jar"]</span><br><span class="line">[INFO] </span><br><span class="line">[INFO]  ---&gt; Running in f4acd0b53bca</span><br><span class="line">[INFO] Removing intermediate container f4acd0b53bca</span><br><span class="line">[INFO]  ---&gt; a9ee579f2d62</span><br></pre></td></tr></table></figure><p>先启动一个ID为f4acd0b53bca的容器，在其中执行CMD所定义的命令，然后再移除容器f4acd0b53bca，最后生成ID为a9ee579f2d62的镜像。</p><p>构建完后，我们就可以在本地镜像中通过<code>docker iamges</code>看到我们定制的镜像了，如图<br><img src="/assets/docker-image.png" alt="docker-image"></p><p>图中springboot/swagger-register镜像即为我们刚刚构建好的定制镜像。</p><h3 id="3-4-启动容器"><a href="#3-4-启动容器" class="headerlink" title="3.4 启动容器"></a>3.4 启动容器</h3><p>我们可以通过以下命令来启动一个刚才定制镜像的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name swagger-register -p 11090:11090 -v /home/jenkins/swagger-register/register-data:/register-data -v /home/jenkins/swagger-register/logs:/logs --restart=always springboot/swagger-register:latest</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>-d 表示以后台进程方式运行</li><li>–name 指定容器名称</li><li>-p 指定端口映射，左边为宿主机端口，右边为容器服务端口</li><li>-v 指定数据卷挂载，左边为宿主机目录，右边为容器目录</li><li>–restart=always 表示在docker启动时自动启动该容器</li></ul><p>关于容器相关的内容后面详细介绍，这里不展开说明了。启动容器后， 我们就可以浏览器打开地址 http://宿主机ip:11090/doc.html 来访问服务了（打开页面后内容是空的，因为没有任何服务注册Swagger API， 相关内容可参考 <a href="/swagger-register.html">swagger api文档集中化注册管理</a>）</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>本文介绍了一个基于Springboot项目的Docker镜像定制及使用过程，对镜像的构建过程，及Dockerfile的基本指令以及容器的运行做了基本介绍。后续会对Dockerfile的其它指令及Dockerfile的一些最佳实践进行更为详细的介绍，欢迎关注。<br></br><br>我的个人博客地址：<a href="http://blog.jboost.cn">http://blog.jboost.cn</a><br>我的微信公众号：jboost-ksxy （一个不只有技术干货的公众号，欢迎关注，及时获取更新内容）<br>———————————————————————————————————————————————————————————————<br><img src="/assets/qrcode-05.jpg" alt="微信公众号">  </p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker笔记（四）：Docker镜像管理</title>
      <link href="/docker-4.html"/>
      <url>/docker-4.html</url>
      
        <content type="html"><![CDATA[<p>在Docker中，应用是通过容器来运行的，而容器的运行是基于镜像的，类似面向对象设计中类与对象的关系——没有类的定义就谈不上实例的创建与使用，没有镜像的定义就谈不上容器的创建与运行。</p><a id="more"></a><h2 id="1-获取镜像"><a href="#1-获取镜像" class="headerlink" title="1. 获取镜像"></a>1. 获取镜像</h2><p>镜像从哪里来，一般两个途径，一是公共镜像库，如官方镜像库Docker Hub，上面有大量的高质量的镜像直接可拿来用；二是自定义，我们可基于一个已有镜像，在其基础上增加一些层（还记得镜像的分层存储特性吧），然后构建形成自己的镜像。</p><p>如果我们知道某个镜像的名称，则可直接通过<code>docker pull</code>来下载镜像到本地，如ubuntu、redis、nginx等，<code>docker pull</code>命令的格式如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull [选项] [Docker Registry的地址[:端口号]/]仓库名[:标签]</span><br></pre></td></tr></table></figure><p>其中选项可设置：</p><ul><li>-a, –all-tags：下载仓库中所有标签（一般指版本）的镜像</li><li>–disable-content-trust：跳过镜像验证，默认为true</li></ul><p>Docker Registry的地址即镜像仓库地址，一般为域名或IP加端口号，如果不指定则默认为Docker Hub；仓库名包含两部分，&lt;用户名&gt;/&lt;软件名&gt;，对于Docker Hub，如果不给出用户名，则默认为library，表示官方提供；标签一般是对应软件的版本号，如果不指定则默认为latest。</p><p>比如我们要下一个nginx镜像，则可执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">fc7181108d40: Already exists </span><br><span class="line">d2e987ca2267: Pull complete </span><br><span class="line">0b760b431b11: Pull complete </span><br><span class="line">Digest: sha256:48cbeee0cb0a3b5e885e36222f969e0a2f41819a68e07aeb6631ca7cb356fed1</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br></pre></td></tr></table></figure><p>这里我们没有指定选项，也没有指定镜像仓库地址，那么默认会从Docker Hub获取镜像（但Docker Hub由于在国外，速度比较慢，所以一般要设置国内加速器，参考<a href="/docker-3.html">Docker笔记（三）：Docker安装与配置</a>第二部分：配置国内镜像)，也没有给出用户名，所以默认是library（第三行），没有指定标签，所以默认是latest（第二行），由第四至第六行可见，这个镜像包含三个层，并且第一个层已经存在了（之前下载的镜像已经包含了这个层， 直接复用），镜像分层的概念及层的复用，应该已经理解了。</p><p>如果我们不知道镜像的完整名称怎么办，那就搜索一下，有两个途径，一是通过命令，假设我们记不起nginx全称了， 只记得<code>ngi</code>，则可通过如下命令搜索</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker search ngi</span><br><span class="line">NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">nginx                             Official build of Nginx.                        11693               [OK]                </span><br><span class="line">jwilder/nginx-proxy               Automated Nginx reverse proxy for docker con…   1628                                    [OK]</span><br><span class="line">richarvey/nginx-php-fpm           Container running Nginx + PHP-FPM capable of…   726                                     [OK]</span><br><span class="line">bitnami/nginx                     Bitnami nginx Docker Image                      69                                      [OK]</span><br><span class="line">linuxserver/nginx                 An Nginx container, brought to you by LinuxS…   69                                      </span><br><span class="line">tiangolo/nginx-rtmp               Docker image with Nginx using the nginx-rtmp…   48                                      [OK]</span><br><span class="line">nginx/nginx-ingress               NGINX Ingress Controller for Kubernetes         20                                      </span><br><span class="line">nginxdemos/hello                  NGINX webserver that serves a simple page co…   18                                      [OK]</span><br><span class="line">jlesage/nginx-proxy-manager       Docker container for Nginx Proxy Manager        17                                      [OK]</span><br><span class="line">schmunk42/nginx-redirect          A very simple container to redirect HTTP tra…   17                                      [OK]</span><br><span class="line">crunchgeek/nginx-pagespeed        Nginx with PageSpeed + GEO IP + VTS + more_s…   13                                      </span><br><span class="line">blacklabelops/nginx               Dockerized Nginx Reverse Proxy Server.          12                                      [OK]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>该命令会从Docker Hub搜索镜像名包含<code>ngi</code>的镜像，其中STARS表示收藏用户数，OFFICIAL为[OK]表示官方提供的镜像，AUTOMATED [OK]表示由自动构建生成，一般选择STARS最多，官方提供的镜像。<br>这种方式获取到的信息有限，比如具体包含哪些版本不知道。还有一个途径是直接在Docker Hub网站上搜索，打开 <a href="https://hub.docker.com" target="_blank" rel="noopener">https://hub.docker.com</a> ， 在搜索框输入<code>ngi</code>，如下图<br><img src="/assets/docker-hub.png" alt="docker-hub"></p><p>则会列出所有满足条件的镜像，点开<code>nginx</code>结果链接，可以看到提供的版本（通过版本链接可以查看定义对应镜像的Dockerfile），及相应的文档说明。这种方式获取的信息更加全面，所以推荐这种方式！</p><p>另外，当我们没有执行<code>docker pull</code>，直接通过<code>docker run xx</code>来运行一个容器时，如果没有对应的镜像，则会先自动下载镜像，再基于镜像启动一个容器，比如我们在<a href="/docker-3.html">Docker笔记（三）：Docker安装与配置</a>中检验docker是否安装成功时运行的<code>hello-world</code><br><img src="/assets/hello-docker.png" alt="hello-docker"></p><h2 id="2-管理本地镜像"><a href="#2-管理本地镜像" class="headerlink" title="2. 管理本地镜像"></a>2. 管理本地镜像</h2><p>将镜像下载到本地后，我们可以基于镜像来创建、运行容器，及对镜像进行管理。</p><p><strong>查看本地镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker image ls</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               latest              f68d6e55e065        2 weeks ago         109MB</span><br><span class="line">mysql               latest              c7109f74d339        5 weeks ago         443MB</span><br><span class="line">hello-world         latest              fce289e99eb9        6 months ago        1.84kB</span><br></pre></td></tr></table></figure><p>上面各列依次列出了镜像名称、标签（版本）、镜像ID、创建时间、镜像大小。镜像可以拥有多个标签（版本）。镜像的大小总和一般要大于实际的磁盘占有量，为什么？回忆一下镜像的分层存储概念，层是可以复用的，某个层其中一个镜像有了，另一个镜像就不会再下载了。口说无凭，我们来验证下，<code>docker system df</code>可列出镜像、容器、数据卷所占用的空间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker system df</span><br><span class="line">TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE</span><br><span class="line">Images              3                   1                   497.1MB             497.1MB (99%)</span><br><span class="line">Containers          1                   0                   0B                  0B</span><br><span class="line">Local Volumes       0                   0                   0B                  0B</span><br><span class="line">Build Cache         0                   0                   0B                  0B</span><br></pre></td></tr></table></figure><p>通过<code>docker image ls</code>列出的各镜像大小总共约552MB，但这里列出的镜像大小只有约497MB，这下有凭有据了吧。</p><p><strong>根据条件列出镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker image ls nginx # 根据名称列出镜像</span><br><span class="line">docker image ls nginx:latest # 根据名称与标签列出镜像</span><br><span class="line">docker image ls -f since=hello-world:latest # -f 是--filter的缩写，过滤器参数，列出在hello-world:latest之后建立的镜像，before=hello-world:latest则查看之前建立的镜像</span><br></pre></td></tr></table></figure><p><strong>指定显示格式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker image ls -q # 只显示镜像ID</span><br><span class="line">docker image ls --digests # 列出镜像摘要</span><br><span class="line"></span><br><span class="line">docker image ls --format "&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;"  # 使用Go的模板语法格式化显示，这里显示格式为 镜像ID：镜像名称</span><br><span class="line">docker image ls --format "table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Repository&#125;&#125;\t&#123;&#123;.Tag&#125;&#125;" # 自己定义表格格式</span><br></pre></td></tr></table></figure><p><strong>虚悬镜像</strong><br>有时候会看到某些镜像既没有仓库名，也没有标签，均为 <code>&lt;none&gt;</code>。这些镜像原本是有镜像名和标签的，随着官方镜像维护，发布了新版本后(新版本会复用之前的镜像名称与标签，一般是bug修复版)，重新<code>docker pull xx</code> 时， 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了<code>&lt;none&gt;</code> 。除了<code>docker pull</code>可能导致这种情况， <code>docker build</code>也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 <code>&lt;none&gt;</code> 的镜像。这类无标签镜像被称为虚悬镜像(dangling image) ，可以用下面的命令专门显示这类镜像： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls -f dangling=true</span><br></pre></td></tr></table></figure><p>一般虚悬镜像没什么意义了，可以通过如下命令删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image prune</span><br></pre></td></tr></table></figure><p><strong>中间层镜像</strong><br>为了加速镜像构建、重复利用资源，Docker会利用中间层镜像。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的<code>docker image ls</code>列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，可以加 -a</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker image ls -a</span></span><br></pre></td></tr></table></figure><p>这样会看到很多无标签的镜像，与虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错。实际上，这些镜像也没必要删除，因为相同的层只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了一份，无论如何你也会需要它们。只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除。</p><p><strong>删除镜像</strong><br>删除镜像命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br></pre></td></tr></table></figure><p>选项可以设置：</p><ul><li>-f, –force  强制删除镜像</li><li>–no-prune   不删除没有标签的父镜像</li></ul><p>&lt;镜像1&gt;、&lt;镜像2&gt; 等可以是镜像的名称，镜像的全ID，也可以是镜像ID的前面几个数字（只要与其它镜像区分开来就行），或者是镜像摘要。 如删除镜像名称为mysql的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# docker image rm mysql</span><br><span class="line">Untagged: mysql:latest</span><br><span class="line">Untagged: mysql@sha256:415ac63da0ae6725d5aefc9669a1c02f39a00c574fdbc478dfd08db1e97c8f1b</span><br><span class="line">Deleted: sha256:c7109f74d339896c8e1a7526224f10a3197e7baf674ff03acbab387aa027882a</span><br><span class="line">Deleted: sha256:35d60530f024aa75c91a123a69099f7f6eaf5ad7001bb983f427f674980d8482</span><br><span class="line">Deleted: sha256:49d8bb533eee600076e3a513a203ee24044673fcef0c1b79e088b2ba43db2c17</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>由上面命令的执行结果可见，删除镜像包括另个行为：Untagged、Deleted。</p><p>当我们使用上面命令来删除镜像的时候，实际上是在要求删除某个/某些标签的镜像。所以首先需要做的是将满足要求的所有镜像标签都取消，这就是Untagged的行为。一个镜像可以对应多个标签，因此当我们删除了所指定的标签后，可能还有别的标签指向了这个镜像，如果是这种情况，那么Delete行为就不会发生，仅仅是取消了这个镜像的符合要求的所有标签。所以并非所有的<code>docker image rm</code>都会产生删除镜像的行为，有可能仅仅是取消了某个标签而已。</p><p>当该镜像所有的标签都被取消了，该镜像很可能就失去了存在的意义，因此会触发删除行为。镜像是多层存储结构，因此在删除的时候也是从上层向基础层方向依次进行判断删除。如果某个其它镜像正依赖于当前镜像的某一层，这种情况，依旧不会触发删除该层的行为。直到没有任何镜像依赖当前层时，才会真实的删除当前层。</p><p>另外还需要注意是容器对镜像的依赖。如果基于镜像启动的容器存在（即使容器没有运行处于停止状态） ，同样不可以删除这个镜像。我们之前说了容器是以镜像为基础，再加一层容器存储层组成的多层存储结构去运行的。所以如果这些容器是不需要的，应该先将它们删除，然后再来删除镜像。 </p><p><strong>通过组合命令来删除</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker image rm $(docker image ls -q nginx) # 删除镜像名称为nginx的所有镜像</span><br><span class="line">docker image rm $(docker image ls -q -f since=hello-world:latest) # 删除所有在hello-world:latest之后建立的镜像</span><br></pre></td></tr></table></figure><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>本文对镜像的获取及本地镜像的基本管理做了介绍，本文镜像的获取途径都是从镜像仓库直接获取，镜像的另一个获取途径便是自定义，接下来会通过实例来进行介绍，欢迎关注。<br></br><br>我的个人博客地址：<a href="http://blog.jboost.cn">http://blog.jboost.cn</a><br>我的微信公众号：jboost-ksxy （一个不只有技术干货的公众号，欢迎关注，及时获取更新内容）<br>———————————————————————————————————————————————————————————————<br><img src="/assets/qrcode-05.jpg" alt="微信公众号">  </p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker笔记（三）：Docker安装与配置</title>
      <link href="/docker-3.html"/>
      <url>/docker-3.html</url>
      
        <content type="html"><![CDATA[<p>Docker分为Docker CE社区免费版与Docker EE企业收费版。Docker EE主要是在安全性及镜像、容器高级管理方面提供了一些额外的支持。对于中小型企业、团队或个人来说，用Docker CE即可。</p><a id="more"></a><h2 id="1-安装Docker-CE"><a href="#1-安装Docker-CE" class="headerlink" title="1. 安装Docker CE"></a>1. 安装Docker CE</h2><p>Docker CE有三个更新渠道：</p><ul><li>Stable：提供最新的GA（General Availability）稳定版，每六个月一版，如 18.09 表示18年9月版，下一版就是19.03——19年3月版</li><li>Test：提供GA之前的Pre-release版</li><li>Nightly：提供最新的build版本，每天一版</li></ul><p>我们一般使用stable版。Docker CE支持在多种操作系统下安装，本文只介绍比较常见的Ubuntu 18.04 LTS、CentOS7、及Windows 10上的安装与配置。</p><h3 id="1-1-Ubuntu-18-04-LTS-上安装"><a href="#1-1-Ubuntu-18-04-LTS-上安装" class="headerlink" title="1.1 Ubuntu 18.04 LTS 上安装"></a>1.1 Ubuntu 18.04 LTS 上安装</h3><p>Docker CE支持的64位Ubuntu系统版本为</p><ul><li>Cosmic 18.10</li><li>Bionic 18.04 (LTS)</li><li>Xenial 16.04 (LTS)</li></ul><p>Docker CE在Ubuntu上支持 overlay2， aufs， 以及 btrfs 几种存储驱动程序，对于Linux内核版本为4或以上系统的安装，Docker CE默认使用 overlay2，如果需要使用 aufs，则需要手动配置（参考： <a href="https://docs.docker.com/storage/storagedriver/aufs-driver/" target="_blank" rel="noopener">Use the AUFS storage driver</a>）</p><ol><li>卸载旧版本</li></ol><p>如果系统安装有旧版本，旧版本命名为 docker， docker.io，或docker.engine，可使用如下命令进行卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get remove docker docker-engine docker.io containerd runc</span></span><br></pre></td></tr></table></figure><p>目录/var/lib/docker下的内容，包括镜像、容器、数据卷、网络等，会被保留。</p><ol start="2"><li>使用APT安装</li></ol><p>apt源使用HTTPS来确保软件下载过程中不被篡改，所以首先添加使用HTTPS传输需要的软件包以及CA证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install \</span></span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure><p>为了确认下载软件包的合法性，添加Docker官方的GPG key：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/</span></span><br><span class="line">gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>由于国内网络原因，我们一般要使用国内源，否则安装将会灰常灰常慢。向source.list中添加Docker软件源（以下命令添加的是stable版本的APT镜像源，如果需要test或nightly版，将stable改为对应test或nightly即可）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo add-apt-repository \</span></span><br><span class="line">"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \</span><br><span class="line"><span class="meta">$</span><span class="bash">(lsb_release -cs) \</span></span><br><span class="line">stable"</span><br></pre></td></tr></table></figure><p>然后，便可更新apt软件包缓存，开始安装了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install docker-ce</span></span><br></pre></td></tr></table></figure><p>以上命令默认会安装软件源里的最新版本，如果需要安装指定版本，则可通过查看可用版本，然后指定版本安装，查看版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt-cache madison docker-ce</span></span><br></pre></td></tr></table></figure><p>安装指定版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install docker-ce=&lt;VERSION_STRING&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用脚本自动安装</li></ol><p>Docker提供了一个方便的安装脚本来在开发测试环境安装Docker CE的edge或测试版，Ubuntu上可使用这套脚本来安装Docker CE的edge版</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -fsSL https://get.docker.com -o get-docker.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo sh get-docker.sh --mirror Aliyun</span></span><br></pre></td></tr></table></figure><ol start="4"><li>启动Docker CE</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> docker <span class="comment">#开启开机自动启动</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker  <span class="comment">#启动docker</span></span></span><br></pre></td></tr></table></figure><ol start="5"><li>用户组配置</li></ol><p>docker命令默认是使用Unix socket与Docker引擎进行通信（回顾下除了Unix socket还有REST API及网络端口），只有root用户或docker用户组里的用户才有权限访问Docker引擎的Unix socket，因此，需要将使用docker的用户加入docker用户组（处于安全考虑，一般尽量不要直接使用root用户来操作）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo groupadd docker <span class="comment">#添加docker用户组</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo usermod -aG docker <span class="variable">$USER</span> <span class="comment">#将当前用户加到docker用户组</span></span></span><br></pre></td></tr></table></figure><p>退出账号重新登录即可。</p><ol start="6"><li>测试安装是否成功</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run hello-world</span></span><br></pre></td></tr></table></figure><p>如果显示如下图，则说明安装已成功<br><img src="/assets/hello-docker.png" alt="hello-docker"></p><ol start="7"><li>卸载</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get purge docker-ce</span><br></pre></td></tr></table></figure><p>以上命令可以卸载docker-ce，但是之前的镜像、容器、数据卷等不会自动删除，可通过如下命令彻底删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo rm -rf /var/lib/docker</span></span><br></pre></td></tr></table></figure><h3 id="1-2-CentOS-7-上安装"><a href="#1-2-CentOS-7-上安装" class="headerlink" title="1.2 CentOS 7 上安装"></a>1.2 CentOS 7 上安装</h3><p>Docker CE支持64位的CentOS7，并且要求内核版本不低于3.10。CentOS 7满足最低内核的要求，但由于版本较低，一些功能（如 overlay2 存储层驱动）无法使用，并且部分功能可能不太稳定。<br>可以通过<code>uname -r</code>命令来查看系统内核版本，如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9dbodbaqxj1gxhpnjxZ ~]# uname -r</span><br><span class="line">3.10.0-957.1.3.el7.x86_64</span><br></pre></td></tr></table></figure><ol><li>卸载旧版本</li></ol><p>如果安装了旧版本，需要先卸载。旧版本的Docker称为docker或者docker-engine，卸载命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum remove docker \</span></span><br><span class="line">    docker-client \</span><br><span class="line">    docker-client-latest \</span><br><span class="line">    docker-common \</span><br><span class="line">    docker-latest \</span><br><span class="line">    docker-latest-logrotate \</span><br><span class="line">    docker-logrotate \</span><br><span class="line">    docker-selinux \</span><br><span class="line">    docker-engine-selinux \</span><br><span class="line">    docker-engine</span><br></pre></td></tr></table></figure><ol start="2"><li>使用yum安装</li></ol><p>安装依赖包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y yum-utils \</span></span><br><span class="line">    device-mapper-persistent-data \</span><br><span class="line">    lvm2</span><br></pre></td></tr></table></figure><p>由于国内网络原因，我们一般要使用国内源，否则安装可能会灰常灰常慢。添加yum软件源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager \</span></span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce</span><br><span class="line">    .repo</span><br></pre></td></tr></table></figure><p>如果要安装nightly或test版，执行如下对应的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager --<span class="built_in">enable</span> docker-ce-nightly <span class="comment"># 启用nightly， 将--enbale改为disable又可以禁用</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager --<span class="built_in">enable</span> docker-ce-test <span class="comment"># 启用test</span></span></span><br></pre></td></tr></table></figure><p>安装最新版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum makecache fast <span class="comment"># 更新软件源缓存</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker-ce <span class="comment"># 安装最新版本</span></span></span><br></pre></td></tr></table></figure><p>安装指定版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum list docker-ce --showduplicates | sort -r <span class="comment"># 列出可用版本</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker-ce-&lt;VERSION_STRING&gt; <span class="comment"># 安装指定版本</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用脚本自动安装</li></ol><p>执行如下命令，则会自动安装Docker CE的edge版，注意只在开发或测试环境这么用（建议最好还是用stable版）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -fsSL get.docker.com -o get-docker.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo sh get-docker.sh --mirror Aliyun</span></span><br></pre></td></tr></table></figure><ol start="4"><li>启动Docker CE</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> docker <span class="comment">#开启开机自动启动</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker  <span class="comment">#启动docker</span></span></span><br></pre></td></tr></table></figure><ol start="5"><li>用户组配置</li></ol><p>docker命令默认是使用Unix socket与Docker引擎进行通信（回顾下除了Unix socket还有REST API及网络端口），只有root用户或docker用户组里的用户才有权限访问Docker引擎的Unix socket，因此，需要将使用docker的用户加入docker用户组（处于安全考虑，一般尽量不要直接使用root用户来操作）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo groupadd docker <span class="comment">#添加docker用户组</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo usermod -aG docker <span class="variable">$USER</span> <span class="comment">#将当前用户加到docker用户组</span></span></span><br></pre></td></tr></table></figure><p>退出账号重新登录即可。</p><ol start="6"><li>测试安装是否成功</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run hello-world</span></span><br></pre></td></tr></table></figure><p>如果显示如下图，则说明安装已成功<br><img src="/assets/hello-docker.png" alt="hello-docker"></p><p>如果在 CentOS 中使用 Docker CE 看到下面的这些警告信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARNING: bridge-nf-call-iptables is disabled</span><br><span class="line">WARNING: bridge-nf-call-ip6tables is disabled</span><br></pre></td></tr></table></figure><p>可以添加内核配置参数以启用这些功能。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo tee -a /etc/sysctl.conf &lt;&lt;-EOF</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>然后重新加载 sysctl.conf 即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo sysctl -p</span></span><br></pre></td></tr></table></figure><ol start="7"><li>卸载</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum remove docker-ce <span class="comment"># 卸载docker-ce</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo rm -rf /var/lib/docker <span class="comment"># 该目录下的镜像、容器、数据卷、网络等不会自动删除</span></span></span><br></pre></td></tr></table></figure><h3 id="1-3-Windows-10-上安装"><a href="#1-3-Windows-10-上安装" class="headerlink" title="1.3 Windows 10 上安装"></a>1.3 Windows 10 上安装</h3><p>windows 10上的安装非常简单，直接下载<a href="https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe" target="_blank" rel="noopener">stable版本</a>安装。<br>安装完后，在 Windows 搜索栏输入 Docker 点击 Docker for Windows 开始运行</p><h2 id="2-配置国内镜像"><a href="#2-配置国内镜像" class="headerlink" title="2. 配置国内镜像"></a>2. 配置国内镜像</h2><p>Docker默认是从Docker Hub（官方的镜像仓库）拉取镜像的，国内访问一般会比较慢，因此可以配置一些镜像加速器，很多云服务商提供了自己的加速器服务，如Azure中国，阿里云（需要登录获取），七牛云等。</p><p>Ubuntu、CentOS上，配置国内镜像只需要在/etc/docker/daemon.json中写入如下内容（如果文件不存在则创建一个）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">        <span class="string">"https://dockerhub.azk8s.cn"</span>,</span><br><span class="line">        <span class="string">"https://reg-mirror.qiniu.com"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重新启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl daemon-reload</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl restart docker</span></span><br></pre></td></tr></table></figure><p>对于Windows 10，在系统右下角托盘Docker图标上右键菜单选择<br>Settings ，打开配置窗口后在左侧导航菜单选择 Daemon 。在 Registry<br>mirrors 一栏中填写加速器地址 <a href="https://dockerhub.azk8s.cn" target="_blank" rel="noopener">https://dockerhub.azk8s.cn</a> ，之后点击<br>Apply 保存， Docker 就会自动重启并应用配置的镜像地址了。 </p><p>可以通过<code>docker info</code>命令来检查加速器是否生效，如果执行命令能看到类似如下信息，则说明加速器配置生效了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Registry Mirrors:</span><br><span class="line">    https:&#x2F;&#x2F;dockerhub.azk8s.cn&#x2F;</span><br></pre></td></tr></table></figure><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>Docker分Docker CE与Docker EE两个版本，对大多数人来说，一般使用Docker CE就行了。我们在安装Docker CE时，最好安装stable版，比较稳定可靠。同时，Linux安装时，记得配置Docker软件源，不然有可能太慢。安装完后，需要配置镜像加速器，加快镜像的下载速度。工具有了，接下来就是探索实践了，加油吧少年！<br></br><br>我的个人博客地址：<a href="http://blog.jboost.cn">http://blog.jboost.cn</a><br>我的微信公众号：jboost-ksxy （一个不只有技术干货的公众号，欢迎关注，及时获取更新内容）<br>———————————————————————————————————————————————————————————————<br><img src="/assets/qrcode-05.jpg" alt="微信公众号">  </p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker笔记（二）：Docker管理的对象</title>
      <link href="/docker-2.html"/>
      <url>/docker-2.html</url>
      
        <content type="html"><![CDATA[<p>在<a href="/docker-1.html">Docker笔记（一）：什么是Docker</a>中，我们提到了Docker管理的对象包含镜像、容器、网络、数据卷等，本文就来介绍下这些对象及用途。</p><a id="more"></a><h2 id="1-镜像"><a href="#1-镜像" class="headerlink" title="1. 镜像"></a>1. 镜像</h2><p>所谓镜像，是一个静态的概念。它对我们期望干的事情做了一些定义，比如要运行什么程序，需要哪些依赖，需要什么样的配置，需要开放哪个网络端口等等。<br>Docker的镜像是一个特殊的文件系统，提供了运行时需要的程序、库、资源、配置等文件，还包含一些为运行时准备的配置参数（如环境变量、匿名数据卷、用户等），镜像不包含任何动态数据，其内容在构建之后也不会被改变。<br>镜像的文件系统有一个分层存储的概念，采用的是Union FS技术，因此，镜像并不是简单地由一组文件组成，而是由多层文件系统叠加联合组成。如下图所示<br><img src="/assets/container-layers.jpg" alt="container-layers"></p><p>镜像构建时，会一层一层地构建，前一层是后一层的基础，每层构建完后就变成只读的，不会再发生改变。镜像分层存储的一大好处是复用，镜像的每一层可以在不同镜像间复用，这就好比我们开发项目时将一些公共功能封装成jar包，在各个项目可以直接依赖使用一样。关于镜像的更多内容，在后续使用时再详述。</p><h2 id="2-容器"><a href="#2-容器" class="headerlink" title="2. 容器"></a>2. 容器</h2><p>相对镜像，容器是一个动态的运行时的概念，它与镜像的关系类似于面向对象中类与实例的关系。容器可以被创建、启动、停止、删除等。容器运行实质上就是运行一个进程，但与那些直接在宿主机上运行的进程不同，容器运行在自己的独立的隔离的命名空间中——拥有自己的root文件系统、网络配置、进程空间，甚至自己的用户ID空间，因此虽然是以进程的形式运行，但好像是运行在一个独立的系统中一样，这样相比直接运行于宿主机的进程，容器的运行显得更为安全。<br>前面说到镜像的分层存储概念，对于容器来说，实际上也是以镜像作为基础层，在其上创建了一个当前容器的存储层，如下图<br><img src="/assets/sharing-layers.jpg" alt="sharing-layers.jpg"></p><p>以镜像ubuntu:15.04为基础层所创建的容器，都有一个自己的可读写的存储层（镜像的存储层是只读的）。容器存储层的生命周期与容器一样，容器销毁时，容器的存储层也会随之消亡，任何保存在容器存储层的数据也都会随容器的删除而丢失，因此一般我们要保持容器存储层的无状态化，所有文件的写操作，都应该使用数据卷或绑定宿主机目录。</p><h2 id="3-数据卷"><a href="#3-数据卷" class="headerlink" title="3. 数据卷"></a>3. 数据卷</h2><p>数据卷是一个独立于容器，可供一个或多个容器使用的特殊目录，它绕过了Union FS，不会随容器的销毁而消亡。这好比我们在阿里云上建虚机，再加载一个数据盘一样，一般产生的数据都要保存在数据盘，而不是虚机的系统盘。<br>数据卷具备如下特性：</p><ol><li>可以在容器之间共享和重用</li><li>对数据卷的修改会立马生效</li><li>数据卷的更新，不会影响到镜像</li><li>数据卷默认会一直存在，不会随容器的删除而消亡</li></ol><h2 id="4-网络"><a href="#4-网络" class="headerlink" title="4. 网络"></a>4. 网络</h2><p>Docker容器是如何与外部进行网络通信的？一般来说，我们在运行容器时，只需要指定容器服务端口与宿主机端口的映射，就可以通过宿主机IP与映射的端口访问容器服务了，因为Docker默认使用了Bridge的模式来实现容器与外部的通信。<br>Docker的网络子系统通过使用一些驱动程序，是可插拔式的，默认提供了如下几种驱动：</p><ol><li>bridge：默认的网络驱动。运行在容器中的应用程序一般是通过网桥与外部进行通信。</li><li>host：容器直接使用宿主机的网络通信。host只在基于Docker 17.06或以上版本的Swarm服务中可用</li><li>overlay：overlay可将多个Docker daemon进程连接起来使得Swarm服务之间能相互通信，也可以将overlay用于Swarm服务与容器之间，或运行在不同Docker daemon上的容器之间的通信，不需要操作系统层面的路由配置。</li><li>macvlan：macvlan允许你分配一个mac地址给容器，让它像一台物理设备一样加入你的网络中。Docker daemon通过mac地址将请求路由给容器，适用于那些希望直接连到物理网络的遗留应用。</li><li>none：禁用所有网络。一般与一个自定义的网络驱动一起使用。none不能用于Swarm服务。</li><li>其它第三方网络插件：可从Docker Hub或其它第三方供应商获取安装。</li></ol><p>总之，bridge适用于在同一台宿主机运行多个容器的场景；host适用于不应与宿主机进行网络隔离的场景；overlay适用于运行在不同宿主机上的容器间通信，或多个应用通过Swarm服务来共同协作的场景；macvlan适用于从虚拟机迁移配置或希望容器作为物理机一样使用网络的场景。</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>本文对Docker所管理的几个基本对象——镜像、容器、数据卷、网络做了简单介绍，这是认识或学习Docker的基础，在后续实践操作过程中，将会对各部分进行更详细的使用说明，欢迎持续关注。<br></br><br>我的个人博客地址：<a href="http://blog.jboost.cn">http://blog.jboost.cn</a><br>我的微信公众号：jboost-ksxy （一个不只有技术干货的公众号，欢迎关注，及时获取更新内容）<br>———————————————————————————————————————————————————————————————<br><img src="/assets/qrcode-05.jpg" alt="微信公众号">  </p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker笔记（一）：什么是Docker</title>
      <link href="/docker-1.html"/>
      <url>/docker-1.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>接触Docker也有两年多了，断断续续玩过一些应用场景，如安装一些常用工具服务，部署业务项目，基于gitlab+jenkins pipeline+docker的CI/CD实现等。了解其基本知识与操作，但不能说深度掌握，故借此系列进行梳理与学习，也希望对有意学习Docker的人提供参考。</p><a id="more"></a><h2 id="2-Docker简介"><a href="#2-Docker简介" class="headerlink" title="2. Docker简介"></a>2. Docker简介</h2><p>Docker最初是dotCloud公司（后来也改名为Docker）的一个内部项目，于2013年3月开源。Docker使用Google推出的Go语言实现，基于Linux内核的cgroup、namespace、Union FS等技术（先不用急着了解这些都是啥），对进程进行隔离，是操作系统层面的虚拟化技术。相对于传统的硬件层面的虚拟化技术（虚拟机），Docker显得更为轻量化。下图为传统虚拟机与Docker的结构对比<br><img src="/assets/vm-docker.png" alt="vm-docker"></p><p>由上图可看出传统虚拟机技术是在硬件层面虚拟出一套硬件（CPU、内存、磁盘、网卡等）后，在其上运行一个完整的操作系统，再在操作系统上运行应用进程；而Docker的应用进程是直接运行在宿主机的内核上，也不需要进行硬件虚拟，因此，Docker要比传统虚拟机更为轻便。</p><p>总结Docker相对传统虚拟化技术的优势如下：</p><ol><li><strong>更高的资源利用率：</strong>Docker不需要硬件虚拟与运行完整操作系统的开销，所以资源利用率更高，同样配置的主机，采用Docker往往可以运行更多数量的应用。</li><li><strong>更高效的使用体验：</strong>在操作系统上安装一些常用软件，如mysql，redis等，往往需要折腾好一阵，有些还要手动安装各种依赖，而采用Docker，可能几行命令就可以让一个服务快速运行起来。</li><li><strong>一致的运行环境：</strong>Docker镜像功能可以把程序运行需要的环境进行封装，确保程序在开发、测试、生产环境都能保持一致性，避免因环境不一致导致程序运行异常。</li><li><strong>CI/CD支持：</strong>使用Docker可以定制镜像来实现持续集成、持续部署，如基于gitlab + jenkins pipeline + docker的自动化部署。</li><li><strong>更轻松的维护：</strong>因为Docker保证了运行环境的一致性，因此应用的迁移或缩放将变得很容易；Docker的分层存储与镜像技术，也使得应用重复部分的复用变得更简单，基于基础镜像可以进一步扩展定义自己的镜像，也可以直接使用官方镜像来使用。</li></ol><h2 id="3-Docker的基本架构"><a href="#3-Docker的基本架构" class="headerlink" title="3. Docker的基本架构"></a>3. Docker的基本架构</h2><p>Docker的基本架构图如下<br><img src="/assets/docker-arch.png" alt="docker-arch"></p><p>主要包括几部分：</p><ol><li>Docker daemon（Docker守护进程 <code>dockerd</code>）：Docker的执行引擎，负责监听处理Docker客户端请求与管理Docker相关对象，如镜像、容器、网络、数据卷等。一个Docker守护进程可与其它Docker守护进程进行通信，作为Docker服务进行管理。</li><li>Docker client（Docker客户端 <code>docker</code>）：Docker客户端（<code>docker</code> CLI命令）是大多数用户用来与Docker守护进程交互的方式，比如你在命令行执行<code>docker run</code>，Docker客户端将发送该命令请求到Docker守护进程，由守护进程执行。Docker客户端可通过REST API, UNIX Socket或网络接口来与Docker守护进程进行通信，并且可与多个Docker守护进程进行通信。</li><li>Docker Registry（Docker注册中心）：用来存储Docker镜像的仓库，类似于Maven的Nexus。Docker官方提供了一个公共镜像仓库Docker Hub（ <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a> ），<code>docker</code>相关命令默认会从Docker Hub上搜索与下载镜像，我们可以配置一些国内镜像仓库地址来进行加速，甚至搭建自己的私有镜像仓库。</li><li>Docker Objects：Docker管理的对象，主要包括镜像、容器、网络、数据卷等。</li></ol><h2 id="4-Docker的用途"><a href="#4-Docker的用途" class="headerlink" title="4. Docker的用途"></a>4. Docker的用途</h2><p>根据第二部分Docker的优势及笔者的经验来看，目前Docker主要用于</p><ol><li>常用软件服务的搭建运行，如Mysql、Redis、Nginx等</li><li>业务服务的发布部署，尤其是基于SpringBoot的微服务</li><li>CI/CD实现，结合Gitlab的webhook，Jenkins的pipeline，实现自动化集成与部署</li><li>快速的弹性伸缩，在容器集群化管理的场景中，如Swarm、K8s解决方案中，可基于容器对服务进行快速的弹性伸缩来应对业务量的突发情况</li><li>执行环境封装，如一些深度学习框架模型，打成Docker镜像的方式进行发布，可以快速在不同的环境中运行起来</li><li>…</li></ol><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>在微服务架构、DevOps这些概念盛行的时代，容器化技术变得越来越重要，几乎成为每一位开发人员需要掌握的技能。本系列文章是笔者基于自身实践及相关文献参考，对Docker相关技术进行整理，欢迎关注，共同学习。<br></br><br>我的个人博客地址：<a href="http://blog.jboost.cn">http://blog.jboost.cn</a><br>我的微信公众号：jboost-ksxy （一个不只有技术干货的公众号，欢迎关注，及时获取更新内容）<br>———————————————————————————————————————————————————————————————<br><img src="/assets/qrcode-05.jpg" alt="微信公众号">  </p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu18.04上搭建KVM虚拟机环境超完整过程</title>
      <link href="/ubuntu-kvm.html"/>
      <url>/ubuntu-kvm.html</url>
      
        <content type="html"><![CDATA[<p>看标题这是篇纯运维的文章。在中小型企业中，一般很少配置专业的运维人员，都是由开发人员兼着。同时，对有志于技术管理的开发人员来说，多了解一些运维及整个软件生命周期的知识，是很有帮助的，因为带团队不仅仅是个管人的活，更多的是在你的部下遇到难题或者无人能上的时候，你能协助他解决或亲自上阵，这比只会“吆五喝六”的管理者将能获得更高的敬重与威信。闲话不多说了，记录下整个KVM虚拟机的搭建过程吧。</p><a id="more"></a><h2 id="1-KVM安装"><a href="#1-KVM安装" class="headerlink" title="1. KVM安装"></a>1. KVM安装</h2><h3 id="1-1-配置确认"><a href="#1-1-配置确认" class="headerlink" title="1.1 配置确认"></a>1.1 配置确认</h3><p>首先需要确认服务器的硬件是否支持虚拟化，执行如下命令确认</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">devuser@server_01:~$ egrep -c '(vmx|svm)' /proc/cpuinfo</span><br><span class="line">48</span><br></pre></td></tr></table></figure><p>如果输出结果大于0，意味着服务器硬件是支持虚拟化的。否则，重启进入BIOS设置中启用VT技术。<br>执行如下命令安装kvm-ok程序，来确定服务器是否能够运行硬件加速的KVM虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">devuser@server_01:~$ sudo apt install cpu-checker</span><br><span class="line"></span><br><span class="line">devuser@server_01:~$ sudo kvm-ok</span><br><span class="line">INFO: /dev/kvm exists</span><br><span class="line">KVM acceleration can be used</span><br></pre></td></tr></table></figure><h3 id="1-2-安装KVM"><a href="#1-2-安装KVM" class="headerlink" title="1.2 安装KVM"></a>1.2 安装KVM</h3><p>安装KVM及依赖项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">devuser@server_01:~$ sudo apt update</span><br><span class="line">devuser@server_01:~$ sudo apt install qemu qemu-kvm libvirt-bin  bridge-utils  virt-manager</span><br></pre></td></tr></table></figure><p>启动libvirtd服务，并设置开机自动启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">devuser@server_01:~$ sudo systemctl start libvirtd.service</span><br><span class="line">devuser@server_01:~$ sudo systemctl enable libvirtd.service</span><br></pre></td></tr></table></figure><p>执行<code>service libvirtd status</code>查看libvirtd服务状态，如图<br><img src="/assets/kvm1.png" alt="libvirtd-status"></p><h3 id="1-3-桥接网络配置"><a href="#1-3-桥接网络配置" class="headerlink" title="1.3 桥接网络配置"></a>1.3 桥接网络配置</h3><p>一般虚拟机网络配置有Bridge、NAT等几种模式。NAT模式下，虚拟机不需要配置自己的IP，通过宿主机来访问外部网络；Bridge模式下， 虚拟机需要配置自己的IP，然后虚拟出一个网卡， 与宿主机的网卡一起挂到一个虚拟网桥上（类似于交换机）来访问外部网络，这种模式下，虚拟机拥有独立的IP，局域网其它主机能直接通过IP与其通信。简单理解，就是NAT模式下，虚机隐藏在宿主机后面了，虚机能通过宿主机访问外网，但局域网其它主机访问不到它，Bridge模式下，虚机跟宿主机一样平等地存在，局域网其它主机可直接通过IP与其通信。一般我们创建虚机是用来部署服务供使用的， 所以都是用Bridge模式。</p><p>ubuntu 18中，网络配置通过netplan来实现了，如下，更改配置文件 /etc/netplan/50-cloud-init.yaml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">devuser@cserver_01:~$ sudo vim /etc/netplan/50-cloud-init.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"> This file is generated from information provided by</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> the datasource.  Changes to it will not persist across an instance.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> To <span class="built_in">disable</span> cloud-init<span class="string">'s network configuration capabilities, write a file</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> network: &#123;config: disabled&#125;</span></span><br><span class="line">network:</span><br><span class="line">    ethernets:</span><br><span class="line">        enp6s0:</span><br><span class="line">            dhcp4: true</span><br><span class="line">        enp7s0:</span><br><span class="line">            dhcp4: no</span><br><span class="line">            dhcp6: no</span><br><span class="line">    version: 2</span><br><span class="line"></span><br><span class="line">    bridges:</span><br><span class="line">         br0:</span><br><span class="line">             interfaces: [enp7s0]</span><br><span class="line">             dhcp4: no</span><br><span class="line">             addresses: [192.168.40.241/24]</span><br><span class="line">             gateway4: 192.168.40.1</span><br><span class="line">             nameservers:</span><br><span class="line">                 addresses: [114.114.114.114,8.8.8.8]</span><br></pre></td></tr></table></figure><p>将宿主机原有网卡enp7s0挂到网桥br0上，并指定IP地址为192.168.40.241，nameservers指定DNS服务器。修改完后，通过<code>sudo netplan apply</code>重启网络服务生效，然后通过<code>ifconfig</code>查看，<br><img src="/assets/kvm2.png" alt="kvm2"><br>原来挂在enp7s0网卡下的IP现在挂到了br0上，宿主机及所有其它虚拟机都通过该网桥来与外部通讯。我们也可以通过<code>brctl show</code>来直观地查看，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">devuser@server_01:~$ brctl show</span><br><span class="line">bridge name    bridge idSTP enabled    interfaces</span><br><span class="line">br0    8000.2a5be3ec2698no        enp7s0</span><br><span class="line">docker08000.02424524dcceno        veth580af8e</span><br><span class="line">        veth74119f3</span><br><span class="line">        vethe7a2b0f</span><br><span class="line">        vethfe89039</span><br></pre></td></tr></table></figure><p>目前因为还没虚机，所以只有宿主机的网卡enp7s0挂在网桥br0上。同时也可以看到docker容器也是通过网桥docker0来通讯的。</p><h2 id="2-虚拟机安装"><a href="#2-虚拟机安装" class="headerlink" title="2. 虚拟机安装"></a>2. 虚拟机安装</h2><h3 id="2-1-安装虚拟机"><a href="#2-1-安装虚拟机" class="headerlink" title="2.1 安装虚拟机"></a>2.1 安装虚拟机</h3><p>安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo virt-install --name=dev-server1 --memory=16384,maxmemory=16384 \</span><br><span class="line">--vcpus=4,maxvcpus=4 --os-type=linux --os-variant=rhel7 \</span><br><span class="line">--location=/home/devuser/tools/CentOS-7-x86_64-DVD-1810.iso \</span><br><span class="line">--disk path=/var/lib/libvirt/images/devserver1.img,size=300 \</span><br><span class="line">--bridge=br0 --graphics=none --console=pty,target_type=serial \</span><br><span class="line">--extra-args="console=tty0 console=ttyS0"</span><br></pre></td></tr></table></figure><p>其中–name指定虚机名称；–memory=16384,maxmemory=16384配置了16G内存；–vcpus=4,maxvcpus=4配置了4个CPU内核；centos7需要指定–os-variant=rhel7；–disk path=xx,size=300指定了磁盘路径与大小，这里是300G。</p><p>如果执行上述命令出现<code>qemu-kvm: could not open &#39;xx/CentOS-7-x86_64-DVD-1810.iso&#39;: Permission denied</code>异常退出时，可通过修改<code>/etc/libvirt/qemu.conf</code>文件将<code>user = &quot;root&quot;</code>，<code>group = &quot;root&quot;</code>前面的注释去掉解决（<a href="https://github.com/jedi4ever/veewee/issues/996）" target="_blank" rel="noopener">https://github.com/jedi4ever/veewee/issues/996）</a></p><p>如无问题，安装程序将出现如下配置界面<br><img src="/assets/kvm3.png" alt="kvm3"></p><p>可通过输入选项对应的数字来选择不同的配置，依次操作如下步骤完成时区设置：<br>输入2，回车，选择时区设置；输入1，回车，选择“Set timezone”；输入2，回车，选择“Asia”；回车，输入64，回车，选择“Shanghai”</p><p>然后进行安装设置，<br><img src="/assets/kvm4.png" alt="kvm4"><br>依次操作如下：<br>输入5，回车，进入安装设置；输入c，回车，选择默认的磁盘进行安装；输入c，回车，使用默认的“2) Use All<br> Space”；输入1，回车，选择“1) Standard Partition”进行标准分区；输入c，回车，完成分区设置</p><p>最后进入root密码设置，<br><img src="/assets/kvm5.png" alt="kvm5"><br>操作如下：<br>输入8，回车，进入root密码设置；输入密码，回车；输入确认密码，回车</p><p>完成上述设置后，输入b开始进行安装<br><img src="/assets/kvm6.png" alt="kvm6"></p><p>等待一段时间后，安装程序停在如下界面<br><img src="/assets/kvm7.png" alt="kvm7"></p><p>按回车继续，最后输入用户名root，及前面设置的密码登录系统<br><img src="/assets/kvm8.png" alt="kvm8"></p><h3 id="2-2-虚拟机网络配置"><a href="#2-2-虚拟机网络配置" class="headerlink" title="2.2 虚拟机网络配置"></a>2.2 虚拟机网络配置</h3><p>虚拟机安装完后，是没有分配IP的，我们通过<code>ip a</code>命令查看，<br><img src="/assets/kvm9.png" alt="kvm9"></p><p>这时候的eth0下面空空如也，什么都没有。在<code>/etc/sysconfig/network-scripts/ifcfg-eth0</code>文件中添加如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static #静态指定IP</span><br><span class="line">DEFROUTE=yes</span><br><span class="line"><span class="meta">#</span><span class="bash">IPV4_FAILURE_FATAL=no</span></span><br><span class="line"><span class="meta">#</span><span class="bash">IPV6INIT=yes</span></span><br><span class="line"><span class="meta">#</span><span class="bash">IPV6_AUTOCONF=yes</span></span><br><span class="line"><span class="meta">#</span><span class="bash">IPV6_DEFROUTE=yes</span></span><br><span class="line"><span class="meta">#</span><span class="bash">IPV6_FAILURE_FATAL=no</span></span><br><span class="line"><span class="meta">#</span><span class="bash">IPV6_ADDR_GEN_MODE=stable-privacy</span></span><br><span class="line">NAME=eth0</span><br><span class="line">UUID=449ed621-97a8-45b9-902f-0d347e27de98</span><br><span class="line">DEVICE=eth0</span><br><span class="line">ONBOOT=yes  #开机自动启动</span><br><span class="line">IPADDR=192.168.40.96</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.40.1</span><br><span class="line">DNS1=192.168.40.1</span><br></pre></td></tr></table></figure><p>并通过<code>systemctl restart network</code>重启网络生效，这时候再运行<code>ip a</code>查看，eth0下面已经有配置的IP了。不出意外的话，局域网其它主机就可以通过该IP来远程SSH连接了。<br><img src="/assets/kvm10.png" alt="kvm10"></p><p>这时候我们再通过<code>brctl show</code>来查看网桥挂载情况，br0下面已经多了一个vnet0虚拟网卡了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">devuser@server_01:~$ brctl show</span><br><span class="line">bridge name    bridge idSTP enabled    interfaces</span><br><span class="line">br0    8000.2a5be3ec2698no        enp7s0</span><br><span class="line">        vnet0</span><br><span class="line">docker08000.02424524dcceno        veth580af8e</span><br><span class="line">        veth74119f3</span><br><span class="line">        vethd270ee8</span><br><span class="line">        vethe7a2b0f</span><br><span class="line">        vethfe89039</span><br></pre></td></tr></table></figure><p>虚拟机装完后，默认的hostname是localhost，针对centos7，我们可以通过如下命令来修改hostname</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# hostnamectl set-hostname dev-server1</span><br></pre></td></tr></table></figure><p>然后在/etc/hosts文件中添加127.0.0.1的host映射 dev-server1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vi /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 dev-server1</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br></pre></td></tr></table></figure><blockquote><p>Note: 如果出现虚拟机中无法访问外网，外部主机也无法ping通虚拟机的情况，则尝试如下处理</p></blockquote><p>向文件/etc/sysctl.conf添加以下代码，禁用网络过滤器: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net.bridge.bridge-nf-call-ip6tables = 0</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 0</span><br><span class="line">net.bridge.bridge-nf-call-arptables = 0</span><br></pre></td></tr></table></figure><p>重新加载kernel参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">devuser@server_01: sudo sysctl -p</span><br><span class="line">net.ipv4.ip_forward = 0</span><br><span class="line">...</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 0</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 0</span><br><span class="line">net.bridge.bridge-nf-call-arptables = 0</span><br></pre></td></tr></table></figure><h2 id="3-虚拟机管理"><a href="#3-虚拟机管理" class="headerlink" title="3. 虚拟机管理"></a>3. 虚拟机管理</h2><ol><li><p>列出当前运行的虚拟机<code>virsh list</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devuser@server_01:~$ virsh list</span><br><span class="line"> Id    Name                           State</span><br><span class="line">----------------------------------------------------</span><br><span class="line"> 5     dev-server1                    running</span><br></pre></td></tr></table></figure><p>如果列出所有的，则<code>virsh list --all</code></p></li><li><p>从宿主机进入虚拟机<code>virsh console</code>，后面接虚拟机ID或名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">devuser@server_01:~$ virsh console 5</span><br><span class="line">Connected to domain dev-server1</span><br><span class="line">Escape character is ^]</span><br><span class="line"></span><br><span class="line">CentOS Linux 7 (Core)</span><br><span class="line">Kernel 3.10.0-957.el7.x86_64 on an x86_64</span><br><span class="line"></span><br><span class="line">dev-server1 login:</span><br></pre></td></tr></table></figure><p>输入用户名，密码即可登录虚拟机，按<code>Ctrl+]</code>可退出。</p></li><li><p>启动与关闭虚拟机<code>virsh start|shutdown</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">devuser@cserver_01:~$ virsh start dev-server1</span><br><span class="line">Domain dev-server1 started</span><br><span class="line"></span><br><span class="line">devuser@server_01:~$ virsh shutdown 5</span><br><span class="line">Domain 5 is being shutdown</span><br></pre></td></tr></table></figure></li><li><p>libvirtd启动时，自动启动虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">devuser@server_01:~$ virsh autostart dev-server1</span><br><span class="line">Domain dev-server1 marked as autostarted</span><br></pre></td></tr></table></figure></li><li><p>挂起/恢复虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">devuser@server_01:~$ virsh suspend dev-server1    # 挂起虚拟机</span><br><span class="line">devuser@server_01:~$ virsh resume dev-server1    # 恢复挂起的虚拟机</span><br></pre></td></tr></table></figure></li><li><p>销毁虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devuser@server_01:~$ virsh undefine dev-server1   # 彻底销毁虚拟机，会删除虚拟机配置文件，但不会删除虚拟磁盘</span><br></pre></td></tr></table></figure></li></ol></br>我的个人博客地址：http://blog.jboost.cn         我的微信公众号：jboost-ksxy （一个不只有技术干货的公众号，欢迎关注，及时获取更新内容）———————————————————————————————————————————————————————————————![微信公众号](/assets/qrcode-05.jpg)  ]]></content>
      
      
      <categories>
          
          <category> 高效实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件项目研发流程该怎么规范</title>
      <link href="/project-process.html"/>
      <url>/project-process.html</url>
      
        <content type="html"><![CDATA[<p>在软件项目研发管理过程中，是否经常出现这样的场景：开发人员不知道什么时候转测；项目经理拿个Excel文档群里一发，某任务前天就应该完成的，怎么现在还没开始搞；前端问这部分UI是谁在做，什么时候能做完；测试说线上这个bug又是谁改出来的，这次没转测这模块……等等。整个协作感觉一团乱麻，团队内部充满了甩锅与抱怨的氛围。软件项目的研发流程该怎么规范，让团队成员都能目标明确，步调一致，让产品迭代充满节奏感。本文基于笔者项目研发管理经验整理，希望起到抛砖引玉的作用，探讨高效团队的协作流程模式。</p><a id="more"></a><h2 id="1-协作流程图"><a href="#1-协作流程图" class="headerlink" title="1. 协作流程图"></a>1. 协作流程图</h2><p><img src="/assets/project.png" alt="协作流程图"></p><p>基本原则：</p><ol><li>所有问题可跟踪 （需求、Bug、优化）</li><li>所有工作透明化 （工作量、进展、Block因素）</li></ol><h2 id="2-各阶段内容详解"><a href="#2-各阶段内容详解" class="headerlink" title="2. 各阶段内容详解"></a>2. 各阶段内容详解</h2><h3 id="2-1-需求收集确认"><a href="#2-1-需求收集确认" class="headerlink" title="2.1. 需求收集确认"></a>2.1. 需求收集确认</h3><p>本阶段主要是与产品经理相关的活动内容：</p><ol><li>产品经理在每次版本开始之前定期收集各方需求，包括客户反馈、领导意见（对很多中小企业来说，老板就是最大的“用户”）、市场调研及技术团队需求等来源，输出需求列表</li><li>在版本开始之前召开<strong>版本计划会议</strong>，参与者包括项目经理、产品经理，及项目核心成员，按优先级梳理需求列表，输出下次版本的初步任务列表（之所以说初步，是因为该列表后面可能根据评审情况进行调整）</li><li>产品经理基于初步任务列表完成详细需求文档，组织团队成员——包括相关UI、开发、测试，召开 <strong>需求评审会议</strong>，输出评审意见及修正完成时间</li><li>产品经理针对需求评审会议中团队提出的意见建议，在修正完成时间内及时修正需求文档，并及时通知团队相关成员，输出确定的需求文档</li></ol><blockquote><p>注：可在需求评审会议后，进行任务的初步认领分配与时间估算，初步<strong>确定转测、上线时间节点</strong></p></blockquote><h3 id="2-2-设计开发"><a href="#2-2-设计开发" class="headerlink" title="2.2. 设计开发"></a>2.2. 设计开发</h3><ol><li>项目经理根据需求文档完成任务拆解，并在任务管理系统中创建对应任务单，指定经办人</li><li>各经办人认领任务后，根据自身任务的期限，及时与依赖方沟通，确定依赖任务的完成时间，以免影响自身任务进度，存在问题及时向项目经理反馈。</li><li>UI设计完成后，相关开发人员与产品经理需对UI设计进行确认，如果涉及内容较多，可组织<strong>UI评审会议</strong>（由产品经理或项目经理权衡组织）</li><li>涉及流程的开发任务需要有必要的设计，技术相关负责人负责对<strong>设计review</strong>，没有review的设计不能开发；任务开发完成需要进行<strong>代码review</strong></li><li>项目经理定期组织项目例会（紧急版本建议每天一次，较长期版本建议一周一次或两次），持续跟进任务进度与问题，并及时协调处理，以保障进度预期</li><li>在预定转测时间节点前一天，开发人员编写转测文档，描述本次版本调整内容（附上任务列表）及注意事项，并通知项目相关人员（钉钉群或邮件）</li></ol><h3 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3. 测试"></a>2.3. 测试</h3><ol><li>需求评审会议后，测试人员需对各功能模块编写测试用例文档，并在转测前组织<strong>测试评审会议</strong>，对各功能各环节进行复核与查漏补缺</li><li>一次版本任务可根据情况分批测试，并确定每轮转测的内容与时间节点；分批测试完成后，需在上线前进行集成测试，注意预留一定的时间用于问题修复</li><li>测试完成，需要将测试结论通报项目相关人员（钉钉群或邮件），包括遗留问题与是否达到上线要求结论</li></ol><blockquote><p>注：产品经理可在转测后对开发实现进行验收，以确定开发是否符合需求实际，以便及时进行调整</p></blockquote><h3 id="2-4-上线"><a href="#2-4-上线" class="headerlink" title="2.4. 上线"></a>2.4. 上线</h3><ol><li>上线人员需在上线前编写上线方案文档，记录此次上线内容，并对此次上线操作进行推演，对所涉及的所有操作按步骤进行记录，如数据库操作，代码merge，jenkins构建等；对可能存在的问题进行备注及对应的处理方案，并提交技术相关负责人review</li><li>项目经理结合测试结论及其它各方面情况，决策是否上线，并将意见通知到项目相关人员（钉钉群或邮件）</li><li>上线人员按照上线方案文档记录的步骤，依次完成上线操作（上线操作最好至少由两人完成，一人操作，一人检视，避免出错）</li><li>上线完成后，测试人员与产品经理对此次上线进行线上验证，确保线上功能流程无问题</li><li>验证无误后，由项目经理或其他指定负责人将上线通知发布至利益相关者，包括项目团队所有成员及相关合作方，说明上线时间、上线内容、影响因素、注意事项等（即时通讯群或邮件）</li></ol><h3 id="2-5-复盘"><a href="#2-5-复盘" class="headerlink" title="2.5. 复盘"></a>2.5. 复盘</h3><ol><li>版本结束后，项目经理根据情况对上个周期组织复盘总结会，总结存在的问题与原因，及后续规避的办法，总结积累的经验等</li></ol><blockquote><p>以上各阶段并不是完全串行推进的，相互之间存在一些穿插，比如下一版本需求的收集整理与当前版本的开发是并行推进的，开发与测试也可以以分阶段转测的形式并行推进，等等。</p></blockquote><h2 id="3-一些常用工具"><a href="#3-一些常用工具" class="headerlink" title="3. 一些常用工具"></a>3. 一些常用工具</h2><ol><li>jira 用于项目任务管理，其中Agile插件可方便查看整体任务面板，对任务状态一目了然，需要求团队成员养成及时更新状态的习惯</li><li>confluence 文档管理，用于各类文档的集中化维护，以上所述的如需求文档、开发设计文档、转测文档、上线文档等均可使用confluence以项目空间的形式集中化管理。</li><li>gitlab 代码管理</li><li>jenkins 项目部署构建工具</li><li>nexus 搭建maven私有库</li></ol><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>团队工作讲求步调与节奏，好的流程与规范可以让一个水平一般的人也能充分发挥其作用，从而让团队整体稳步前进，高效产出。而不好的流程，或根本不重视流程的团队，却往往一盘散沙，甩锅与抱怨充斥，战斗力低下。本文以相对较粗粒度对软件项目的基本流程管理做了介绍，更细节的内容可能需要团队根据内部具体情况进行相应处理与对待。链接： <a href="https://pan.baidu.com/s/1WBHsIWoquKTQHJ6IaSql3Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1WBHsIWoquKTQHJ6IaSql3Q</a>  是笔者基于以前团队敏捷项目管理及一些具体问题的思考分享PPT，供参考。提取码：awya </p></br>我的个人博客地址：http://blog.jboost.cn         我的微信公众号：jboost-ksxy （一个不只有技术干货的公众号，欢迎关注，及时获取更新内容）———————————————————————————————————————————————————————————————![微信公众号](/assets/qrcode-05.jpg)   ]]></content>
      
      
      <categories>
          
          <category> teamwork </category>
          
      </categories>
      
      
        <tags>
            
            <tag> agile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池的基本原理，看完就懂了</title>
      <link href="/threadpool.html"/>
      <url>/threadpool.html</url>
      
        <content type="html"><![CDATA[<p>本文内容是基于研发部门内部的分享整理，记录下来供学习或回顾。</p><a id="more"></a><h2 id="1-为什么要用线程池"><a href="#1-为什么要用线程池" class="headerlink" title="1. 为什么要用线程池"></a>1. 为什么要用线程池</h2><ol><li><p>降低资源消耗。通过重复利用已创建的线程降低线程创建、销毁线程造成的消耗。 </p></li><li><p>提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。</p></li><li><p>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配、调优和监控</p></li></ol><h2 id="2-ThreadPoolExecutor线程池类参数详解"><a href="#2-ThreadPoolExecutor线程池类参数详解" class="headerlink" title="2. ThreadPoolExecutor线程池类参数详解"></a>2. ThreadPoolExecutor线程池类参数详解</h2><table><thead><tr><th align="center">参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">corePoolSize</td><td align="center">核心线程数量，线程池维护线程的最少数量</td></tr><tr><td align="center">maximumPoolSize</td><td align="center">线程池维护线程的最大数量</td></tr><tr><td align="center">keepAliveTime</td><td align="center">线程池除核心线程外的其他线程的最长空闲时间，超过该时间的空闲线程会被销毁</td></tr><tr><td align="center">unit</td><td align="center">keepAliveTime的单位，TimeUnit中的几个静态属性：NANOSECONDS、MICROSECONDS、MILLISECONDS、SECONDS</td></tr><tr><td align="center">workQueue</td><td align="center">线程池所使用的任务缓冲队列</td></tr><tr><td align="center">threadFactory</td><td align="center">线程工厂，用于创建线程，一般用默认的即可</td></tr><tr><td align="center">handler</td><td align="center">线程池对拒绝任务的处理策略</td></tr></tbody></table><p>当线程池任务处理不过来的时候（什么时候认为处理不过来后面描述），可以通过handler指定的策略进行处理，ThreadPoolExecutor提供了四种策略：</p><ol><li>ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常；也是默认的处理方式。</li><li>ThreadPoolExecutor.DiscardPolicy：丢弃任务，但是不抛出异常。</li><li>ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</li><li>ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</li></ol><p>可以通过实现RejectedExecutionHandler接口自定义处理方式。</p><h2 id="3-线程池任务执行"><a href="#3-线程池任务执行" class="headerlink" title="3. 线程池任务执行"></a>3. 线程池任务执行</h2><h3 id="3-1-添加执行任务"><a href="#3-1-添加执行任务" class="headerlink" title="3.1. 添加执行任务"></a>3.1. 添加执行任务</h3><ul><li>submit() 该方法返回一个Future对象，可执行带返回值的线程；或者执行想随时可以取消的线程。Future对象的get()方法获取返回值。Future对象的cancel(true/false)取消任务，未开始或已完成返回false，参数表示是否中断执行中的线程</li><li>execute() 没有返回值。</li></ul><h3 id="3-2-线程池任务提交过程"><a href="#3-2-线程池任务提交过程" class="headerlink" title="3.2. 线程池任务提交过程"></a>3.2. 线程池任务提交过程</h3><p>一个线程提交到线程池的处理流程如下图<br><img src="/assets/threadpool.png" alt="线程池任务提交"></p><ol><li>如果此时线程池中的数量小于corePoolSize，即使线程池中的线程都处于空闲状态，也要创建新的线程来处理被添加的任务。 </li><li>如果此时线程池中的数量等于corePoolSize，但是缓冲队列workQueue未满，那么任务被放入缓冲队列。 </li><li>如果此时线程池中的数量大于等于corePoolSize，缓冲队列workQueue满，并且线程池中的数量小于maximumPoolSize，建新的线程来处理被添加的任务。 </li><li>如果此时线程池中的数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量等于maximumPoolSize，那么通过 handler所指定的策略来处理此任务。 </li><li>当线程池中的线程数量大于 corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止。这样，线程池可以动态的调整池中的线程数。</li></ol><p>总结即：处理任务判断的优先级为 核心线程corePoolSize、任务队列workQueue、最大线程maximumPoolSize，如果三者都满了，使用handler处理被拒绝的任务。 </p><p>** 注意：**</p><ol><li>当workQueue使用的是无界限队列时，maximumPoolSize参数就变的无意义了，比如new LinkedBlockingQueue(),或者new ArrayBlockingQueue(Integer.MAX_VALUE);</li><li>使用SynchronousQueue队列时由于该队列没有容量的特性，所以不会对任务进行排队，如果线程池中没有空闲线程，会立即创建一个新线程来接收这个任务。maximumPoolSize要设置大一点。</li><li>核心线程和最大线程数量相等时keepAliveTime无作用.</li></ol><h3 id="3-3-线程池关闭"><a href="#3-3-线程池关闭" class="headerlink" title="3.3. 线程池关闭"></a>3.3. 线程池关闭</h3><ol><li>shutdown() 不接收新任务,会处理已添加任务</li><li>shutdownNow() 不接受新任务,不处理已添加任务,中断正在处理的任务</li></ol><h2 id="4-常用队列介绍"><a href="#4-常用队列介绍" class="headerlink" title="4. 常用队列介绍"></a>4. 常用队列介绍</h2><ol><li>ArrayBlockingQueue： 这是一个由数组实现的容量固定的有界阻塞队列.</li><li>SynchronousQueue： 没有容量，不能缓存数据；每个put必须等待一个take; offer()的时候如果没有另一个线程在poll()或者take()的话返回false。</li><li>LinkedBlockingQueue： 这是一个由单链表实现的默认无界的阻塞队列。LinkedBlockingQueue提供了一个可选有界的构造函数，而在未指明容量时，容量默认为Integer.MAX_VALUE。</li></ol><p>队列操作:</p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">add</td><td align="center">增加一个元索; 如果队列已满，则抛出一个异常</td></tr><tr><td align="center">remove</td><td align="center">移除并返回队列头部的元素; 如果队列为空，则抛出一个异常</td></tr><tr><td align="center">offer</td><td align="center">添加一个元素并返回true; 如果队列已满，则返回false</td></tr><tr><td align="center">poll</td><td align="center">移除并返回队列头部的元素; 如果队列为空，则返回null</td></tr><tr><td align="center">put</td><td align="center">添加一个元素; 如果队列满，则阻塞</td></tr><tr><td align="center">take</td><td align="center">移除并返回队列头部的元素; 如果队列为空，则阻塞</td></tr><tr><td align="center">element</td><td align="center">返回队列头部的元素; 如果队列为空，则抛出一个异常</td></tr><tr><td align="center">peek</td><td align="center">返回队列头部的元素; 如果队列为空，则返回null</td></tr></tbody></table><h2 id="5-Executors线程工厂类"><a href="#5-Executors线程工厂类" class="headerlink" title="5. Executors线程工厂类"></a>5. Executors线程工厂类</h2><ol><li><p>Executors.newCachedThreadPool();<br>说明: 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程.<br>内部实现：new ThreadPoolExecutor(0,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());</p></li><li><p>Executors.newFixedThreadPool(int);<br>说明: 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。<br>内部实现：new ThreadPoolExecutor(nThreads, nThreads,0L,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());</p></li><li><p>Executors.newSingleThreadExecutor();<br>说明:创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照顺序执行。<br>内部实现：new ThreadPoolExecutor(1,1,0L,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>())</p></li><li><p>Executors.newScheduledThreadPool(int);<br>说明:创建一个定长线程池，支持定时及周期性任务执行。<br>内部实现：new ScheduledThreadPoolExecutor(corePoolSize)</p></li></ol><p>** 【附】阿里巴巴Java开发手册中对线程池的使用规范 **<br>2. 【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。<br>正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTaskThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimerTaskThread</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setName(<span class="string">"TimerTaskThread"</span>); </span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。<br>说明： 使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资<br>源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者<br>“过度切换”的问题。</li><li>【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样<br>的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。<br>说明： Executors 返回的线程池对象的弊端如下：<br>1） FixedThreadPool 和 SingleThreadPool:<br>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。<br>2） CachedThreadPool 和 ScheduledThreadPool:<br>允许的创建线程数量为 Integer.MAX_VALUE， 可能会创建大量的线程，从而导致 OOM。</li></ol><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>ThreadPoolExecutor通过几个核心参数来定义不同类型的线程池，适用于不同的使用场景；其中在任务提交时，会依次判断corePoolSize， workQueque， 及maximumPoolSize，不同的状态不同的处理。技术领域水太深，如果不是日常使用，基本一段时间后某些知识点就忘的差不多了，因此阶段性地回顾与总结，对夯实自己的技术基础很有必要。<br></br><br>我的个人博客地址：<a href="http://blog.jboost.cn">http://blog.jboost.cn</a><br>我的github地址：<a href="https://github.com/ronwxy" target="_blank" rel="noopener">https://github.com/ronwxy</a><br>我的微信公众号：jboost-ksxy （一个不只有技术干货的公众号，欢迎关注，及时获取更新内容）<br>———————————————————————————————————————————————————————————————<br><img src="/assets/qrcode-05.jpg" alt="微信公众号">   </p>]]></content>
      
      
      <categories>
          
          <category> 高效实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> concurrency </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot从入门到实战（九）：统一异常处理</title>
      <link href="/springboot-error.html"/>
      <url>/springboot-error.html</url>
      
        <content type="html"><![CDATA[<p>都说管理的精髓就是“制度管人，流程管事”。而所谓流程，就是对一些日常工作环节、方式方法、次序等进行标准化、规范化。且不论精不精髓，在技术团队中，对一些通用场景，统一规范是必要的，只有步调一致，才能高效向前。如前后端交互协议，如本文探讨的异常处理。</p><a id="more"></a><h3 id="1-Spring-Mvc中的异常处理"><a href="#1-Spring-Mvc中的异常处理" class="headerlink" title="1. Spring Mvc中的异常处理"></a>1. Spring Mvc中的异常处理</h3><p>在spring mvc中，跟异常处理的相关类大致如下</p><p><img src="/assets/springmvcexresolver.png" alt="springmvn异常处理类"></p><p>上图中，spring mvc中处理异常的类（包括在请求映射时与请求处理过程中抛出的异常），都是 HandlerExceptionResolver 接口的实现，并且都实现了 Ordered 接口。与拦截器链类似，如果容器中存在多个实现了 HandlerExceptionResolver 接口的异常处理类，则它们的 resolveException 方法会被依次调用，顺序由order决定，值越小的先执行，只要其中一个调用返回不是null，则后续的异常处理将不再执行。</p><p>各实现类简单介绍如下：</p><ul><li>DefaultHandlerExceptionResolver： 这个是默认实现，处理Spring定义的各种标准异常，将其转换为对应的Http Status Code，具体处理的异常参考 doResolveException 方法</li><li>ResponseStatusExceptionResolver：用来支持@ResponseStatus注解使用的实现，如果自定义的异常通过@ResponseStatus注解进行了修饰，并且容器中存在ResponseStatusExceptionResolver的bean，则自定义异常抛出时会被该bean进行处理，返回注解定义的Http Status Code及内容给客户端</li><li>ExceptionHandlerExceptionResolver：用来支持@ExceptionHandler注解使用的实现，使用该注解修饰的方法来处理对应的异常。不过该注解的作用范围只在controller类，如果需要全局处理，则需要配合@ControllerAdvice注解使用。</li><li>SimpleMappingExceptionResolver：将异常映射为视图</li><li>HandlerExceptionResolverComposite：就是各类实现的组合，依次执行，只要其中一个处理返回不为null，则不再处理。</li></ul><p>因为本文主要是对spring boot如何对异常统一处理进行探讨，所以以上只对各实现做了基本介绍，更加详细的内容可查阅相关文档或后续再补上。</p><h3 id="2-Spring-Boot中如何统一异常处理"><a href="#2-Spring-Boot中如何统一异常处理" class="headerlink" title="2. Spring Boot中如何统一异常处理"></a>2. Spring Boot中如何统一异常处理</h3><p>通过第一部分介绍，可以使用@ExceptionHandler + @ControllerAdvice 组合的方式来实现异常的全局统一处理。对于REST服务来说，spring mvc提供了一个抽象类 ResponseEntityExceptionHandler， 该类类似于上面介绍的 DefaultHandlerExceptionResolver，对一些标准的异常进行了处理，但不是返回 ModelAndView对象， 而是返回 ResponseEntity对象。故我们可以基于该类来实现REST服务异常的统一处理<br>定义异常处理类 BaseWebApplicationExceptionHandler 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseWebApplicationExceptionHandler</span> <span class="keyword">extends</span> <span class="title">ResponseEntityExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> includeStackTrace;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseWebApplicationExceptionHandler</span><span class="params">(<span class="keyword">boolean</span> includeStackTrace)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.includeStackTrace = includeStackTrace;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(BizException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">Object</span>&gt; <span class="title">handleBizException</span>(<span class="title">BizException</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">        logger.warn(<span class="string">"catch biz exception: "</span> + ex.toString(), ex.getCause());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.asResponseEntity(HttpStatus.valueOf(ex.getHttpStatus()), ex.getErrorCode(), ex.getErrorMessage(), ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;IllegalArgumentException<span class="class">.<span class="keyword">class</span>, <span class="title">IllegalStateException</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">Object</span>&gt; <span class="title">handleIllegalArgumentException</span>(<span class="title">Exception</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">        logger.warn(<span class="string">"catch illegal exception."</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.asResponseEntity(HttpStatus.BAD_REQUEST, HttpStatus.BAD_REQUEST.name().toLowerCase(), ex.getMessage(), ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">Object</span>&gt; <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">        logger.error(<span class="string">"catch exception."</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.asResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR, HttpStatus.INTERNAL_SERVER_ERROR.name().toLowerCase(), ExceptionConstants.INNER_SERVER_ERROR_MSG, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ResponseEntity&lt;Object&gt; <span class="title">handleExceptionInternal</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Exception ex, @Nullable Object body, HttpHeaders headers, HttpStatus status, WebRequest request)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (HttpStatus.INTERNAL_SERVER_ERROR.equals(status)) &#123;</span><br><span class="line">            request.setAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE, ex, WebRequest.SCOPE_REQUEST);</span><br><span class="line">        &#125;</span><br><span class="line">        logger.warn(<span class="string">"catch uncustom exception."</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.asResponseEntity(status, status.name().toLowerCase(), ex.getMessage(), ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ResponseEntity&lt;Object&gt; <span class="title">asResponseEntity</span><span class="params">(HttpStatus status, String errorCode, String errorMessage, Exception ex)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        data.put(BizException.ERROR_CODE, errorCode);</span><br><span class="line">        data.put(BizException.ERROR_MESSAGE, errorMessage);</span><br><span class="line">        <span class="comment">//是否包含异常的stack trace</span></span><br><span class="line">        <span class="keyword">if</span>(includeStackTrace)&#123;</span><br><span class="line">            addStackTrace(data, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(data, status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addStackTrace</span><span class="params">(Map&lt;String, Object&gt; errorAttributes, Throwable error)</span> </span>&#123;</span><br><span class="line">        StringWriter stackTrace = <span class="keyword">new</span> StringWriter();</span><br><span class="line">        error.printStackTrace(<span class="keyword">new</span> PrintWriter(stackTrace));</span><br><span class="line">        stackTrace.flush();</span><br><span class="line">        errorAttributes.put(BizException.ERROR_TRACE, stackTrace.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有几点：</p><ol><li>定义了一个includeStackTrace变量，来控制是否输出异常栈信息</li><li>自定义了一个异常类BizException，表示可预知的业务异常，并对它提供了处理方法，见handleBizException方法</li><li>对其它未预知异常，用Exception类型进行最后处理，见handleException方法</li><li>重写了超类的handleExceptionInternal方法，统一响应内容的字段与格式</li><li>针对REST服务，使用的是@RestControllerAdvice注解，而不是@ControllerAdvice</li></ol><p>BaseWebApplicationExceptionHandler是通过增强的方式对controller抛出的异常做了统一处理，那如果请求都没有到达controller怎么办，比如在过滤器那边就抛异常了，Spring Boot其实对错误的处理做了一些自动化配置，参考ErrorMvcAutoConfiguration类，具体这里不详述，只提出方案——自定义ErrorAttributes实现，如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> includeStackTrace;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap&lt;String, Object&gt;();</span><br><span class="line">        addStatus(errorAttributes, webRequest);</span><br><span class="line">        addErrorDetails(errorAttributes, webRequest, <span class="keyword">this</span>.includeStackTrace);</span><br><span class="line">        <span class="keyword">return</span> errorAttributes;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以上只列出了主要部分，具体实现可参考源码。这里同样定义了includeStackTrace来控制是否包含异常栈信息。</p><p>最后，将以上两个实现通过配置文件注入容器，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">DispatcherServlet</span>.<span class="title">class</span>, <span class="title">WebMvcConfigurer</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(<span class="title">ResponseEntityExceptionHandler</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureBefore</span>(<span class="title">ErrorMvcAutoConfiguration</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ExceptionHandlerAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Profile</span>(&#123;<span class="string">"test"</span>, <span class="string">"formal"</span>, <span class="string">"prod"</span>&#125;)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntityExceptionHandler <span class="title">defaultGlobalExceptionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试、正式环境，不输出异常的stack trace</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseWebApplicationExceptionHandler(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Profile</span>(&#123;<span class="string">"default"</span>,<span class="string">"local"</span>,<span class="string">"dev"</span>&#125;)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntityExceptionHandler <span class="title">devGlobalExceptionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//本地、开发环境，输出异常的stack trace</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseWebApplicationExceptionHandler(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Profile</span>(&#123;<span class="string">"test"</span>, <span class="string">"formal"</span>, <span class="string">"prod"</span>&#125;)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ErrorAttributes <span class="title">basicErrorAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试、正式环境，不输出异常的stack trace</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseErrorAttributes(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Profile</span>(&#123;<span class="string">"default"</span>,<span class="string">"local"</span>,<span class="string">"dev"</span>&#125;)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ErrorAttributes <span class="title">devBasicErrorAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//本地、开发环境，输出异常的stack trace</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseErrorAttributes(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的@Profile主要是控制针对不同环境，输出不同的响应内容。以上配置的意思是在profile为default、local、dev时，响应内容中包含异常栈信息；profile为test、formal、prod时，响应内容不包含异常栈信息。这么做的好处是，开发阶段，当前端联调时，如果出错，可直接从响应内容中看到异常栈，方便服务端开发人员快速定位问题，而测试、生产环境， 就不要返回异常栈信息了。</p></blockquote><h3 id="3-基于Spring-Boot的异常处理规范"><a href="#3-基于Spring-Boot的异常处理规范" class="headerlink" title="3. 基于Spring Boot的异常处理规范"></a>3. 基于Spring Boot的异常处理规范</h3><ol><li><p>异常的表示形式<br>异常一般可通过自定义异常类，或定义异常的信息，比如code，message之类，然后通过一个统一的异常类进行封装。如果每一种异常都定义一个异常类，则会造成异常类过多，所以实践开发中我一般倾向于后者。<br>可以定义一个接口，该接口主要是方便后面的异常处理工具类实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseErrors</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getCode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getMsg</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义一个枚举，实现该接口，在该枚举中定义异常信息，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ErrorCodeEnum implements BaseErrors &#123;</span><br><span class="line">    qrcode_existed(<span class="string">"该公众号下已存在同名二维码"</span>),</span><br><span class="line">    authorizer_notexist(<span class="string">"公众号不存在"</span>),</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ErrorCodeEnum</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>封装异常处理<br>分场景定义了ClientSideException，ServerSideException，UnauthorizedException，ForbiddenException异常，分别表示客户端异常（400），服务端异常（500），未授权异常（401），禁止访问异常（403），如ClientSideException定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientSideException</span> <span class="keyword">extends</span> <span class="title">BizException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;E extends Enum&lt;E&gt; &amp; BaseErrors&gt; ClientSideException(E exceptionCode, Throwable cause) &#123;</span><br><span class="line">        <span class="keyword">super</span>(HttpStatus.BAD_REQUEST, exceptionCode, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;E extends Enum&lt;E&gt; &amp; BaseErrors&gt; ClientSideException(E exceptionCode) &#123;</span><br><span class="line">        <span class="keyword">super</span>(HttpStatus.BAD_REQUEST, exceptionCode, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且提供一个异常工具类ExceptionUtil，方便不同场景使用，</p></li></ol><ul><li>rethrowClientSideException：抛出ClientSideException，将以status code 400返回客户端。由客户端引起的异常调用该方法，如参数校验失败。</li><li>rethrowUnauthorizedException： 抛出UnauthorizedException，将以status code 401返回客户端。访问未授权时调用，如token校验失败等。</li><li>rethrowForbiddenException： 抛出ForbidenException，将以status code 403返回客户端。访问被禁止时调用，如用户被禁用等。</li><li>rethrowServerSideException： 抛出ServerSideException，将以status code 500返回客户端。服务端引起的异常调用该方法，如调用第三方服务异常，数据库访问出错等。</li></ul><p>在实际使用时，分两种情况，</p><ol><li><p>不通过try/catch主动抛出异常，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (StringUtils.isEmpty(appId)) &#123;</span><br><span class="line">    LOG.warn(<span class="string">"the authorizer for site[&#123;&#125;] is not existed."</span>, templateMsgRequestDto.getSiteId());</span><br><span class="line">    ExceptionUtil.rethrowClientSideException(ErrorCodeEnum.authorizer_notexist);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过try/catch异常重新抛出（注意：可预知的异常，需要给客户端返回某种提示信息的，必须通过该方式重新抛出。否则将返回统一的code 500,提示“抱歉，服务出错了，请稍后重试”的提示信息）如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    String result = wxOpenService.getWxOpenComponentService().getWxMpServiceByAppid(appId).getTemplateMsgService().sendTemplateMsg(templateMessage);</span><br><span class="line">    LOG.info(<span class="string">"result: &#123;&#125;"</span>, result);</span><br><span class="line">&#125; <span class="keyword">catch</span> (WxErrorException wxException) &#123;</span><br><span class="line">    <span class="comment">//这里不需要打日志，会统一在异常处理里记录日志</span></span><br><span class="line">    ExceptionUtil.rethrowServerSideException(ExceptionCodeEnum.templatemsg_fail, wxException);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>具体实现参考源码： <a href="https://github.com/ronwxy/base-spring-boot/tree/master/spring-boot-autoconfigure/src/main/java/cn/jboost/springboot/autoconfig/error" target="_blank" rel="noopener">https://github.com/ronwxy/base-spring-boot/tree/master/spring-boot-autoconfigure/src/main/java/cn/jboost/springboot/autoconfig/error</a><br>另附demo源码：<a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-error" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-error</a></p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><p>本文写完感觉信息量有点多，对于不具备一定基础的人来说理解可能有点难度。如果有任何疑问，欢迎交流。后续有需要的话也可以针对某个环节再进行细化补充。本文所提的规范不一定是最好的实践，但规范或流程的管理，都是遵循先僵化，后优化，再固化的步骤，先解决有没有的问题，再解决好不好的问题。<br></br><br>我的个人博客地址：<a href="http://blog.jboost.cn">http://blog.jboost.cn</a><br>我的github地址：<a href="https://github.com/ronwxy" target="_blank" rel="noopener">https://github.com/ronwxy</a><br>我的微信公众号：jboost-ksxy （一个不只有技术干货的公众号，欢迎关注）<br>———————————————————————————————————————————————————————————————<br><img src="/assets/qrcode-05.jpg" alt="微信公众号"><br>欢迎关注我的微信公众号，及时获取最新分享</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用nvm来管理Node多版本</title>
      <link href="/use-nvm.html"/>
      <url>/use-nvm.html</url>
      
        <content type="html"><![CDATA[<p>最近在为前端配置jenkins持续集成环境时，在运行<code>npm install</code>下载依赖包的时候，速度极慢，而本地很快。对比node版本，一个v10.15.3，速度很快，一个v8.10.0，速度极慢。两者都设置了国内镜像。升级node能否解决问题？有没有工具支持node多版本管理，像python的anaconda一样？答案是有，叫nvm —— node version manager。</p><a id="more"></a><p>项目地址： <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">https://github.com/nvm-sh/nvm</a></p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>linux下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载并执行安装</span></span><br><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装后执行<span class="built_in">source</span>使其生效</span></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><blockquote><p>为了加速node的下载，可在~/.bashrc中添加 <code>export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node</code></p></blockquote><p>windows：参考 <a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases</a></p><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h3><ol><li>列出所有node版本<br><code>nvm ls-remote</code></li></ol><ol start="2"><li><p>只列出长期支持版本，一般生产环境使用long term support版<br><code>nvm ls-remote --lts</code></p></li><li><p>安装指定版本<br><code>nvm install v10.15.3</code></p></li><li><p>安装完后即可查看安装的node及npm的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v  </span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li><li><p>查看已安装版本<br><code>nvm ls</code></p></li><li><p>使用指定的版本，重连bash即失效<br><code>nvm use 10.15.3</code></p></li><li><p>设置默认，重连也生效<br><code>nvm alias default 10.15.3</code></p></li></ol><blockquote><p>配置npm国内淘宝镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org --global</span><br><span class="line"></span><br><span class="line">npm config set disturl https://npm.taobao.org/dist --global</span><br></pre></td></tr></table></figure><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h3><p>nvm可在一个系统中非常便捷地管理多个node版本，并能自由切换使用哪个版本，方便需要多版本并存的场景。</p></br>我的个人博客地址：http://blog.jboost.cn       我的github地址：https://github.com/ronwxy    我的微信公众号：jboost-ksxy————————————————————————————————————————![微信公众号](/assets/qrcode-05.jpg)   欢迎关注我的微信公众号，及时获取最新分享]]></content>
      
      
      <categories>
          
          <category> 高效实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redission-tomcat 快速实现从单机部署到多机部署</title>
      <link href="/session-redis.html"/>
      <url>/session-redis.html</url>
      
        <content type="html"><![CDATA[<p>一些项目初期出于简单快速，都是做单机开发与部署，但是随着业务的扩展或对可用性要求的提高，单机环境已不满足需求。单机部署往多机部署切换，其中可能存在的一个重要环节就是session的共享（如果一开始就是基于token的认证则可忽略）。本文介绍一个基于redis的tomcat session管理开源项目：redission-tomcat，可无代码侵入式地快速实现session共享。</p><a id="more"></a><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>redisson是与jedis类似的一个redis客户端，其功能比jedis要更丰富一些。redission-tomcat是一个基于redis的tomcat session管理器项目，项目地址：<a href="https://github.com/redisson/redisson/tree/master/redisson-tomcat" target="_blank" rel="noopener">https://github.com/redisson/redisson/tree/master/redisson-tomcat</a> 。相比于其它实现，该项目的存储更为高效，写操作也更为优化。每一个session参数是在调用<code>HttpSession.setAttribute</code>时写入redis的，其它方案却一般是每次都将整个session进行序列化后写入。</p><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h3><ol><li><p>将<a href="https://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=org.redisson&a=redisson-all&v=3.11.0&e=jar" target="_blank" rel="noopener">redisson-all-3.11.0.jar</a>，<a href="https://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=org.redisson&a=redisson-tomcat-8&v=3.11.0&e=jar" target="_blank" rel="noopener">redisson-tomcat-8-3.11.0.jar</a>（针对tomcat8，其它版本可在上述项目地址页面找到下载链接）两个jar包下载放到tomcat的lib目录下。</p></li><li><p>在tomcat conf目录下的context.xml文件中添加如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">"org.redisson.tomcat.RedissonSessionManager"</span></span></span><br><span class="line"><span class="tag"><span class="attr">configPath</span>=<span class="string">"$&#123;catalina.base&#125;/conf/redisson.conf"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">readMode</span>=<span class="string">"MEMORY"</span> <span class="attr">updateMode</span>=<span class="string">"AFTER_REQUEST"</span> <span class="attr">broadcastSessionEvents</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>其中</p></li></ol><ul><li>configPath：指向Redisson的json或yaml格式的配置文件，第3步中给出。</li><li>readMode：session属性的读取模式。可取值 1. MEMORY, 该模式会将session属性同时保存到本地tomcat session与redis中，后续的session更新通过redis事件传播到本地tomcat session；2. REDIS，只将session属性保存到redis中。默认为REDIS。</li><li>updateMode：session属性的更新模式。可取值 1. DEFAULT，session属性只通过<code>setAttribute</code>方法保存到redis中；2. AFTER_REQUEST，在每次请求之后，将所有session属性保存至redis。默认为DEFAULT。</li><li>broadcastSessionEvents：如果设置为true，则sessionCreated与sessionDestroyed事件将会被广播到所有tomcat实例，并使所有注册的HttpSessionListeners监听器被触发。默认为false。</li></ul><ol start="3"><li>在tomcat conf目录下新增配置文件redisson.conf，内容如下<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"singleServerConfig"</span>:&#123;</span><br><span class="line">    <span class="attr">"idleConnectionTimeout"</span>:<span class="number">10000</span>,</span><br><span class="line">    <span class="attr">"connectTimeout"</span>:<span class="number">10000</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">3000</span>,</span><br><span class="line">    <span class="attr">"retryAttempts"</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">"retryInterval"</span>:<span class="number">1500</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"123456"</span>,</span><br><span class="line">    <span class="attr">"subscriptionsPerConnection"</span>:<span class="number">5</span>,</span><br><span class="line">    <span class="attr">"clientName"</span>:<span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"address"</span>: <span class="string">"redis://127.0.0.1:6379"</span>,</span><br><span class="line">    <span class="attr">"subscriptionConnectionMinimumIdleSize"</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">"subscriptionConnectionPoolSize"</span>:<span class="number">50</span>,</span><br><span class="line">    <span class="attr">"connectionMinimumIdleSize"</span>:<span class="number">24</span>,</span><br><span class="line">    <span class="attr">"connectionPoolSize"</span>:<span class="number">64</span>,</span><br><span class="line">    <span class="attr">"database"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">"dnsMonitoringInterval"</span>:<span class="number">5000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"threads"</span>:<span class="number">16</span>,</span><br><span class="line">  <span class="attr">"nettyThreads"</span>:<span class="number">32</span>,</span><br><span class="line">  <span class="attr">"codec"</span>:&#123;</span><br><span class="line">    <span class="attr">"class"</span>:<span class="string">"org.redisson.codec.FstCodec"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"transportMode"</span>:<span class="string">"NIO"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>以上为单机模式redis环境配置，其中password，address修改为自己的值。如果是集群模式，则配置文件为<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sentinelServersConfig"</span>:&#123;</span><br><span class="line">    <span class="attr">"idleConnectionTimeout"</span>:<span class="number">10000</span>,</span><br><span class="line">    <span class="attr">"connectTimeout"</span>:<span class="number">10000</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">3000</span>,</span><br><span class="line">    <span class="attr">"retryAttempts"</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">"retryInterval"</span>:<span class="number">1500</span>,</span><br><span class="line">    <span class="attr">"failedSlaveReconnectionInterval"</span>:<span class="number">3000</span>,</span><br><span class="line">    <span class="attr">"failedSlaveCheckInterval"</span>:<span class="number">60000</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"subscriptionsPerConnection"</span>:<span class="number">5</span>,</span><br><span class="line">    <span class="attr">"clientName"</span>:<span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"loadBalancer"</span>:&#123;</span><br><span class="line">      <span class="attr">"class"</span>:<span class="string">"org.redisson.connection.balancer.RoundRobinLoadBalancer"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"subscriptionConnectionMinimumIdleSize"</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">"subscriptionConnectionPoolSize"</span>:<span class="number">50</span>,</span><br><span class="line">    <span class="attr">"slaveConnectionMinimumIdleSize"</span>:<span class="number">24</span>,</span><br><span class="line">    <span class="attr">"slaveConnectionPoolSize"</span>:<span class="number">64</span>,</span><br><span class="line">    <span class="attr">"masterConnectionMinimumIdleSize"</span>:<span class="number">24</span>,</span><br><span class="line">    <span class="attr">"masterConnectionPoolSize"</span>:<span class="number">64</span>,</span><br><span class="line">    <span class="attr">"readMode"</span>:<span class="string">"SLAVE"</span>,</span><br><span class="line">    <span class="attr">"subscriptionMode"</span>:<span class="string">"SLAVE"</span>,</span><br><span class="line">    <span class="attr">"sentinelAddresses"</span>:[</span><br><span class="line">      <span class="string">"redis://127.0.0.1:26379"</span>,</span><br><span class="line">      <span class="string">"redis://127.0.0.1:26389"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"masterName"</span>:<span class="string">"mymaster"</span>,</span><br><span class="line">    <span class="attr">"database"</span>:<span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"threads"</span>:<span class="number">16</span>,</span><br><span class="line">  <span class="attr">"nettyThreads"</span>:<span class="number">32</span>,</span><br><span class="line">  <span class="attr">"codec"</span>:&#123;</span><br><span class="line">    <span class="attr">"class"</span>:<span class="string">"org.redisson.codec.FstCodec"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"transportMode"</span>:<span class="string">"NIO"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>我们可以使用nginx来实现负载均衡，参考配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">upstream cnserver&#123;</span><br><span class="line">  server 127.0.0.1:8080 weight&#x3D;2 fail_timeout&#x3D;10s max_fails&#x3D;1;</span><br><span class="line">  server 127.0.0.1:8081 weight&#x3D;2 fail_timeout&#x3D;10s max_fails&#x3D;1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name localhost;</span><br><span class="line">  index index.html index.htm;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  location &#x2F;rest&#x2F; &#123;</span><br><span class="line">    index index.html;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;cnserver&#x2F;rest&#x2F;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>以上即为使用redisson-tomcat来实现单机部署到多机部署的所有配置。</li></ol><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h3><p>技术架构都是随着业务的发展而不断演进。在业务发展初期，用户量、业务复杂度都相对较低，为了实现快速上线验证，往往采用简单单一的架构。许多项目可能还没来得及进行架构演进升级就GG了，而有幸继续成长的项目必然会随着业务的扩张不断优化与升级。本文介绍的redisson-tomcat可帮助单机项目快速切换到多机支持，当然只是在session管理环节。如果涉及到其它如文件上传，定时任务等分布式支持，则要另做相应调整了。</p></br>我的个人博客地址：http://blog.jboost.cn        我的github地址：https://github.com/ronwxy    我的微信公众号：jboost-ksxy （一个不只有实战干货的技术公众号， 欢迎关注）———————————————————————————————————————————————————————————————![微信公众号](/assets/qrcode-05.jpg)   欢迎关注我的微信公众号，及时获取最新分享]]></content>
      
      
      <categories>
          
          <category> 高效实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> session </tag>
            
            <tag> tomcat </tag>
            
            <tag> redission </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swagger api文档集中化注册管理</title>
      <link href="/swagger-register.html"/>
      <url>/swagger-register.html</url>
      
        <content type="html"><![CDATA[<p>接口文档是前后端开发对接时很重要的一个组件。手动编写接口文档既费时，又存在文档不能随代码及时更新的问题，因此产生了像swagger这样的自动生成接口文档的框架。swagger文档一般是随项目代码生成与更新，访问地址也是基于项目地址，因此对项目数不多的团队还好。如果团队的项目很多，比如采用微服务架构的团队，动则几十甚至上百个服务项目，那就意味着前端开发人员需要记住几十甚至上百个swagger文档地址，那就很不友好了。目前貌似还没有较流行的API文档集中化管理项目（也或者是我没找到），因此花了点时间自己集成了一个，介绍如下。</p><a id="more"></a><h3 id="1-swagger-bootstrap-ui项目"><a href="#1-swagger-bootstrap-ui项目" class="headerlink" title="1. swagger-bootstrap-ui项目"></a>1. swagger-bootstrap-ui项目</h3><p>该项目是github上的一个开源项目（<a href="https://github.com/xiaoymin/swagger-bootstrap-ui" target="_blank" rel="noopener">https://github.com/xiaoymin/swagger-bootstrap-ui</a> ），对swagger ui做了增强，功能整体看起来要丰富一些。来看看效果，</p><p><img src="/assets/swaggerui.png" alt="swagger-bootstrap-ui"></p><p>该项目的调试url地址原本是基于自身服务的，我将它改为了注册服务的url地址，以支持注册服务的接口调试。调整后的源码地址： <a href="https://github.com/ronwxy/swagger-bootstrap-ui" target="_blank" rel="noopener">https://github.com/ronwxy/swagger-bootstrap-ui</a></p><h3 id="2-swagger-api注册服务"><a href="#2-swagger-api注册服务" class="headerlink" title="2. swagger api注册服务"></a>2. swagger api注册服务</h3><p>该项目集成了swagger-bootstrap-ui，并提供了swagger api注册接口，接受所有提供了有效配置的服务项目注册，让注册的服务在一个页面上可统一查看，再也不用记太多文档地址了。</p><p><img src="/assets/swaggerui2.png" alt="swagger-bootstrap-ui2"></p><p>启动注册服务后，访问 <a href="http://localhost:11090/doc.html" target="_blank" rel="noopener">http://localhost:11090/doc.html</a> 打开文档页面。如上图，可通过下拉列表来选择不同项目，加载项目的接口文档查看或调试。<br>项目地址： <a href="https://github.com/ronwxy/swagger-register" target="_blank" rel="noopener">https://github.com/ronwxy/swagger-register</a> （如果觉得有用，不要吝啬你的star，反正又不要钱，O(∩_∩)O）</p><h3 id="3-服务端配置"><a href="#3-服务端配置" class="headerlink" title="3. 服务端配置"></a>3. 服务端配置</h3><p>在业务服务端，需要提供一些配置。<br>首先，需要配置一些Bean，如下提供了一个配置类（这里只列出了主要部分，完整代码参考： <a href="https://github.com/ronwxy/base-spring-boot）" target="_blank" rel="noopener">https://github.com/ronwxy/base-spring-boot）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2AutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">restApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ParameterBuilder builder = <span class="keyword">new</span> ParameterBuilder();</span><br><span class="line">        builder.name(<span class="string">"x-auth-token"</span>).description(<span class="string">"授权token"</span>)</span><br><span class="line">                .modelRef(<span class="keyword">new</span> ModelRef(<span class="string">"string"</span>))</span><br><span class="line">                .parameterType(<span class="string">"header"</span>)</span><br><span class="line">                .required(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(groupName)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(apisBasePackage))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                .globalOperationParameters(Collections.singletonList(builder.build()))</span><br><span class="line">                .apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Profile</span>(&#123;<span class="string">"dev"</span>&#125;)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommandLineRunner <span class="title">swaggerRegistar</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SwaggerInfoRegistar(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * use to register swagger api info url to swagger api registry;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> liubo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerInfoRegistar</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            String url = buildLocalSwaggerDocsUrl();</span><br><span class="line">            registerLocalSwaggerUrl(url);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * register the v2/api-docs url</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerLocalSwaggerUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">            RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">            restTemplate.getMessageConverters().add(<span class="keyword">new</span> FormHttpMessageConverter());</span><br><span class="line">            MultiValueMap&lt;String, Object&gt; body = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">            body.add(<span class="string">"project"</span>, getApiTitle());</span><br><span class="line">            body.add(<span class="string">"url"</span>, url);</span><br><span class="line">            ResponseEntity&lt;Map&gt; re = restTemplate.postForEntity(getSwaggerRegisterUrl(), body, Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (HttpStatus.OK.equals(re.getStatusCode())) &#123;</span><br><span class="line">                logger.info(<span class="string">"swagger api registered success to &#123;&#125;"</span>, getSwaggerRegisterUrl());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.warn(<span class="string">"swagger api registered failed [&#123;&#125;]"</span>, re.getBody().get(<span class="string">"msg"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类完成了swagger的基本配置，同时将swagger的/v2/api-docs地址注册到了步骤2中介绍的注册服务。</p><p>然后，因为要从注册服务端调用该业务服务的接口进行调试，存在跨域，因此服务需要做跨域支持，配置文件中添加如下定义，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"corsFilterRegistrationBean"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">corsFilterRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    UrlBasedCorsConfigurationSource corsConfigurationSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line"></span><br><span class="line">    CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">    corsConfiguration.applyPermitDefaultValues();</span><br><span class="line">    corsConfiguration.setAllowedMethods(Arrays.asList(CorsConfiguration.ALL));</span><br><span class="line">    corsConfiguration.addExposedHeader(HttpHeaders.DATE);</span><br><span class="line"></span><br><span class="line">    corsConfigurationSource.registerCorsConfiguration(<span class="string">"/**"</span>, corsConfiguration);</span><br><span class="line"></span><br><span class="line">    CorsFilter corsFilter = <span class="keyword">new</span> CorsFilter(corsConfigurationSource);</span><br><span class="line">    FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    filterRegistrationBean.setFilter(corsFilter);</span><br><span class="line">    filterRegistrationBean.setOrder(Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">    filterRegistrationBean.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在属性配置文件application.yml中配置一些必要的属性，</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger:</span></span><br><span class="line">  <span class="attr">api-title:</span> <span class="string">Demo标题</span>  <span class="comment">#会展示在下拉列表框中，一般写项目名称</span></span><br><span class="line">  <span class="attr">api-description:</span>  <span class="string">Demo描述，集中注册</span></span><br><span class="line">  <span class="attr">group-name:</span> <span class="string">Demo项目</span></span><br><span class="line">  <span class="attr">apis-base-package:</span> <span class="string">cn.jboost.springboot.swagger</span> <span class="comment"># API类所在包名</span></span><br><span class="line">  <span class="attr">swagger-registry-path:</span> <span class="string">http://localhost:11090/swagger/register</span>  <span class="comment">#就是2中注册服务的注册接口地址</span></span><br></pre></td></tr></table></figure><p>配置完后， 就可以像一般项目一样编写接口类，加swagger注解。项目启动时， 会自动向注册服务完成注册，刷新注册服务的文档页面即可在下拉列表看到。</p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><p>本文介绍了一个基于swagger ui增强版项目swagger-bootstrap-ui的接口文档集中化管理实现。采用该实现，将所有swagger在线接口文档集中管理，有效提高前后端对接效率。</p><p>如果觉得本文有用，欢迎转发、推荐。</p></br>我的个人博客地址：http://blog.jboost.cn        我的github地址：https://github.com/ronwxy    我的微信公众号：jboost-ksxy （欢迎关注，及时获取技术干货分享）———————————————————————————————————————————————————————————————![微信公众号](/assets/qrcode-05.jpg)   欢迎关注我的微信公众号，及时获取最新分享]]></content>
      
      
      <categories>
          
          <category> 高效实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot从入门到实战（八）：集成AOPLog来记录接口访问日志</title>
      <link href="/springboot-aoplog.html"/>
      <url>/springboot-aoplog.html</url>
      
        <content type="html"><![CDATA[<p>日志是一个Web项目中必不可少的部分，借助它我们可以做许多事情，比如问题排查、访问统计、监控告警等。一般通过引入slf4j的一些实现框架来做日志功能，如log4j,logback,log4j2，其性能也是依次增强。在springboot中，默认使用的框架是logback。我们经常需要在方法开头或结尾加日志记录传入参数或返回结果，以此来复现当时的请求情况。但是手动添加日志，不仅繁琐重复，也影响代码的美观简洁。本文引入一个基于AOP实现的日志框架，并通过spring-boot-starter的方式完成集成。</p><p>原文地址：<a href="http://blog.jboost.cn/springboot-aoplog.html">http://blog.jboost.cn/springboot-aoplog.html</a></p><a id="more"></a><h3 id="1-aop-logging项目"><a href="#1-aop-logging项目" class="headerlink" title="1. aop-logging项目"></a>1. aop-logging项目</h3><p>项目地址： <a href="https://github.com/ronwxy/aop-logging" target="_blank" rel="noopener">https://github.com/ronwxy/aop-logging</a><br>该项目基于 <a href="https://github.com/nickvl/aop-logging.git" target="_blank" rel="noopener">https://github.com/nickvl/aop-logging.git</a> ， 在其基础上添加了ReqId来串联某次客户端请求（参考<code>com.github.nickvl.xspring.core.log.aop.ReqIdFilter</code>）, 添加了方法执行时长（参考<code>com.github.nickvl.xspring.core.log.aop.AOPLogger.logTheMethod</code>方法中elapsedTime）。</p><p>该项目提供了基于注解的AOP日志功能。根据不同的日志级别，提供的注解有LogTrace,LogDebug,LogInfo,LogWarn,LogError,LogFatal,LogException，可修饰于类（等同于该类内所有方法上添加）与方法上，前面六个分别表示在不同日志级别下记录方法被调用的日志，LogException表示在方法抛出异常时，记录相应日志。这些注解都提供了一个LogPoint枚举类型的属性value，取值{IN,OUT,BOTH}，分别表示在方法调用入口、方法调用返回前，以及包含两者的位置打印对应日志，默认为BOTH。</p><h3 id="2-集成"><a href="#2-集成" class="headerlink" title="2. 集成"></a>2. 集成</h3><p>可以通过基于xml或基于java配置的方式来集成AOP日志功能，我这里基于java配置（基于xml的方式参考源码README文件）并且通过spring-boot-starter的形式进行封装（源码地址： <a href="https://github.com/ronwxy/base-spring-boot" target="_blank" rel="noopener">https://github.com/ronwxy/base-spring-boot</a> ），避免每个项目都需要配置。自动配置类如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(AOPLogger<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(<span class="title">AOPLogger</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AopLoggerAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> SKIP_NULL_FIELDS = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; EXCLUDE_SECURE_FIELD_NAMES = Collections.emptySet();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AOPLogger <span class="title">aopLogger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">AOPLogger aopLogger = <span class="keyword">new</span> AOPLogger();</span><br><span class="line">aopLogger.setLogAdapter(<span class="keyword">new</span> UniversalLogAdapter(SKIP_NULL_FIELDS, EXCLUDE_SECURE_FIELD_NAMES));</span><br><span class="line"><span class="keyword">return</span> aopLogger;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 注册一个过滤器，用来生成一个reqId，标记一次请求，从而将本次请求所产生的日志串联起来</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">reqIdFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ReqIdFilter reqIdFilter = <span class="keyword">new</span> ReqIdFilter();</span><br><span class="line">FilterRegistrationBean registrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">registrationBean.setFilter(reqIdFilter);</span><br><span class="line">List&lt;String&gt; urlPatterns = Collections.singletonList(<span class="string">"/*"</span>);</span><br><span class="line">registrationBean.setUrlPatterns(urlPatterns);</span><br><span class="line">registrationBean.setOrder(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将基础框架base-spring-boot通过<code>mvn clean install</code>进行本地安装后，即可在项目中通过依赖进行引入（基础框架中已在spring-boot-parent中引入，直接继承亦可），如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jboost.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aoplog-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><p>引入依赖之后，我们再定义一个日志配置文件logback-spring.xml，为了后面方便地将日志导入ELK做集中的日志分析管理，该配置文件中将日志以json格式输出，并根据日志级别分别写入debug.log,info.log,warn.log,error.log以及interface.log（专用于接口访问日志），配置示例如下（完整配置参考： <a href="https://github.com/ronwxy/springboot-demos/blob/master/springboot-aoplog/src/main/resources/logback-spring.xml）" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/blob/master/springboot-aoplog/src/main/resources/logback-spring.xml）</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"interfaceLog"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;logPath&#125;/elk/interface.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">providers</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                        &#123;</span><br><span class="line">                        "project": "$&#123;projectName&#125;",</span><br><span class="line">                        "timestamp": "%date&#123;\"yyyy-MM-dd'T'HH:mm:ss,SSSZ\"&#125;",</span><br><span class="line">                        "log_level": "%level",</span><br><span class="line">                        "thread": "%thread",</span><br><span class="line">                        "class_name": "%X&#123;callingClass&#125;",</span><br><span class="line">                        "class_method":"%X&#123;callingMethod&#125;",</span><br><span class="line">                        "line_number": null,</span><br><span class="line">                        "message": "%message",</span><br><span class="line">                        "stack_trace": "%exception&#123;5&#125;",</span><br><span class="line">                        "req_id": "%X&#123;reqId&#125;",</span><br><span class="line">                        "elapsed_time": "#asLong&#123;%X&#123;elapsedTime&#125;&#125;"</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">providers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;logPath&#125;/bak/interface.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>1GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了将该日志配置文件可以不经修改地达到复用，将一些参数配置外置了，故需在配置文件applicaiton.yml中配置如下参数</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logger:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">D:\logs</span> <span class="comment">#默认当前项目路径下的logs目录</span></span><br><span class="line">  <span class="attr">level:</span> <span class="string">info</span> <span class="comment"># 默认info</span></span><br><span class="line">  <span class="attr">apiPackage:</span> <span class="string">cn.jboost.springboot.aoplog.controller</span> <span class="comment">#必须配置, api接口类所在包</span></span><br><span class="line">  <span class="attr">rootPackage:</span> <span class="string">cn.jboost.springboot</span> <span class="comment">#必须配置，项目根包，记录该包内各类通过slf4j输出的日志</span></span><br></pre></td></tr></table></figure><p>最后，直接在需要记录访问日志的接口类上加注解@LogInfo就行了，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"test"</span>)</span><br><span class="line"><span class="meta">@LogInfo</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AoplogTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(@RequestParam String user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hi "</span> + user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：在pom.xml中默认添加的spring-boot-maven-plugin下需要添加repackage的goal才能自动生成日志目录与日志文件，如下所示</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动程序，调用@LogInfo标注的接口类下的API时，可以看到控制台有打印接口访问日志，如执行demo程序（源码： <a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-aoplog" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-aoplog</a> ），调用  <a href="http://localhost:8080/test?user=jboost" target="_blank" rel="noopener">http://localhost:8080/test?user=jboost</a> 时，控制台打印日志如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[2019-06-27 14:29:59] [INFO ] [http-nio-8080-exec-1] [cn.jboost.springboot.aoplog.controller.AoplogTestController:184] --calling: test(user=jboost)</span><br><span class="line">[2019-06-27 14:29:59] [INFO ] [http-nio-8080-exec-1] [cn.jboost.springboot.aoplog.controller.AoplogTestController:189] --returning: test(1 arguments):Hi jboost</span><br></pre></td></tr></table></figure><p>日志文件interface.log中打印日志如下，（其中req_id在本次请求的所有日志都相同，这样就可以将一次请求的所有日志串联起来，便于分析与定位问题；elapsed_time标明了方法执行时长，可用于接口性能监测）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"project"</span>:<span class="string">"aoplog-test"</span>,<span class="attr">"timestamp"</span>:<span class="string">"2019-06-27T14:29:59,030+0800"</span>,<span class="attr">"log_level"</span>:<span class="string">"INFO"</span>,<span class="attr">"thread"</span>:<span class="string">"http-nio-8080-exec-1"</span>,<span class="attr">"class_name"</span>:<span class="string">"cn.jboost.springboot.aoplog.controller.AoplogTestController"</span>,<span class="attr">"class_method"</span>:<span class="string">"test"</span>,<span class="attr">"line_number"</span>:<span class="literal">null</span>,<span class="attr">"message"</span>:<span class="string">"calling: test(user=jboost)"</span>,<span class="attr">"stack_trace"</span>:<span class="string">""</span>,<span class="attr">"req_id"</span>:<span class="string">"5d146267aa147904bc014e71"</span>,<span class="attr">"elapsed_time"</span>:<span class="literal">null</span>&#125;</span><br><span class="line">&#123;<span class="attr">"project"</span>:<span class="string">"aoplog-test"</span>,<span class="attr">"timestamp"</span>:<span class="string">"2019-06-27T14:29:59,036+0800"</span>,<span class="attr">"log_level"</span>:<span class="string">"INFO"</span>,<span class="attr">"thread"</span>:<span class="string">"http-nio-8080-exec-1"</span>,<span class="attr">"class_name"</span>:<span class="string">"cn.jboost.springboot.aoplog.controller.AoplogTestController"</span>,<span class="attr">"class_method"</span>:<span class="string">"test"</span>,<span class="attr">"line_number"</span>:<span class="literal">null</span>,<span class="attr">"message"</span>:<span class="string">"returning: test(1 arguments):Hi jboost"</span>,<span class="attr">"stack_trace"</span>:<span class="string">""</span>,<span class="attr">"req_id"</span>:<span class="string">"5d146267aa147904bc014e71"</span>,<span class="attr">"elapsed_time"</span>:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><p>Web项目中经常需要通过查看接口请求及返回参数来定位问题，手动编写代码打印显得繁琐而重复。使用aop-logging通过简单的注解即可实现接口日志自动打印。本文介绍的方案与日志配置模板可直接用于实际项目开发。当然，注解不仅可用于Controller层，也可以用于Service等其它层，但一般Controller层加上即可，避免日志打印过多。</p><p>本文示例项目源码地址：<a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-aoplog" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-aoplog</a><br></br><br>我的个人博客地址：<a href="http://blog.jboost.cn">http://blog.jboost.cn</a><br>我的github地址：<a href="https://github.com/ronwxy" target="_blank" rel="noopener">https://github.com/ronwxy</a><br>我的微信公众号：jboost-ksxy （欢迎关注，及时获取技术干货分享）<br>——————————————————————————————————</p><p><img src="/assets/qrcode-05.jpg" alt="微信公众号"><br>欢迎关注我的微信公众号，及时获取最新分享</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
            <tag> logback </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>案例解析：springboot自动配置未生效问题定位（条件断点）</title>
      <link href="/issue-conditiontrack.html"/>
      <url>/issue-conditiontrack.html</url>
      
        <content type="html"><![CDATA[<p>Spring Boot在为开发人员提供更高层次的封装，进而提高开发效率的同时，也为出现问题时如何进行定位带来了一定复杂性与难度。但Spring Boot同时又提供了一些诊断工具来辅助开发与分析，如spring-boot-starter-actuator。本文分享一个基于actuator与IDEA条件断点来定位自动配置未生效的案例。望对类似问题分析与处理提供参考。</p><a id="more"></a><h3 id="问题确认"><a href="#问题确认" class="headerlink" title="问题确认"></a>问题确认</h3><p>在前文介绍的 <a href="/springboot-tkmapper.html">Spring Boot从入门到实战：整合通用Mapper简化单表操作</a> 中，我们对druid连接池做了自动配置，并且注入了druid的监控统计功能，如下</p><p><img src="/assets/statviewservlet.png" alt="druidstat"></p><p>但本地运行后通过 <a href="http://localhost:8080/druid/index.html" target="_blank" rel="noopener">http://localhost:8080/druid/index.html</a> 访问时却出现错误，通过浏览器的开发者工具查看该请求返回404，推测上述代码中定义的<code>StatViewServlet</code>未注入成功。我们用actuator来确认下是否如此。在项目中加入spring-boot-starter-actuator，并且application.yml中添加如下配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">    <span class="attr">endpoints:</span></span><br><span class="line">        <span class="attr">web:</span></span><br><span class="line">            <span class="attr">exposure:</span></span><br><span class="line">                <span class="attr">include:</span> <span class="string">"*"</span></span><br><span class="line">                <span class="attr">exclude:</span> <span class="string">beans,trace</span></span><br><span class="line">    <span class="attr">endpoint:</span></span><br><span class="line">        <span class="attr">health:</span></span><br><span class="line">            <span class="attr">show-details:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><blockquote><p>在spring-boot 2.x 版本当中，作为安全性考虑，将actuator 控件中的端口，只默认开放/health 和/info 两个端口，其他端口默认关闭， 因此需要添加如上配置。注意include的值 <code>*</code> 必须加引号，否则无法启动。</p></blockquote><p>重启程序后访问 <a href="http://localhost:8080/actuator/conditions" target="_blank" rel="noopener">http://localhost:8080/actuator/conditions</a> 确认上述两个实例化方法未满足<code>@ConditionalOnProperty</code>的条件，从而未执行生效，如图</p><p><img src="/assets/actuatorconditions.png" alt="actuator"></p><h3 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h3><p>从上面分析确认是因为条件注解 <code>@ConditionalOnProperty(prefix = &quot;spring.datasource.druid&quot;, name = &quot;druidServletSettings&quot;)</code> 未满足使方法未执行导致。那这个条件为什么没有满足呢，查看application.yml中也做了 spring.datasource.druid.druidServletSettings属性的配置。</p><p>当你无法理清头绪，确定问题原因时，那就Debug吧。查看注解<code>@ConditionalOnProperty</code>源码，找到其实现支持类<code>OnPropertyCondition</code>，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional</span>(&#123;OnPropertyCondition<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">ConditionalOnProperty</span> </span>&#123;</span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">prefix</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    String[] name() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">havingValue</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">matchIfMissing</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看<code>OnPropertyCondition</code>源码，了解它是通过<code>getMatchOutcome</code>方法来判断是否满足注解参数所指定的条件的，如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ConditionOutcome <span class="title">getMatchOutcome</span><span class="params">(ConditionContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">List&lt;AnnotationAttributes&gt; allAnnotationAttributes = annotationAttributesFromMultiValueMap(</span><br><span class="line">metadata.getAllAnnotationAttributes(</span><br><span class="line">ConditionalOnProperty<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()))</span>;</span><br><span class="line">List&lt;ConditionMessage&gt; noMatch = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;ConditionMessage&gt; match = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (AnnotationAttributes annotationAttributes : allAnnotationAttributes) &#123;</span><br><span class="line">ConditionOutcome outcome = determineOutcome(annotationAttributes,</span><br><span class="line">context.getEnvironment());</span><br><span class="line">(outcome.isMatch() ? match : noMatch).add(outcome.getConditionMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!noMatch.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> ConditionOutcome.noMatch(ConditionMessage.of(noMatch));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ConditionOutcome.match(ConditionMessage.of(match));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用<code>determineOutcome</code>处打断点，调试什么原因导致条件未满足，但是这里是一个for循环，如果for元素过多的话，将可能需要断点阻断很多次才能找到你想要查看的那个元素。所幸IDEA提供了不同类型的断点来处理这类问题，前面 <a href="/issue-errortrack.html">案例解析：使用IDEA异常断点来定位java.lang.ArrayStoreException的问题</a> 我们介绍了异常断点的使用。这里介绍用条件断点来处理这类循环块中的debug问题。</p><p>在上述代码for循环中调用<code>determineOutcome</code>行打断点，并在断点上右键，弹出如下窗口</p><p><img src="/assets/conditionbreak.png" alt="条件断点"></p><p>图中Condition框即可输入你要指定的条件，可以直接写java判断表达式代码，并引用该行代码处能访问的变量，如这里我们输入 <code>annotationAttributes.get(&quot;name&quot;).equals(&quot;druidServletSettings&quot;)</code>，然后点击Debug窗口的“Resume Program (F9)”按钮，则在不满足指定条件时，断点处将不会被阻断，直到条件满足，这样就能很容易定位到我们想要查看的元素。（当然这里<code>allAnnotationAttributes</code>变量其实只有一个元素，仅仅是为了演示条件变量的使用，当集合元素很多时，使用条件断点就能体会到它的方便之处）</p><h3 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h3><p>通过Debug的方式深入条件注解的判断逻辑（其中循环处可使用条件断点），最终来到如下代码片段</p><p><img src="/assets/conditonbreak3.png" alt="判断条件"></p><p>在这里是判断来自所有属性源配置的属性中，是否包含条件注解指定的属性，即<code>spring.datasource.druid.druidServletSettings</code>，由上图可见，<code>spring.datasource.druid.druidServletSettings</code>只是某些属性的前缀，并不存在完全匹配的属性，因此返回false，导致条件不满足。回看注解@ConditionOnProperty的javadoc，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* If the property is not contained in the &#123;@link Environment&#125; at all, the</span><br><span class="line"> * &#123;@link #matchIfMissing()&#125; attribute is consulted. By default missing attributes do not</span><br><span class="line"> * match.</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * This condition cannot be reliably used for matching collection properties. For example,</span><br><span class="line"> * in the following configuration, the condition matches if &#123;@code spring.example.values&#125;</span><br><span class="line"> * is present in the &#123;@link Environment&#125; but does not match if</span><br><span class="line"> * &#123;@code spring.example.values[0]&#125; is present.</span><br><span class="line"> *</span><br></pre></td></tr></table></figure><p>当Environment中不包含该属性时，则看matchIfMissing的值，该值默认为false，如果包含该属性，则再对比属性值与havingValue的值，相等即满足，不等则不满足。并且该条件注解不能用于匹配集合类型属性。上述<code>spring.datasource.druid.druidServletSettings</code>实际上属于一个Map类型，因此不能想当然地认为该注解是只要属性集中某属性名称包含该值即满足。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>当难以定位到问题原因时，可以进行Debug，跟踪程序运行的各个步骤，当要在循环中Debug定位到某个元素时，可以用条件断点来实现。@ConditionalOnProperty注解不是存在某属性就行，还需要值相等，并且不适用于集合类型属性。<br></br><br></br><br>我的个人博客地址：<a href="http://blog.jboost.cn">http://blog.jboost.cn</a><br>我的头条空间： <a href="https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112" target="_blank" rel="noopener">https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112</a><br>我的github地址：<a href="https://github.com/ronwxy" target="_blank" rel="noopener">https://github.com/ronwxy</a><br>我的微信公众号：jboost-ksxy</p><p>———————————————————————————————————————————————————————————————</p><p><img src="/assets/qrcode-05.jpg" alt="微信公众号"><br>欢迎关注我的微信公众号，及时获取最新分享</p>]]></content>
      
      
      <categories>
          
          <category> 案例解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot从入门到实战（七）：整合通用Mapper简化单表操作</title>
      <link href="/springboot-tkmapper.html"/>
      <url>/springboot-tkmapper.html</url>
      
        <content type="html"><![CDATA[<p>数据库访问是web应用必不可少的部分。现今最常用的数据库ORM框架有Hibernate与Mybatis，Hibernate貌似在传统IT企业用的较多，而Mybatis则在互联网企业应用较多。通用Mapper（<a href="https://github.com/abel533/Mapper）" target="_blank" rel="noopener">https://github.com/abel533/Mapper）</a> 是一个基于Mybatis，将单表的增删改查通过通用方法实现，来减少SQL编写的开源框架，且也有对应开源的mapper-spring-boot-starter提供。我们在此基础上加了一些定制化的内容，以便达到更大程度的复用。</p><a id="more"></a><p>框架源码地址：<a href="https://github.com/ronwxy/base-spring-boot" target="_blank" rel="noopener">https://github.com/ronwxy/base-spring-boot</a>  （持续更新完善中，欢迎follow，star）<br>Demo源码地址：<a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-tkmapper" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-tkmapper</a></p><p><strong>在开源mapper-spring-boot-starter的基础上，增加了如下内容：</strong></p><ol><li>针对MySQL数据库与PostgreSQL数据库添加了一些Java类型与数据库类型的转换处理类，如将List、Map类型与MySQL数据库的json类型进行转换处理</li><li>对Domain、Mapper、Service、Controller各层进行了封装，将基本的增删改查功能在各层通用化</li><li>提供了基于druid连接池的自动配置</li><li>其它一些调整，如默认映射复杂类型属性（主要是List、Map类型，其它自定义类型需要自定义转换处理类），将枚举作为简单类型处理</li><li>提供了一个parent项目，将一些常用的框架进行集成，实际项目可继承parent简化依赖配置（持续更新完善）</li></ol><p>该框架可用于实际基于springboot的项目，只需简单配置数据源，即可引入druid连接池及通用mapper的功能，以及各层基本的增删改查方法。</p><p><strong>如何使用？</strong><br>下文给出使用步骤，可参考示例：<a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-tkmapper" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-tkmapper</a></p><h3 id="1-框架Maven部署安装"><a href="#1-框架Maven部署安装" class="headerlink" title="1. 框架Maven部署安装"></a>1. 框架Maven部署安装</h3><p>下载框架源码后，在项目根路径下执行<code>mvn clean install</code>可安装到本地maven库。如果需要共享，且搭了Nexus私服，则在根路径pom.xml文件中添加<code>distributionManagement</code>配置，指定Nexus仓库分发地址，使用<code>mvn clean deploy</code>安装到远程maven仓库，如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">             http://ip:port/repository/maven-releases/</span><br><span class="line">         <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">             http://ip:port/repository/maven-snapshots/</span><br><span class="line">         <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述指定的repository需要在maven的全部配置文件settings.xml中有对应账号配置(id需要一一对应)，如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">password</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">password</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-pom-xml配置"><a href="#2-pom-xml配置" class="headerlink" title="2. pom.xml配置"></a>2. pom.xml配置</h3><p>项目中引入该数据库框架有三种方式：</p><ol><li>直接引入 cn.jboost.springboot:tkmapper-spring-boot-starter（没有连接池）</li><li>直接引入 cn.jboost.springboot:druid-spring-boot-starter（druid连接池支持）</li><li>项目继承 cn.jboost.springboot:spring-boot-parent（使用的是druid连接池）</li></ol><p>三种方式的pom.xml配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#第一种方式</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jboost.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tkmapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#第二种方式</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jboost.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#第三种方式</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jboost.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根据情况引入mysql或postgresql的驱动依赖（其它数据库暂未做类型转换支持，未作测试）</p><h3 id="3-配置数据源"><a href="#3-配置数据源" class="headerlink" title="3. 配置数据源"></a>3. 配置数据源</h3><p>如果使用druid连接池，则在application.yml配置文件中，加入如下数据源配置（推荐）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span></span><br><span class="line">      <span class="comment"># 自定义配置</span></span><br><span class="line">      <span class="attr">initialSize:</span> <span class="number">2</span>  <span class="comment"># 初始化大小</span></span><br><span class="line">      <span class="attr">minIdle:</span> <span class="number">1</span>   <span class="comment"># 最小连接</span></span><br><span class="line">      <span class="attr">maxActive:</span> <span class="number">5</span> <span class="comment"># 最大连接</span></span><br><span class="line">      <span class="attr">druidServletSettings:</span></span><br><span class="line">        <span class="attr">allow:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">        <span class="attr">deny:</span></span><br><span class="line">        <span class="attr">loginUsername:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">loginPassword:</span> <span class="string">Passw0rd</span></span><br><span class="line">        <span class="attr">resetEnable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">druidFilterSettings:</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">'*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'</span></span><br><span class="line">      <span class="attr">maxWait:</span> <span class="number">60000</span>   <span class="comment"># 配置获取连接等待超时的时间</span></span><br><span class="line">      <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span> <span class="comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line">      <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span> <span class="comment"># 配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class="line">      <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="string">'x'</span></span><br><span class="line">      <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span> <span class="comment"># 打开PSCache，并且指定每个连接上PSCache的大小</span></span><br><span class="line">      <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat</span> <span class="comment">#,wall（添加wall代码里不能直接拼接sql，druid有sql注入校验） # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span></span><br><span class="line">      <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span> <span class="comment"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span></span><br><span class="line">      <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span> <span class="comment"># 合并多个DruidDataSource的监控数据</span></span><br></pre></td></tr></table></figure><p>如果不使用连接池，则配置相对简单，如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h3 id="4-定义相应domain，mapper，service，controller各层对象"><a href="#4-定义相应domain，mapper，service，controller各层对象" class="headerlink" title="4. 定义相应domain，mapper，service，controller各层对象"></a>4. 定义相应domain，mapper，service，controller各层对象</h3><p>以demo为例（demo数据库脚本见resources/schema.sql），domain定义一个User类,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"user"</span>)</span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">AutoIncrementKeyBaseDomain</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ColumnType</span>(jdbcType = JdbcType.CHAR)</span><br><span class="line">    <span class="keyword">private</span> Gender gender;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; favor;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Gender&#123;</span><br><span class="line">        M,</span><br><span class="line">        F</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要添加<code>@Table</code>注解指定数据库表名，可通过继承<code>AutoIncrementKeyBaseDomain</code>来实现自增主键，或<code>UUIDKeyBaseDomain</code>来实现UUID主键，如果自定义其它类型主键，则继承<code>BaseDomain</code>。</p><blockquote><p>该框架Service层通用方法实现<code>BaseService</code>只支持单列主键，不支持组合主键（也不建议使用组合主键）</p></blockquote><blockquote><p>框架默认对List、Map等复杂类型属性会映射到mysql的json类型或postgresql的jsonb类型，如果某个属性不需要映射，可添加@Transient注解；枚举类型需添加@ColumnType指定jdbcType。</p></blockquote><p>dao层定义<code>UserMapper</code>，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BaseMapper</code>默认实现了单表的增删改查及批量插入等功能，如需定义复杂查询，可在该接口中定义，然后通过mapper xml文件编写实现。</p><p>service层定义 <code>UserService</code>，继承了<code>BaseService</code>的通用功能（具体可查看源码），同样可在该类中自定义方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">Integer</span>, <span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createWithTransaction</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        create(user);</span><br><span class="line">        <span class="comment">//用于测试事务</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"抛出异常，让前面的数据库操作回滚"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller层定义 <code>UserController</code>，继承了<code>BaseController</code>的通用接口（具体可查看源码）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">BaseController</span>&lt;<span class="title">Integer</span>, <span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，只需要定义各层对应的接口或类，继承基础接口或类，便完成了用户基本的增删改查功能，不需要写一行具体的实现代码。</p><h3 id="5-测试、运行"><a href="#5-测试、运行" class="headerlink" title="5. 测试、运行"></a>5. 测试、运行</h3><ol><li><p>示例中提供了两个新建用户的单元测试，参考<code>SpringbootTkmapperApplicationTests</code>类</p></li><li><p>运行，在主类上直接运行，然后浏览器里打开 <a href="http://localhost:8080/user" target="_blank" rel="noopener">http://localhost:8080/user</a> 则可列出单元测试中创建的用户（其它接口参考<code>BaseController</code>实现）</p></li></ol><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h3><p>本文介绍框架基于<code>tk.mybatis:mapper-spring-boot-starter</code>做了一些自定义扩展，以更大程度地实现复用。可用于实际项目开发，使用过程中如果遇到问题，可关注公众号留言反馈。<br></br><br></br><br>我的个人博客地址：<a href="http://blog.jboost.cn">http://blog.jboost.cn</a><br>我的头条空间： <a href="https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112" target="_blank" rel="noopener">https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112</a><br>我的github地址：<a href="https://github.com/ronwxy" target="_blank" rel="noopener">https://github.com/ronwxy</a><br>我的微信公众号：jboost-ksxy</p><p>————————————————————————————————————————</p><p><img src="/assets/qrcode-05.jpg" alt="微信公众号"><br>欢迎关注我的微信公众号，及时获取最新分享</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>案例解析：使用IDEA异常断点来定位java.lang.ArrayStoreException的问题</title>
      <link href="/issue-errortrack.html"/>
      <url>/issue-errortrack.html</url>
      
        <content type="html"><![CDATA[<p>最近对 base-spring-boot （<a href="https://github.com/ronwxy/base-spring-boot）" target="_blank" rel="noopener">https://github.com/ronwxy/base-spring-boot）</a> 项目进行了升级。在将其用于应用开发中时遇到<code>java.lang.ArrayStoreException</code>的异常导致程序无法启动。平常开发过程中面对这种描述不够清楚，无法定位具体原因的问题该如何处理？本文分享通过使用IDEA异常断点来定位此类问题的方法。</p><a id="more"></a><p>启动程序时抛出如下异常，导致启动失败</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;devGlobalExceptionHandler&#39; defined in class path resource [cn&#x2F;jboost&#x2F;springboot&#x2F;autoconfig&#x2F;error&#x2F;exception&#x2F;ExceptionHandlerAutoConfiguration.class]: Post-processing of merged bean definition failed; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:570) ~[spring-beans-5.1.7.RELEASE.jar:5.1.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) ~[spring-beans-5.1.7.RELEASE.jar:5.1.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.7.RELEASE.jar:5.1.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.7.RELEASE.jar:5.1.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.7.RELEASE.jar:5.1.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.1.7.RELEASE.jar:5.1.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:843) ~[spring-beans-5.1.7.RELEASE.jar:5.1.7.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:877) ~[spring-context-5.1.7.RELEASE.jar:5.1.7.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) ~[spring-context-5.1.7.RELEASE.jar:5.1.7.RELEASE]</span><br><span class="line">at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142) ~[spring-boot-2.1.5.RELEASE.jar:2.1.5.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) [spring-boot-2.1.5.RELEASE.jar:2.1.5.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.1.5.RELEASE.jar:2.1.5.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:316) [spring-boot-2.1.5.RELEASE.jar:2.1.5.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260) [spring-boot-2.1.5.RELEASE.jar:2.1.5.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248) [spring-boot-2.1.5.RELEASE.jar:2.1.5.RELEASE]</span><br><span class="line">at com.cnbot.kindergarten.CnbotKindergartenApplication.main(CnbotKindergartenApplication.java:10) [classes&#x2F;:na]</span><br><span class="line">Caused by: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy</span><br><span class="line">at sun.reflect.annotation.AnnotationParser.parseClassArray(AnnotationParser.java:724) ~[na:1.8.0_201]</span><br><span class="line">at sun.reflect.annotation.AnnotationParser.parseArray(AnnotationParser.java:531) ~[na:1.8.0_201]</span><br><span class="line">at sun.reflect.annotation.AnnotationParser.parseMemberValue(AnnotationParser.java:355) ~[na:1.8.0_201]</span><br><span class="line">at sun.reflect.annotation.AnnotationParser.parseAnnotation2(AnnotationParser.java:286) ~[na:1.8.0_201]</span><br><span class="line">at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:120) ~[na:1.8.0_201]</span><br><span class="line">at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:72) ~[na:1.8.0_201]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>单纯看异常栈，无法定位问题原因，只能看到是在调用<code>devGlobalExceptionHandler</code>创建bean时出错，错误信息<code>java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy</code>。这属于框架内部抛出的异常，通常的设置断点Debug的方法很难定位到具体原因，可通过IDEA的异常断点来进行定位，它会在程序运行过程中出现指定异常时进行阻断。</p><h3 id="1-添加异常断点"><a href="#1-添加异常断点" class="headerlink" title="1. 添加异常断点"></a>1. 添加异常断点</h3><p>在IDEA的Debug面板中，点击“View Breakpoints”（两个重叠的红色圈按钮），如下</p><p><img src="/assets/exceptionbreak0.png" alt="Debug面板"></p><p>打开“Breakpoints”窗口，在该窗口中点击“+”按钮，选择“Java Exception Breakpoints”， 如下图</p><p><img src="/assets/exceptionbreak1.png" alt="Breakpoints"></p><p>然后在弹出的“Enter Exception Class”窗口中输入<code>ArrayStoreException</code>选中对应异常，依次点击OK，Done按钮即完成异常断点添加。</p><h3 id="2-程序debug"><a href="#2-程序debug" class="headerlink" title="2. 程序debug"></a>2. 程序debug</h3><p>开始以Debug模式启动程序。 程序运行后，在前面配置的异常出现时，将会进行阻断，如图</p><p><img src="/assets/exceptionbreak3.png" alt="程序异常阻断"></p><p>可以看到程序阻断在上图高亮的那行代码处，异常便是从这里抛出的。查看<code>parseClassValue</code>方法，可看到这里有catch<code>TypeNotPresentException</code>异常，并且包装成我们在异常栈看到的<code>TypeNotPresentExceptionProxy</code>返回。离真相很近了。</p><p>我们可以在上述catch块中添加一个断点，查看异常包装前的状态，如图</p><p><img src="/assets/exceptionbreak4.png" alt="断点定位"></p><p>重新Debug运行，将定位到上图代码处，查看异常，看到如下图所示信息</p><p><img src="/assets/exceptionbreak5.png" alt="异常信息"></p><p>该信息表示<code>org.springframework.security.access.AccessDeniedException</code>这个类不存在，导致<code>BaseWebApplicationExceptionHandler</code>类型的bean实例化时出错。这时候问题基本已经定位到了。</p><p>查看源码，在BaseWebApplicationExceptionHandler中有对AccessDeniedException的统一处理，但是spring-boot-autoconfigure所有的依赖都是optional的（不会传递依赖），而在新开发的项目中，并没有引入spring-security，因此导致<code>AccessDeniedException</code>这个类找不到而报错。目前通过去掉该部分处理解决。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>IDEA的Debug支持好几种断点类型，如前文介绍的异常断点，以及比较常用的条件断点等。当无法从异常栈信息找到问题所在时，借用这些类型的断点进行Debug，往往事情就变得简单了。</p></br></br>我的个人博客地址：http://blog.jboost.cn   我的头条空间： https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112      我的github地址：https://github.com/ronwxy    我的微信公众号：jboost-ksxy<p>————————————————————————————————————————</p><p><img src="/assets/qrcode-05.jpg" alt="微信公众号"><br>欢迎关注我的微信公众号，及时获取最新分享</p>]]></content>
      
      
      <categories>
          
          <category> 案例解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot从入门到实战（六）：整合Web项目常用功能</title>
      <link href="/springboot-base.html"/>
      <url>/springboot-base.html</url>
      
        <content type="html"><![CDATA[<p>在Web应用开发过程中，一般都涵盖一些常用功能的实现，如数据库访问、异常处理、消息队列、缓存服务、OSS服务，以及接口日志配置，接口文档生成等。如果每个项目都来一套，则既费力又难以维护。可以通过Spring Boot的Starter来将这些常用功能进行整合与集中维护，以达到开箱即用的目的。</p><a id="more"></a><p>项目基于Spring Boot 2.1.5.RELEASE 版。<br>项目地址： <a href="https://github.com/ronwxy/base-spring-boot" target="_blank" rel="noopener">https://github.com/ronwxy/base-spring-boot</a></p><p>整个项目分为如下几部分：</p><ul><li>spring-boot-autoconfigure：  具体的各功能实现，每个功能通过package的形式组织</li><li>spring-boot-commons： 一些公共的工具类或共享类</li><li>spring-boot-dependencies： 依赖的集中维护管理，集中管理各个依赖的版本号</li><li>spring-boot-parent： 提供一个基本的父项目，web服务项目可通过继承该项目创建</li><li>spring-boot-starters： 各功能的starter项目，引入相应starter即引入相应功能</li></ul><h2 id="spring-boot-dependencies-项目"><a href="#spring-boot-dependencies-项目" class="headerlink" title="spring-boot-dependencies 项目"></a>spring-boot-dependencies 项目</h2><p>该项目主要是对所有依赖进行集中定义。通过 dependencyManagement 对依赖进行声明， </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jboost.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;base-spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           ...</span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，所有依赖的版本可以集中统一管理，在其它地方引用的时候可以省去版本的声明，如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="spring-boot-autoconfigure-项目"><a href="#spring-boot-autoconfigure-项目" class="headerlink" title="spring-boot-autoconfigure 项目"></a>spring-boot-autoconfigure 项目</h2><p>该项目是各功能自动配置的具体实现，以package的形式进行组织，如 tkmapper 包下实现了通用Mapper的自动配置，error 包下实现了错误处理的自动配置， 等等。</p><p>该项目继承了spring-boot-dependencies， 在项目的 pom.xml 中，依赖部分声明类似于</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring denpendencies --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不需要再指定版本号，通过将optional设置为true，表示该依赖不会进行传递，即另外一个项目引用该项目时，optional的依赖不会被传递依赖过去。</p><p>在 resources/META-INF/spring.factories 文件中，声明了所有自动配置类， 如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line">cn.jboost.springboot.autoconfig.tkmapper.MapperAutoConfiguration,\</span><br><span class="line">cn.jboost.springboot.autoconfig.aoplog.AopLoggerAutoConfiguration,\</span><br><span class="line">cn.jboost.springboot.autoconfig.alimq.config.AliMQAutoConfiguration,\</span><br><span class="line">cn.jboost.springboot.autoconfig.qiniu.QiniuAutoConfiguration,\</span><br><span class="line">cn.jboost.springboot.autoconfig.swagger.Swagger2AutoConfiguration,\</span><br><span class="line">cn.jboost.springboot.autoconfig.druid.DruidAutoConfiguration,\</span><br><span class="line">cn.jboost.springboot.autoconfig.error.exception.ExceptionHandlerAutoConfiguration,\</span><br><span class="line">cn.jboost.springboot.autoconfig.alimns.MnsAutoConfiguration,\</span><br><span class="line">cn.jboost.springboot.autoconfig.redis.RedisClientAutoConfiguration,\</span><br><span class="line"><span class="attr">cn.jboost.springboot.autoconfig.web.CORSAutoConfiguration</span></span><br></pre></td></tr></table></figure><h2 id="spring-boot-starters-项目"><a href="#spring-boot-starters-项目" class="headerlink" title="spring-boot-starters 项目"></a>spring-boot-starters 项目</h2><p>该项目包含按功能划分的多个子项目，主要用来引入依赖以达到自动配置的依赖条件，使引入对应starter时，能让自动配置生效。如通用Mapper集成的 tkmapper-spring-boot-starter 依赖如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时在 resources/META-INF/spring.provides 里声明了该starter的用途，这里可随意编写。</p><h2 id="spring-boot-commons-项目"><a href="#spring-boot-commons-项目" class="headerlink" title="spring-boot-commons 项目"></a>spring-boot-commons 项目</h2><p>可将一些常用的工具类， 或共享类放到这个项目中。比如一些常量定义，加解密工具类等。</p><h2 id="spring-boot-parent-项目"><a href="#spring-boot-parent-项目" class="headerlink" title="spring-boot-parent 项目"></a>spring-boot-parent 项目</h2><p>该项目将Web应用需要的一些常见功能整合进来，应用项目可继承该项目进行构建，从而直接引入相应的功能。</p><p>在接下来的spring boot系列博文中，将一一详细介绍各功能的整合集成与应用。同时会不断更新与完善，以达到能直接用于生产项目的水平。</p></br></br>我的个人博客地址：http://blog.jboost.cn     我的头条空间： https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112    我的github地址：https://github.com/ronwxy    我的微信公众号：jboost-ksxy<p>———————————————————————————————————————————————————————————————</p><p><img src="/assets/qrcode-05.jpg" alt="微信公众号"><br>欢迎关注我的微信公众号，及时获取最新分享</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研发团队如何借助Gitlab来做代码review</title>
      <link href="/code-review.html"/>
      <url>/code-review.html</url>
      
        <content type="html"><![CDATA[<p>代码review是代码质量保障的手段之一，同时开发成员之间代码review也是一种技术交流的方式，虽然会占用一些时间，但对团队而言，总体是个利大于弊的事情。如何借助现有工具在团队内部形成代码review的流程与规范，是team leader或技术管理者需要考虑的问题。本文分享一种基于Gitlab代码merge流程的code review方法，以供参考与探讨。如有更好的方法，欢迎交流。</p><a id="more"></a><h2 id="1-设置成员角色"><a href="#1-设置成员角色" class="headerlink" title="1. 设置成员角色"></a>1. 设置成员角色</h2><p>首先需要对你团队的成员分配角色，在Gitlab groups里选择一个group，然后左边菜单栏点击 Members，可在 Members 页面添加或编辑成员角色，如下图所示。</p><p><img src="/assets/gitmember.png" alt="group成员"></p><p>其中角色包含如下几类：</p><ul><li>Guest：权限最小，基本查看功能</li><li>Reporter：只能查看，不能push</li><li>Developer：能push，也能merge不受限制的分支</li><li>Master：除了项目的迁移、删除等管理权限没有，其它权限基本都有</li><li>Owner：权限最大，包括项目的迁移、删除等管理权限</li></ul><p>详细权限参考： <a href="https://docs.gitlab.com/ee/user/permissions.html" target="_blank" rel="noopener">https://docs.gitlab.com/ee/user/permissions.html</a></p><p>确定团队中技术水平、经验较好的成员为Master，负责代码的review与分支的合并；其他成员为Developer，提交合并请求，接受review意见；Master之间可以互相review。</p><h2 id="2-配置分支保护"><a href="#2-配置分支保护" class="headerlink" title="2. 配置分支保护"></a>2. 配置分支保护</h2><p>在项目页面左侧菜单栏 Settings -&gt; Repository， 进入“Protected Branches”部分配置分支保护，如下图所示。</p><p><img src="/assets/protectedbranch.png" alt="分支保护"></p><p>在这里可以针对每个分支，设置允许什么角色可以merge，允许什么角色可以push，选项包括三个：“Masters”， “Developers + Masters”， “No one”。<br>这里设置成只允许master可以直接push与merge这几个常设分支的代码。（如果更严格一点，可以将“Allowed to push”设置成“No one”）</p><h2 id="3-代码review流程"><a href="#3-代码review流程" class="headerlink" title="3. 代码review流程"></a>3. 代码review流程</h2><h3 id="3-1-开发（开发者负责）"><a href="#3-1-开发（开发者负责）" class="headerlink" title="3.1. 开发（开发者负责）"></a>3.1. 开发（开发者负责）</h3><ol><li>本地切到develop分支， 拉取最新代码（相关命令如下，GUI工具操作自行查相关文档） </li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch #查看当前位于哪个分支，前面打星号即为当前分支</span><br><span class="line">git checkout develop   #切换到develop分支</span><br><span class="line">git pull  #拉取最新代码</span><br></pre></td></tr></table></figure><ol start="2"><li>从develop分支切出子分支</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature-1101  #从当前分支切出子分支，命名为"feature-1101"</span><br></pre></td></tr></table></figure><ol start="3"><li>编码、本地自测完之后，提交子分支到远程仓库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add *  #加入暂存区</span><br><span class="line">git commit -m "commit msg" #提交到本地仓库</span><br><span class="line">git push origin feature-1101 #提交到远程仓库</span><br></pre></td></tr></table></figure><h3 id="3-2-发起Merge请求（开发者负责）"><a href="#3-2-发起Merge请求（开发者负责）" class="headerlink" title="3.2 发起Merge请求（开发者负责）"></a>3.2 发起Merge请求（开发者负责）</h3><ol><li>在项目主页面，依次点击左侧“Merge Requests”（下图1），“New merge request”（下图2），打开新建Merge请求页面</li></ol><p><img src="/assets/mergerequest1.png" alt="Merge请求"></p><ol start="2"><li>在新建Merge请求页面，选择merge的源分支，及目标分支，如下图源分支为“feature-1101”，目标分支为“develop”，点击“Compare branches and continue”按钮进入对比与提交页面</li></ol><p><img src="/assets/mergerequest2.png" alt="新建Merge请求"></p><ol start="3"><li>在对比与提交页面，可以点击“Changes” tab查看本次修改（这里我为了演示，只是加了两个换行），确认无误，点击“Submit merge request”按钮，提交merge请求</li></ol><p><img src="/assets/mergesubmit.png" alt="对比修改"></p><ol start="4"><li>提交之后，将结果页面的浏览器地址发到团队即时通讯群（如钉钉），并@相应的同事申请review</li></ol><h3 id="3-3-代码Review（code-reviewer负责）"><a href="#3-3-代码Review（code-reviewer负责）" class="headerlink" title="3.3 代码Review（code reviewer负责）"></a>3.3 代码Review（code reviewer负责）</h3><ol><li>负责代码Review的同事收到申请后，点击merge请求地址，打开页面，查看“Changes”</li></ol><p><img src="/assets/merge.png" alt="对比修改"></p><p>这里可通过“Inline”单边查看，也可以通过“Side-by-side”两个版本对比查看</p><ol start="2"><li>review完成后，若无问题，则可点击”Merge”按钮完成merge，同时可删除对应的子分支“feature-1101”，<br>若有问题，则可点击“Close merge request”按钮关闭该merge请求（也可以不关闭复用该merge请求），同时通知开发者进行相应调整，重新提交代码发起merge请求（如果之前没关闭merge请求，则刷新即可看到调整）。</li></ol><h3 id="3-4-冲突解决（开发者负责）"><a href="#3-4-冲突解决（开发者负责）" class="headerlink" title="3.4 冲突解决（开发者负责）"></a>3.4 冲突解决（开发者负责）</h3><ol><li>merge的时候，可能存在代码冲突，这时，开发者可从develop分支重新拉取最新代码进行本地merge， 解决冲突后重新提交代码进行review</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git pull origin develop #在当前子分支拉取develop分支的最新代码进行本地merge</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决冲突代码</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交</span></span><br><span class="line">git add *</span><br><span class="line">git commit -m "fix merge conflict"</span><br><span class="line">git push origin feature-1101</span><br></pre></td></tr></table></figure><ol start="2"><li>自行解决不了时，寻求协助</li></ol><h2 id="4-借助阿里钉钉机器人来改善体验"><a href="#4-借助阿里钉钉机器人来改善体验" class="headerlink" title="4. 借助阿里钉钉机器人来改善体验"></a>4. 借助阿里钉钉机器人来改善体验</h2><p>前面流程中提醒code reviewer是需要开发者自己来发消息通知的，可不可以把这个流程自动化。我们可以借助Gitlab的webhook与钉钉机器人来实现。</p><ol><li>在钉钉群右上角点击“…”，打开群设置，群机器人中点击添加机器人，会显示可以添加的机器人类型，如下图所示</li></ol><p><img src="/assets/dingdingmachine.png" alt="钉钉机器人"></p><ol start="2"><li>选择Gitlab，点击添加，输入机器人名称，如“Gitlab”，点击完成即创建了一个Gitlab的钉钉机器人。回到“群机器人”窗口，将能看到刚刚创建的Gitlab机器人，如图</li></ol><p><img src="/assets/dingdingmachinelist.png" alt="钉钉机器人列表"></p><p>点击齿轮按钮，进入设置页，可看到webhook地址，点击复制，复制该机器人的webhook地址。如图</p><p><img src="/assets/dingdingwebhook.png" alt="钉钉机器人webhook"></p><ol start="3"><li>在Gitlab项目主页进入 Settings -&gt; Integrations， 将前面复制的webhook地址填入URL中，Trigger 部分选择“Merge request events”（不要勾太多，不然提醒太多就有点骚扰了），然后点击“Add webhook”就完成了。如图</li></ol><p><img src="/assets/gitlabwebhook.png" alt="GitlabWebhook"></p><ol start="4"><li>当有开发人员提交merge请求时，钉钉机器人将在钉钉群里发出通知，code reviewer点击消息里的链接即可进入页面进行code review， review完成，将分支merge之后，钉钉机器人也会发出消息（所有merge相关的事件都会发出消息）。如图</li></ol><p><img src="/assets/dingdingmachinechat.png" alt="钉钉机器人通知"></p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>团队协作，流程、规范很重要，不同的团队可能有不同的适用流程与规范。此文分享了基于Gitlab与阿里钉钉群机器人的代码review流程，希望对团队研发协作有一定参考价值，也欢迎一起探讨、交流。</p>]]></content>
      
      
      <categories>
          
          <category> teamwork </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>团队项目的Git分支如何管理</title>
      <link href="/git-branch.html"/>
      <url>/git-branch.html</url>
      
        <content type="html"><![CDATA[<p>许多公司的开发团队都采用Git来做代码版本控制。如何有效地协同开发人员之间，以及开发、测试、上线各环节的工作，可能都有各自的流程与规范。本文分享的是作者一直沿用的团队项目Git分支管理规范，希望给有缘阅读的人以参考，如果有更好的实践，也欢迎指教、讨论。</p><a id="more"></a><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>创建项目时（一般是服务型项目，工具型或辅助型项目可以简单一些），会针对不同环境创建三个常设分支：</p><ol><li>develop：开发环境的稳定分支，公共开发环境基于该分支构建。</li><li>pre-release：测试环境的稳定分支，测试环境基于该分支构建。</li><li>master：生产环境的稳定分支，生产环境基于该分支构建。仅用来发布新版本，除了从pre-release或生产环境Bug修复分支进行merge，不接受任何其它修改</li></ol><p>平时开发工作中，会根据需要由开发人员创建两类临时分支：</p><ol><li>功能（feature）分支：为了开发某个特定功能，从develop分支上面分出来的。开发完成后，要merge到develop分支。功能分支的命名，可以采用feature-*的形式命名(*为任务单号)</li><li>Bug修复（fixbug）分支：为了修复某个bug，从常设分支上面分出来的。修复完成后，再merge到对应的分支。Bug修复分支的命名，可以采用fixbug-*的形式命名（*为bug单号）</li></ol><h2 id="流程规范"><a href="#流程规范" class="headerlink" title="流程规范"></a>流程规范</h2><h3 id="正常开发流程"><a href="#正常开发流程" class="headerlink" title="正常开发流程"></a>正常开发流程</h3><ol><li>从develop分支切出一个新分支，根据是功能还是bug，命名为feature-* 或 fixbug-*。</li><li>开发者完成开发，提交分支到远程仓库。</li><li>开发者发起merge请求（可在gitlab页面“New merge request”），将新分支请求merge到develop分支，并提醒code reviewer进行review</li><li>code reviewer对代码review之后，若无问题，则接受merge请求，新分支merge到develop分支，同时可删除新建分支；若有问题，则不能进行merge，可close该请求，同时通知开发者在新分支上进行相应调整。调整完后提交代码重复review流程。</li><li>转测时，直接从当前develop分支merge到pre-release分支，重新构建测试环境完成转测。</li><li>测试完成后，从pre-release分支merge到master分支，基于master分支构建生产环境完成上线。并对master分支打tag，tag名可为v1.0.0_2019032115（即版本号_上线时间）</li></ol><p>流程示意图如下所示</p><p><img src="/assets/gitbranch1.png" alt="正常开发流程"></p><h3 id="并行开发测试环境Bug修复流程"><a href="#并行开发测试环境Bug修复流程" class="headerlink" title="并行开发测试环境Bug修复流程"></a>并行开发测试环境Bug修复流程</h3><p>并行开发（即前一个版本已经转测但未上线，后一个版本又已在开发中并部分合并到了develop分支）过程中，转测后测试环境发现的bug需要修复，但是develop分支此时又有新内容且该部分内容目前不计划转测，可以pre-release切出一个bug修复分支。完成之后需要同时merge到pre-release分支与develop分支。merge时参考“正常开发流程”。流程示意图如下</p><p><img src="/assets/gitbranch2.png" alt="并行开发测试环境Bug修复流程"></p><h3 id="生产环境Bug修复流程"><a href="#生产环境Bug修复流程" class="headerlink" title="生产环境Bug修复流程"></a>生产环境Bug修复流程</h3><p>生产环境的Bug分两种情况：</p><ol><li>紧急Bug：严重影响用户使用的为紧急Bug，需立即进行修复。如关键业务流程存在问题，影响用户正常的业务行为。</li><li>非紧急Bug或优化：非关键业务流程问题，仅影响用户使用体验，或出现频率较小等，为非紧急Bug，可规划到后续版本进行修复。</li></ol><p>非紧急Bug修复参考“正常开发流程”。</p><p>紧急Bug修复，需要从master分支切出一个bug修复分支，完成之后需要同时merge到master分支与develop分支（如果需要测试介入验证，则可先merge到pre-release分支，验证通过后再merge到master分支上线）。merge时参考“正常开发流程”。流程示意图如下</p><p><img src="/assets/gitbranch3.png" alt="生产环境Bug修复流程"></p></br></br>我的个人博客地址：http://blog.jboost.cn   我的头条空间： https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112      我的github地址：https://github.com/ronwxy    我的微信公众号：jboost-ksxy<p>————————————————————————————————————————</p><p><img src="/assets/qrcode-05.jpg" alt="微信公众号"><br>欢迎关注我的微信公众号，及时获取最新分享</p>]]></content>
      
      
      <categories>
          
          <category> teamwork </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行高效操作Git，看这篇就够了</title>
      <link href="/use-git.html"/>
      <url>/use-git.html</url>
      
        <content type="html"><![CDATA[<p>对于软件开发人员来说，git几乎是每天都需要接触的工具。但对于相处如此亲密的工作伙伴，你对它的了解又有多少，是不是还在傻瓜式地打开一个GUI工具，点击提交按钮，然后“卧槽，又冲突了”，一脸懵逼到不知所措，责怪谁又在你前面提交了，谁又改了你的代码。</p><a id="more"></a><p>博主从一开始接触git，就没用过任何GUI工具，都是通过命令行进行操作，发现这种方式不仅对git的理解更深，效率也更高，遇到问题时一般都知道如何来处理，故做此分享。本文所有知识与操作只涉及日常使用场景，更多详细内容可自行查阅其它资料。本文Git版本为 windows-2.20.1版。</p><h3 id="基础理论"><a href="#基础理论" class="headerlink" title="基础理论"></a>基础理论</h3><p>git的理论知识，对使用者来说只需要知道它是分布式版本控制系统，了解如下三个概念即可，</p><ul><li>工作区：就是你直接操作的文件目录与内容</li><li>暂存区：暂时为你保存还没将内容提交到版本库的一个区域，对应.git目录下的stage或index文件</li><li>版本库：分本地版本库与远程版本库，本地版本库就理解为对应.git目录即可，远程版本库就是远程仓库，如gitlab或github的repository。</li></ul><p>如下图，我们平时提交代码的过程基本都是从工作区<code>add</code>到暂存区，然后再<code>commit</code>到本地仓库，最后<code>push</code>到远程仓库。</p><p><img src="/assets/git1.png" alt="git"></p><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><p>对于日常工作，掌握如下几个基本命令一般就够了</p><ul><li><code>git status</code> 查看修改状态</li><li><code>git pull origin master</code> 拉取远程仓库master分支合并到本地，master根据场景换成其它分支名</li><li><code>git add file</code> 添加文件到暂存区，可用 * 添加所有</li><li><code>git commit -m &quot;commit message&quot;</code> 提交到本地版本库，并添加注释，注释表明此次修改内容，要清晰准确</li><li><code>git push origin master</code> 将本地版本提交到远程仓库的master分支，master根据场景换成其它分支名</li></ul><p>对大部分日常工作来说， 上面几个命令基本就够用了。</p><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p><strong>1. 从本地到远程</strong></p><p>项目开发的时候，有时候是先在本地建一个项目，再提交到远程仓库的。</p><ol><li>创建项目目录（或通过IDE创建），命令行cd到项目目录</li><li>执行<code>git init</code> ， 将在项目目录创建.git目录</li><li>执行<code>git add *</code> ，将所有文件添加到暂存区，这里要先创建一个.gitignore文件，将不需要版本维护的文件添加进去忽略，不然各种IDE编译文件夹，环境相关文件都加到版本库去了。删除文件用<code>git rm file_name</code></li><li>执行<code>git commit -m &quot;upload project&quot;</code> ，提交到本地仓库</li><li>在gitlab或github上创建一个仓库，并将仓库地址复制下来</li><li>执行<code>git remote add origin git@server-name:path/repo-name.git</code> ，关联远程仓库，仓库地址如果是http开头则要用户名密码，如果是git开头，则是走的ssh协议，需要将你本机的ssh公钥添加到远程仓库服务上。</li><li>执行<code>git push -u origin master</code> ，推送本地仓库内容到远程仓库</li></ol><p>这样在远程仓库目录，就能看到你提交上去的文件内容了。</p><p><strong>2. 从远程到本地</strong><br>更多的时候，是远程仓库已有项目了，需要下载到本地开发。</p><ol><li><code>git clone git@server-name:path/repo-name.git</code> ， 将远程仓库的内容下载到本地，这里仓库地址的处理同上</li><li>修改内容</li><li><code>git add *</code> ，将修改的内容添加到暂存区</li><li><code>git commit -m &quot;fix xxx issue&quot;</code> ，提交到本地仓库</li><li><code>git push -u origin master</code> ， 推送本地仓库内容至远程仓库</li></ol><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>有时候改了文件，想反悔怎么办，git给你“后悔药”。</p><p>单个文件的还原：</p><ul><li><code>git checkout file_name</code> ，丢弃工作区的修改，还原到上次提交（commit）的版本，</li><li><code>git reset HEAD file_name</code> ，把暂存区的修改撤销掉（unstage），重新放回工作区。即还原到上次添加到暂存区（add）的版本</li></ul><p>这里涉及几个场景</p><ul><li>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout file_name</code>。</li><li>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时（执行了add，但没执行commit），想丢弃修改，分两步，第一步用命令<code>git reset HEAD file_name</code>，就回到了场景1，第二步按场景1操作。</li><li>场景3：已经提交了不合适的修改到版本库时，想要撤销本次的全部提交，参考下面的整个版本的还原，不过前提是没有推送到远程库。</li></ul><p>整个版本的还原：</p><ul><li><code>git reset --hard HEAD^^</code>， 回退到上上个版本</li><li><code>git reset --hard 3628164</code>， 回退到具体某个版本 3628164 是具体某个commit_id缩写</li></ul><blockquote><p>找不到commit_id？ <code>git reflog</code> 可查看每一个命令的历史记录，获取对应操作的commit_id。<code>git log [--pretty=oneline]</code>， 可查看commit记录</p></blockquote><blockquote><p>上一个版本就是HEAD^，上上一个版本就是HEAD^^，往上100个版本写成HEAD~100。3628164 是具体某个commit_id，不需要写全，只需要唯一确定就行，可往前进也可往后退。（git windows2.20.1版貌似不支持对HEAD^的操作）</p></blockquote><h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><ol><li>首先，可以试图用 <code>git push origin branch_name</code> 推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用 <code>git pull</code> 试图合并；</li><li>如果合并有冲突，则手动解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用 <code>git push origin branch-name</code> 推送就能成功！</li></ol><p>如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream branch-name origin/branch-name</p><p>在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致</p><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><p>平时开发时需要创建子分支来实现你的功能模块，然后再合并到主分支中。</p><ul><li><code>git checkout -b your_branch_name</code> ， 创建并切换分支</li><li><code>git branch</code>  ， 查看分支，标有*号表示当前所在分支</li><li><code>git merge dev</code> ， 合并指定dev分支到当前分支</li><li><code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code> ， 合并分支并生成commit记录</li><li><code>git branch -d dev</code> ， 删除分支</li></ul><blockquote><p><code>git checkout -b dev =  git branch dev + git checkout dev</code></p></blockquote><blockquote><p>Fast-forward合并，“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。存在冲突的不能fast forward。<code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code>  Fast forward模式下，删除分支后，会丢掉分支信息。如果强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息</p></blockquote><h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><p>当发布版本时，一般需要对当前版本进行标签记录，以便后续进行版本查看或回退。</p><ul><li><code>git tag tag_name</code>  ， 对当前分支打标签</li><li><code>git tag</code> ， 查看所有标签</li><li><code>git tag v0.9 6224937</code>  ，针对某个具体commit id打标签</li><li><code>git show tag_name</code> ， 查看标签信息</li><li><code>git tag -a v0.1 -m &quot;version 0.1 released&quot; 3628164</code>  ， 带有说明的标签</li><li><code>git tag -d v0.1</code> ， 删除标签</li><li><code>git push origin tag_name</code> ， 推送标签到远程    </li><li><code>git push origin --tags</code> ， 一次性推送所有标签</li></ul><p>删除已经推送到远程的标签：</p><ul><li><code>git tag -d v0.9</code> ， 先本地删除</li><li><code>git push origin :refs/tags/v0.9</code> ， 然后从远程删除</li></ul><h3 id="提高效率的Tips"><a href="#提高效率的Tips" class="headerlink" title="提高效率的Tips"></a>提高效率的Tips</h3><ol><li><p>配置命令别名   </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.st status # 后面可以用git st 来代替git status了</span><br><span class="line">git config --global alias.ck checkout  # 后面可以用 git ck 来代替 git checkout了</span><br><span class="line">git config --global alias.cm 'commit -m' # 后面可以用git cm 来代替 git commit -m 了</span><br></pre></td></tr></table></figure></li><li><p><code>git pull origin master</code> 或 <code>git push origin master</code>， 可直接 <code>git pull</code> 或 <code>git push</code>， 如果出现“no tracking information”的提示，则说明本地分支和远程分支的链接关系没有创建，用命令 <code>git branch --set-upstream-to=origin/master master</code> 建立关联即可。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上命令虽然看起来多，但平常用的最频繁的应该是“基本命令”与“分支管理”部分，只要多用几次，自然便能记住，应付日常工作完全没有问题，彻底脱离GUI操作，让工作更有效率。</p></br></br>我的个人博客地址：http://blog.jboost.cn   我的头条空间： https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112      我的github地址：https://github.com/ronwxy    我的微信公众号：jboost-ksxy<p>————————————————————————————————————————</p><p><img src="/assets/qrcode-05.jpg" alt="微信公众号"><br>欢迎关注我的微信公众号，及时获取最新分享</p>]]></content>
      
      
      <categories>
          
          <category> 高效实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>案例解析：线程池使用不当导致系统崩溃</title>
      <link href="/issue-threadpool.html"/>
      <url>/issue-threadpool.html</url>
      
        <content type="html"><![CDATA[<p>前几天，发现一台阿里云服务器上的Web服务不可用。远程SSH登录不上，尝试几次登录上去之后，执行命令都显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-bash: fork: Cannot allocate memory</span><br></pre></td></tr></table></figure><p>一看以为是内存泄漏导致溢出。因为执行不了任何命令， 只能通过控制台重启服务器恢复服务。</p><a id="more"></a><h3 id="初步排查"><a href="#初步排查" class="headerlink" title="初步排查"></a>初步排查</h3><p>服务恢复后，查看系统日志，linux系统日志路径<code>/var/log/messages</code>，可通过<code>journalctl</code>命令查看，如 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">journalctl --since="2019-06-12 06:00:00" --until="2019-06-12 10:00:00"</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>可查看since之后，until之前时间段的日志。除了发现<code>crond[14954]: (CRON) CAN&#39;T FORK (do_command): Cannot allocate memory</code> 这个错误日志，未见其它异常（下面的<code>sshd[10764]: error: fork: Cannot allocate memory</code>应是ssh登录执行命名失败的日志）</p><p><img src="/assets/linux-log.png" alt="linux-log"></p><p>通过阿里云-云监控-主机监控查看内存使用率指标，这段时间内，内存使用率一直在40%以下，基本可排除内存溢出的可能。</p><p>通过搜索查阅到进程数超过操作系统限制可能导致<code>bash: fork: Cannot allocate memory</code>的报错(参考： <a href="https://blog.csdn.net/wangshuminjava/article/details/80603847" target="_blank" rel="noopener">https://blog.csdn.net/wangshuminjava/article/details/80603847</a> ）。通过<code>ps -eLf|wc -l</code>查看当前进程线程数(<code>ps -ef</code>只打印进程，<code>ps -eLf</code>会打印所有的线程), 只有1000多个，故障时刻系统到底运行了多少线程已无从得知，只能持续跟进监测。</p><h3 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h3><p>几天后，再次通过<code>ps -eLf|wc -l</code>查看，发现线程数已达16000多个。直接执行<code>ps -eLf</code>可看到大量tomcat进程所产生的线程，猜测是不是线程死锁导致大量线程未完成一直hung在那里。</p><p>执行 <code>jstack 进程号 &gt; ~/jstack.txt</code> 命令将进程所运行线程情况打印出来分析，发现大量的<code>WAITING</code>状态的线程，如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">"pool-19-thread-1" #254 prio=5 os_prio=0 tid=0x00007f0b700a6000 nid=0x29a9 waiting on condition [0x00007f0b274df000]</span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">- parking to wait for  <span class="tag">&lt;<span class="name">0x00000006ce3d8790</span>&gt;</span> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)</span><br><span class="line">at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class="line">at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)</span><br><span class="line">at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure><p>根据上述内容可看出线程在等一个条件，并且是在执行<code>LinkedBlockingQueue.take</code>方法的时候，查看该方法的java doc，当队列为空时，该方法将会一直等待直到有元素可用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieves and removes the head of this queue, waiting if necessary</span></span><br><span class="line"><span class="comment"> * until an element becomes available.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the head of this queue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException if interrupted while waiting</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br></pre></td></tr></table></figure><p>询问同事在哪里用到了LinkedBlockingQueue，同事回忆起不久前用线程池实现往阿里云OSS服务通过追加的方式上传文件功能，查看代码后发现问题——线程池没有关闭。为了使文件片段保存不存在错乱，每次保存文件时，都new了一个线程池对象，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor saveImgThreadPool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;());</span><br></pre></td></tr></table></figure><p>但处理完后， 没有关闭这个线程池对象，这样线程池仍会通过take方法去取等待队列中是否还有未完成的线程任务，等待队列为空时将会一直等待，这样就导致大量的线程hung在这里了（基本是只要方法被调一次，就会产生一个hung住的线程）。</p><h3 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h3><ol><li><p>线程状态为“waiting for monitor entry”：<br>意味着它 在等待进入一个临界区 ，所以它在”Entry Set“队列中等待。此时线程状态一般都是 Blocked：<br>java.lang.Thread.State: BLOCKED (on object monitor)</p></li><li><p>线程状态为“waiting on condition”：<br>说明它在等待另一个条件的发生，来把自己唤醒，或者干脆它是调用了 sleep(N)。此时线程状态大致为以下几种：<br>java.lang.Thread.State: WAITING (parking)：一直等那个条件发生（本文案例即为此种场景）；java.lang.Thread.State: TIMED_WAITING (parking或sleeping)：定时的，那个条件不到来，也将定时唤醒自己。</p></li><li><p>如果大量线程在“waiting for monitor entry”：可能是一个全局锁阻塞住了大量线程。如果短时间内打印的thread dump 文件反映，随着时间流逝，waiting for monitor entry 的线程越来越多，没有减少的趋势，可能意味着某些线程在临界区里呆的时间太长了，以至于越来越多新线程迟迟无法进入临界区。</p></li><li><p>如果大量线程在“waiting on condition”：可能是它们又跑去获取第三方资源，尤其是第三方网络资源，迟迟获取不到Response，导致大量线程进入等待状态。所以如果你发现有大量的线程都处在 Wait on condition，从线程堆栈看，正等待网络读写，这可能是一个网络瓶颈的征兆，因为网络阻塞导致线程无法执行。也可能是如本文所提到的，由于程序编写不当所致。</p></li></ol><p>参考： <a href="https://www.cnblogs.com/rainy-shurun/p/5732341.html" target="_blank" rel="noopener">https://www.cnblogs.com/rainy-shurun/p/5732341.html</a></p></br></br>我的个人博客地址：http://blog.jboost.cn     我的头条空间： https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112  我的github地址：https://github.com/ronwxy   我的微信公众号：jboost-ksxy<p>——————————————————————————————————————————————————</p><p><img src="/assets/qrcode-05.jpg" alt="微信公众号"><br>欢迎关注我的微信公众号，及时获取最新分享</p>]]></content>
      
      
      <categories>
          
          <category> 案例解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot从入门到实战（五）：写一个自己的starter</title>
      <link href="/springboot-starter.html"/>
      <url>/springboot-starter.html</url>
      
        <content type="html"><![CDATA[<p>曾遇到几位面试者，简历上写着精通Spring Boot，当聊到自动配置及对starter的理解时，却说不出个所以然来。找工作时，简历一定要注重实际，精通这种字眼还是少用，不然面试官对你期望越高，失望也就越大。其实结合前一篇介绍的<a href="/springboot-config.html">Spring Boot自动配置</a>，对Spring Boot的Starter实现将很容易理解，不论是使用其官方提供的Starter，还是自定义自己的Starter，都变得很容易。</p><a id="more"></a><p>根据前面介绍，Spring Boot自动配置的实现，主要由如下几部分完成：</p><ol><li>@EnableAutoConfiguration注解</li><li>SpringApplication类</li><li>spring-boot-autoconfigure jar包</li><li>spring.factories文件</li></ol><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>官方提供的starter，大多包含两个jar包： 一个starter——没有任何实现，只用来管理依赖（即实现这个starter的功能需要依赖哪些jar），一个autoconfigure——包含所有具体实现，包括自动配置类，及META-INF/spring.factories文件。本文示例的自定义starter，为了方便，将两者合并写到了一个。</p><blockquote><p>但是在实际项目中，还是建议像官方一样，定义一个spring-boot-dependencies声明所有依赖及其版本，做统一依赖版本管理，一个spring-boot-autoconfigure，实现所有自动配置类及相应的Bean，一个spring-boot-starters，针对每个模块引入必须的jar依赖，方便项目中引入。</p></blockquote><p>官方提供的starter，命名遵循spring-boot-starter-xxx， 自定义starter，命名遵循xxx-spring-boot-starter。</p><p>示例的项目结构如下图<br><img src="/assets/starter-struct.png" alt="starter项目结构"></p><h2 id="springboot-starter"><a href="#springboot-starter" class="headerlink" title="springboot-starter"></a>springboot-starter</h2><p>这里为了简单，将starter与autoconfigure整到一个项目，命名也为了与前面demo项目保持一致，没按规范来。</p><p><strong>配置类 MyAutoConfig</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(MyProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MyAutoConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyProperties myProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"my"</span>, name = <span class="string">"disable"</span>, havingValue = <span class="string">"false"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyService <span class="title">myService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyService(<span class="string">"Hi "</span> + myProperties.getName() + <span class="string">", welcome to visit "</span> + myProperties.getWebsite());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类中通过<code>@EnableConfigurationProperties</code>及<code>@Autowired</code> 引入了配置属性Bean MyProperties 以访问用户配置的属性，<code>@Bean</code>注解即向容器中注入方法返回值类型的Bean，这样在容器其它bean中通过<code>@Autowired</code>即可引用访问， @ConditionalOnProperty是条件注解，这里表明当配置属性my.disable=false时才实例化这个MyService bean。</p><p><strong>配置属性类 MyProperties</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"my"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String website;</span><br><span class="line"></span><br><span class="line">    getter/setter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置属性类封装了用户在配置文件中定义的属性，该示例中将前缀为my的属性封装起来，访问name，website对应配置属性key就是my.name，my.website。</p><p><strong>服务Bean MyService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String hiStr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">(String hiStr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hiStr = hiStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.hiStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供服务功能的bean，也即需要实例化注入到Spring上下文的bean。</p><p><strong>spring.factories</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\</span><br><span class="line">  cn.jboost.springboot.starter.MyAutoConfig</span><br></pre></td></tr></table></figure><p>指定了自动配置类（带包名的全路径类名）</p><h2 id="springboot-usingstarter"><a href="#springboot-usingstarter" class="headerlink" title="springboot-usingstarter"></a>springboot-usingstarter</h2><p>该项目引用springboot-starter，调用MyService服务的项目，主类没什么特别的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootUsingstarterApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootUsingstarterApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my.disable&#x3D;false</span><br><span class="line">my.name&#x3D;jboost</span><br><span class="line">my.website&#x3D;blog.jboost.cn</span><br></pre></td></tr></table></figure><p>在测试类SpringbootUsingstarterApplicationTests中编写测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MyService myService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStarter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.printf(myService.sayHi());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pom.xml中引入springboot-starter依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jboost.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行，控制台会打印出 <code>Hi jboost,  welcome to visit blog.jboost.cn</code><br>将配置属性my.disable的值改为true或其它非false的值再运行测试代码试试，会报MyService bean找不到的错误，说明@ConditionalOnProperty注解生效了</p><p>本示例仅作实现自定义starter演示用，项目结构、命名都不够规范，仅供参考，项目实战starter在后面继续分享。</p><p>本文示例项目源码地址：<br><a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-starter" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-starter</a><br><a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-usingstarter" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-usingstarter</a><br></br><br></br><br>我的个人博客地址：<a href="http://blog.jboost.cn">http://blog.jboost.cn</a><br>我的头条空间： <a href="https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112" target="_blank" rel="noopener">https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112</a><br>我的github地址：<a href="https://github.com/ronwxy" target="_blank" rel="noopener">https://github.com/ronwxy</a><br>我的微信公众号：jboost-ksxy</p><p>——————————————————————————————————————————————————</p><p><img src="/assets/qrcode-05.jpg" alt="微信公众号"><br>欢迎关注我的微信公众号，及时获取最新分享</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot从入门到实战（四）：Spring Boot配置</title>
      <link href="/springboot-config.html"/>
      <url>/springboot-config.html</url>
      
        <content type="html"><![CDATA[<p>Spring Boot之所以受开发者欢迎， 其中最重要的一个因素就是其配置简单。传统的Spring应用需要手动配置各种.xml文件，为数据库访问，事务支持，缓存功能等提供各项繁杂且重复的配置。Spring Boot将这种繁杂且重复的工作通过预定义的启动器（starter）来实现，只要引入即可拥有相应的功能支持，从而将开发者从复杂的配置工作中解放出来，能够更专注于业务逻辑的开发。</p><a id="more"></a><h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><p>在Spring Boot中，虽然仍然可以通过之前的.xml文件方式来进行配置，但最好还是通过基于java的配置来进行配置管理。在Spring Boot中，基于java的配置是通过注解@Configuration来实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyService <span class="title">myService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码将一个MyService的Bean注入了容器，这样在其它地方就可以直接通过@Autowired来引用访问。与.xml文件中通过<code>&lt;bean&gt;&lt;/bean&gt;</code>实例化的效果是一样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MyService myService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hi"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@RequestParam String name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  myService.sayHello(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际项目开发中，有可能存在一些基于xml配置的旧服务，比如以jar包的形式发布，如果要复用该怎么引入呢？很简单，在@Configuration注解标注的类上，加入@ImportResource注解引用相应的xml文件即可，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ImportResource</span>(<span class="string">"spring.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyService <span class="title">myService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样类路径下spring.xml配置文件中声明的内容都将生效。在一个应用中，可以定义多个@Configuration配置类，这些配置类可以被@ComponentScan自动扫描并注入容器。</p><blockquote><p>如果应用中没有通过@ComponentScan进行自动扫描，则可在主配置类（一般为入口类）上通过@Import({MyConfig.class})的方式类引入其它配置类</p></blockquote><h3 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h3><p>个人认为，自动配置是Spring Boot非常基础但又核心的部分。曾经遇到几个面试者，简历写着精通Spring Boot，当问及自动配置时却支支吾吾不知所云。其实理解Spring Boot的自动配置也不难，基本了解如下几部分差不多就够了：</p><ol><li>@EnableAutoConfiguration注解</li><li>SpringApplication类</li><li>spring-boot-autoconfigure jar包</li><li>spring.factories文件</li></ol><p><strong>@EnableAutoConfiguration注解</strong><br>这个注解的作用是告诉Spring Boot基于添加的jar依赖来自动配置Spring，比如添加了spring-boot-starter-web依赖，则Spring Boot认为你在开发一个web应用，就会自动做好web相应配置。这个注解一般放在主类上。在前面的示例项目中， 我们在主类上都是使用@SpringBootApplication， 查看源码可以知道： </p><ul><li>@SpringBootApplication 这个注解实际上等效于 @SpringBootConfiguration（等效于@Configuration）， </li><li>@EnableAutoConfiguration，启用自动配置 </li><li>@ComponentScan 自动扫描@Component, @Service, @Controller等注解标注的各类组件   </li></ul><p>三者的组合。如果去掉@EnableAutoConfiguration注解，则Spring Boot将不会自动配置Spring（如实例化必要的Bean），将可能导致应用启动失败。</p><p><strong>SpringApplication类</strong><br>在应用主类中，我们是通过SpringApplication的run方法来启动应用的，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootConfigApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看源码，SpringApplication的静态run方法，实际也是通过创建SpringApplication实例，调用实例方法执行，在SpringApplication构造器方法中，调用了getSpringFactoriesInstances 方法， </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources&#123;</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">this</span>.resourceLoader = resourceLoader;</span></span></span><br><span class="line"><span class="function"><span class="params">Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>)</span></span>;</span><br><span class="line"><span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line"><span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">ApplicationContextInitializer<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line"><span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>追溯下去，最终会调用到SpringFactoriesLoader的loadSpringFactories方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ?</span><br><span class="line">classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">result = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">URL url = urls.nextElement();</span><br><span class="line">UrlResource resource = <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">String factoryClassName = ((String) entry.getKey()).trim();</span><br><span class="line"><span class="keyword">for</span> (String factoryName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class="line">result.add(factoryClassName, factoryName.trim());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cache.put(classLoader, result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to load factories from location ["</span> +</span><br><span class="line">FACTORIES_RESOURCE_LOCATION + <span class="string">"]"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该方法中，会从所有的META-INF目录下加载spring.factories文件里配置的各类型的类名称（包括初始化器，监听器，自动配置类等）。然后上层方法中通过反射机制实例化这些初始化器、监听器，自动配置等，从而完成相应Bean的自动化配置与注入。</p><p><strong>spring-boot-autoconfigure</strong></p><p>官方提供的starter，如spring-boot-starter-web， 都依赖了spring-boot-starter， 而spring-boot-starter又依赖了spring-boot-autoconfigure。 在spring-boot-autoconfigure中提供了大量官方提供的自动配置类，并且包含META-INF/spring.factories文件，如下图</p><p><img src="/assets/config1.png" alt="spring-boot-autoconfigure"></p><p><strong>spring.factories</strong></p><p>由上图可看出，spring.factories包含了   </p><ul><li>org.springframework.context.ApplicationContextInitializer  应用初始化器</li><li>org.springframework.context.ApplicationListener 应用监听器</li><li>org.springframework.boot.autoconfigure.AutoConfigurationImportListener 自动配置引入监听器</li><li>org.springframework.boot.autoconfigure.AutoConfigurationImportFilter 自动配置引入过滤器</li><li>org.springframework.boot.autoconfigure.EnableAutoConfiguration 自动配置类</li><li>org.springframework.boot.diagnostics.FailureAnalyzer 失败分析器</li><li>org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider 模板提供者   </li></ul><p>其中org.springframework.boot.autoconfigure.EnableAutoConfiguration即实现自动配置的@Configuration配置类列表。</p><p>Spring Boot就是通过这种自动配置机制，以starter依赖包的方式，使开发者非常方便地使用项目开发中的许多常用功能，如数据库访问、缓存、队列等。同时，用户也可以根据自身需求，自定义自己的starter（后面介绍）。   </p><h3 id="通过注解控制自动配置"><a href="#通过注解控制自动配置" class="headerlink" title="通过注解控制自动配置"></a>通过注解控制自动配置</h3><p>Spring Boot自动配置包含了许多条件类注解及顺序类注解，这些注解可方便地让自动配置按照某种条件或者顺序进行配置。</p><p>其中条件类注解包括：</p><ul><li>类级别条件注解 @ConditionalOnClass： 类路径中存在指定的类才进行该配置；@ConditionalOnMissingClass： 类路径中不存在指定的类才进行该配置 </li><li>实例级别条件注解 @ConditionalOnBean：只有在当前上下文中存在指定Bean时，才进行该配置<br>@ConditionalOnMissingBean： 只有在当前上下文不存在指定Bean时，才进行该配置</li><li>属性级别条件注解 @ConditionalOnProperty：当存在某个指定属性，且值为指定值时，才进行该配置</li><li>资源级别条件注解 @ConditionalOnResource：在类路径下存在指定的Resource时，才进行配置</li><li>Web应用条件注解 @ConditionalOnWebApplication：该应用为Web应用时进行该配置<br>@ConditionalOnNotWebApplication： 该应用不为Web应用时进行该配置</li><li>SpEL（ Spring Expression Language）表达式注解 @ConditionalOnExpression： 计算SpEL表达式值，值为true时才进行该配置</li></ul><p>顺序类注解包括：</p><ul><li>@AutoConfigureAfter： 在指定的配置类初始化后再加载</li><li>@AutoConfigureBefore： 在指定的配置类初始化前加载</li><li>@AutoConfigureOrder： 数值越小越先初始化   </li></ul><blockquote><p>注意：自动配置类不应该位于组件扫描路径（@ComponentScan注解指定的扫描路径）下，否则上述条件注解与顺序注解可能不会生效。建议只在自动配置的类上注解@ConditionalOnBean， @ConditionalOnMissingBean，因为这可以保证在用户定义bean已经添加到ApplicationContext之后才会加载。这两个注解放在class上，则相当于class里面每一个@Bean标注的方法都加上了。</p></blockquote><p>自动配置是非侵入式的，你可以在任何地方自定义配置来覆盖自动配置中的某些内容，比如你在应用中通过@Configuration类注入一个自定义的DataSource，默认的基于内存的DataSource将被覆盖</p><h3 id="禁用某个自动配置类"><a href="#禁用某个自动配置类" class="headerlink" title="禁用某个自动配置类"></a>禁用某个自动配置类</h3><p>有时候引入的自动配置可能包含我们不想让其生效的配置类，这时候可以通过@EnableAutoConfiguration注解的属性进行排除，使其不生效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span>(exclude = &#123;XXAutoConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br></pre></td></tr></table></figure><p>其中XXAutoConfiguration为某个自动配置类，如果该类不在应用的类路径中，则可以通过属性excludeName指定完整类路径来排除。@SpringBootApplicationz注解同样支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(exclude = &#123;XXAutoConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br></pre></td></tr></table></figure><p>本文示例项目源码地址：<a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-config" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-config</a><br></br><br></br><br>我的个人博客地址：<a href="http://blog.jboost.cn">http://blog.jboost.cn</a><br>我的头条空间： <a href="https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112" target="_blank" rel="noopener">https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112</a><br>我的github地址：<a href="https://github.com/ronwxy" target="_blank" rel="noopener">https://github.com/ronwxy</a><br>我的微信公众号：jboost-ksxy</p><p>——————————————————————————————————————————————————</p><p><img src="/assets/qrcode-05.jpg" alt="微信公众号"><br>欢迎关注我的微信公众号，及时获取最新分享</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot从入门到实战（三）：Spring Boot自定义属性</title>
      <link href="/springboot-properties.html"/>
      <url>/springboot-properties.html</url>
      
        <content type="html"><![CDATA[<p>Web项目开发中，经常需要自定义一些属性，如数据库连接，第三方服务接口地址，第三方服务的appKey、appSecret等，以及针对不同环境，这些属性的值还需要有相应的调整，如开发环境、测试环境、生产环境所用数据库不同，则针对不同环境的同一属性需要配置不同的值。</p><a id="more"></a><h3 id="传统自定义属性配置及访问（参考Github示例测试类）"><a href="#传统自定义属性配置及访问（参考Github示例测试类）" class="headerlink" title="传统自定义属性配置及访问（参考Github示例测试类）"></a>传统自定义属性配置及访问（参考<a href="https://github.com/ronwxy/springboot-demos/blob/master/springboot-properties/src/test/java/cn/jboost/springboot/properties/TraditionalPropertiesHandleTest.java" target="_blank" rel="noopener">Github示例测试类</a>）</h3><p>在传统的Spring Web应用中，自定义属性一般是通过在类路径中（如resources目录）添加一个类似my.properties配置文件（文件名自定义），然后在xml配置中通过</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"myProps"</span> <span class="attr">location</span>=<span class="string">"classpath:my.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>引入属性文件。再定义一个Bean来读取这些属性，Bean配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.MethodInvokingFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"staticMethod"</span> <span class="attr">value</span>=<span class="string">"cn.jboost.springboot.properties.MyPropertiesUtil.init"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arguments"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"myProps"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Bean定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPropertiesUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Properties props)</span> </span>&#123;</span><br><span class="line">        properties = props;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getValue</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> properties.getProperty(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在其它需要访问的地方通过 <code>MyPropertiesUtil.getValue()</code> 方法来访问具体某个属性的值。</p><h3 id="Spring-Boot自定义属性配置及优先级"><a href="#Spring-Boot自定义属性配置及优先级" class="headerlink" title="Spring Boot自定义属性配置及优先级"></a>Spring Boot自定义属性配置及优先级</h3><p>在Spring Boot中，可以在多个地方配置属性，包括.properties文件，.yaml文件，环境变量， 系统属性，命令行参数等， 这些属性都会被Spring Boot加载到Environment中，可通过@Value注解，Environment实例，或 @ConfigurationProperties注解的类来访问。</p><p>属性加载优先级顺序：</p><ol><li>如果有使用devtools，devtools 全局设置的属性（用户目录 ~/.spring-bootdevtools.properties）</li><li>测试类的注解@TestPropertySource</li><li>测试类注解 @SpringBootTest#properties 配置的属性</li><li><strong>命令行参数</strong></li><li>SPRING_APPLICATION_JSON里的属性（环境变量或系统属性）</li><li>ServletConfig初始化参数</li><li>ServletContext初始化参数</li><li>JNDI参数   java:comp/env</li><li><strong>Java系统属性  System.getProperties()</strong></li><li><strong>操作系统环境变量</strong></li><li>RandomValuePropertySource 配置的属性 random.*</li><li>jar包外部的applictaion-{profile}.properties，applictaion-{profile}.yml配置文件</li><li><strong>jar包内部的applictaion-{profile}.properties，applictaion-{profile}.yml配置文件</strong></li><li>jar包外部的applictaion.properties，applictaion.yml配置文件</li><li><strong>jar包内部的applictaion.properties，applictaion.yml配置文件</strong></li><li>@Configuration类上的 @PropertySource注解指定的配置文件</li><li>默认属性： SpringApplication.setDefaultProperties</li></ol><blockquote><p>上述属性配置，除了粗体标注的外，其它一般应用较少。序号低的配置优先级高于序号高的配置，即如果存在相同属性配置 ，则序号低的配置会覆盖序号高的配置。applictaion-{profile}.properties 一般用于具体某个环境特有的属性配置，如application-dev.properties用于开发环境，可通过 spring.profiles.active=dev指定加载dev环境配置</p></blockquote><p>常用属性配置方式</p><ol><li><p>命令行参数<br>启动Spring Boot应用时，可以指定命令行参数，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar springboot-properties.jar --my.name=jboost@command_line</span><br></pre></td></tr></table></figure><p>该参数值将会覆盖应用在其它地方配置的同名属性值。命令行参数放在xx.jar 的后面。</p><blockquote><p>可以通过SpringApplication.setAddCommandLineProperties(false)  禁用命令行参数配置</p></blockquote></li><li><p>Java系统属性<br>同样在启动Spring Boot应用时，可以指定Java系统属性，一般见于自定义jvm参数，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dmy.name=jboost@system_properties -jar springboot-properties.jar</span><br></pre></td></tr></table></figure><p>Java系统属性放在java命令之后。</p></li><li><p>操作系统环境变量（实际应用其实较少）<br>配置过JAVA_HOME的应该理解何为环境变量。某些操作系统可能不支持.分隔的属性名，可以改为以下划线连接。Spring Boot将myName, my.name, MY_NAME视为等效。</p></li><li><p>应用属性配置文件（.properties文件或 .yml文件）<br>.properties文件属性配置格式：  </p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my.name&#x3D;jboost</span><br><span class="line">my.list[0]&#x3D;aaa  &#x2F;&#x2F;配置列表</span><br><span class="line">my.list[1]&#x3D;bbb</span><br></pre></td></tr></table></figure><p>.yml文件属性配置格式：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">my:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">devlink</span></span><br><span class="line">  <span class="attr">list:</span>   <span class="string">//配置列表</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">aaa</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">bbb</span></span><br></pre></td></tr></table></figure><p>yml中，属性名与值之间冒号后面必须有空格。</p><p>应用属性配置文件位置：</p><ol><li>jar包所在当前目录下的子目录/config（外置属性文件） </li><li>jar包所在当前目录（外置属性文件） </li><li>classpath根目录下的子目录/config（内置属性文件）</li><li>classpath根目录（内置属性文件）</li></ol><blockquote><p>序号低的优先级高于序号高的优先级，即jar包外的配置优先级高于jar包内的配置。同一目录下，.properties文件的优先级高于.yml文件。application-{profile}.properties的优先级高于application.properties。</p></blockquote><h3 id="Spring-Boot自定义属性访问方式（参考Github示例测试类）"><a href="#Spring-Boot自定义属性访问方式（参考Github示例测试类）" class="headerlink" title="Spring Boot自定义属性访问方式（参考Github示例测试类）"></a>Spring Boot自定义属性访问方式（参考<a href="https://github.com/ronwxy/springboot-demos/blob/master/springboot-properties/src/test/java/cn/jboost/springboot/properties/SpringbootPropertiesHandleTest.java" target="_blank" rel="noopener">Github示例测试类</a>）</h3><ol><li><p>类中属性上添加 @Value(“${xx}”) 注解方式。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;my.name&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><p>可以指定默认值，如 @Value(“${my.name:jboost}”)， 当my.name未配置时，默认使用值”jboost”</p></li><li><p>通过@ConfigurationProperties注解的类来访问。如定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"my"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfigProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String website;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略了getter、setter函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在需要访问的Bean中，通过@Autowired 注入MyConfigProperties实例，通过getName()方法即可访问my.name属性值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MyConfigProperties myConfigProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConfigurationProperties</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"test @ConfigurationProperties =========="</span>);</span><br><span class="line">    System.out.println(myConfigProperties.getName());</span><br><span class="line">    System.out.println(myConfigProperties.getWebsite());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过Environment 实例访问。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEnvironment</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"test Environment =========="</span>);</span><br><span class="line">    System.out.println(env.getProperty(<span class="string">"my.name"</span>));</span><br><span class="line">    System.out.println(env.getProperty(<span class="string">"my.website"</span>, <span class="string">"default value"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>另外也可以通过 spring-boot-starter-actuator 的接口来查看项目加载的属性配置，在pom.xml中加入 spring-boot-starter-actuator 依赖，因为 spring-boot-starter-actuator 在2.x版本中，出于安全性考虑，将actuator 控件中的端口，只默认开放/health 和/info 两个端口，其他端口默认关闭，因此需要添加配置management.endpoints.web.exposure.include= *，<br>management.endpoints.web.exposure.exclude=beans,trace，<br>management.endpoint.health.show-details=ALWAYS，启动项目后，访问 <a href="http://localhost:8080/actuator/env" target="_blank" rel="noopener">http://localhost:8080/actuator/env</a> ，返回的 propertySources 即为加载的所有属性源，优先级从上往下依次降低，与上文所述优先级相符</p></blockquote><p>本文示例项目源码地址：<a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-properties" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-properties</a></p></br></br>我的个人博客地址：http://blog.jboost.cn     我的头条空间： https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112    我的github地址：https://github.com/ronwxy    我的微信公众号：jboost-ksxy<p>———————————————————————————————————————————————————————————————</p><p><img src="/assets/qrcode-05.jpg" alt="微信公众号"><br>欢迎关注我的微信公众号，及时获取最新分享</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot从入门到实战（二）：第一个Spring Boot应用</title>
      <link href="/springboot-firstapp.html"/>
      <url>/springboot-firstapp.html</url>
      
        <content type="html"><![CDATA[<p>Spring Boot应用可以通过如下三种方法创建：</p><ol><li>通过 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a> 网站创建</li><li>通过 <code>Spring Initializr</code> 创建</li><li>自主创建<a id="more"></a></li></ol><h3 id="推荐开发工具"><a href="#推荐开发工具" class="headerlink" title="推荐开发工具"></a>推荐开发工具</h3><ul><li>JDK 1.8+</li><li>IntelliJ IDEA</li><li>maven 3.3+</li></ul><p>在开始之前，先确认是否安装上述工具，在命令行输入 <code>java -version</code> 查看JDK是否正确安装， 输入 <code>mvn -version</code> 查看maven是否正确安装，如果未正确安装，请先查阅相关文档完成安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PS D:\&gt; java -version</span><br><span class="line">java version "1.8.0_201"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_201-b09)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.201-b09, mixed mode)</span><br><span class="line">PS D:\&gt;</span><br><span class="line">PS D:\&gt;</span><br><span class="line">PS D:\&gt; mvn -version</span><br><span class="line">Apache Maven 3.6.0 (97c98ec64a1fdfee7767ce5ffb20918da4f719f3; 2018-10-25T02:41:47+08:00)</span><br><span class="line">Maven home: D:\tool\apache-maven-3.6.0\bin\..</span><br><span class="line">Java version: 1.8.0_201, vendor: Oracle Corporation, runtime: C:\Program Files\Java\jdk1.8.0_201\jre</span><br><span class="line">Default locale: zh_CN, platform encoding: GBK</span><br><span class="line">OS name: "windows 10", version: "10.0", arch: "amd64", family: "windows"</span><br><span class="line">PS D:\&gt;</span><br></pre></td></tr></table></figure><h3 id="1-通过-https-start-spring-io-网站创建"><a href="#1-通过-https-start-spring-io-网站创建" class="headerlink" title="1. 通过 https://start.spring.io/ 网站创建"></a>1. 通过 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a> 网站创建</h3><p>进入 <a href="https://start.spring.io/，填写对应的信息，如下图所示" target="_blank" rel="noopener">https://start.spring.io/，填写对应的信息，如下图所示</a><br><img src="/assets/firstapp1.png" alt="项目配置"><br>其中project选 <code>Maven Project</code>， Spring Boot版本选 <code>2.1.5</code> 版， Project Metadata部分， Group一般用你域名的倒序字符串，Artifact即项目名称，选择Packaging类型为Jar，Java版本为8，在Dependencies部分输入Web，选中第一个Spring Web Starter，然后点击“Generate the project”按钮，下载生成的项目。解压项目，在IntelliJ IDEA中 <code>File -&gt; Open</code> 选中项目解压目录打开，即可看到生成的项目结构如下图<br><img src="/assets/firstapp2.png" alt="项目结构"><br>具体各文件含义后面详述。</p><h3 id="2-通过Spring-Initializr创建（推荐）"><a href="#2-通过Spring-Initializr创建（推荐）" class="headerlink" title="2. 通过Spring Initializr创建（推荐）"></a>2. 通过Spring Initializr创建（推荐）</h3><p>IntelliJ IDEA中<code>File -&gt; New -&gt; Project...</code>打开新建项目窗口（这里也可以选择New Module, IDEA的Project类似于Eclipse的Workspace，Module则类似于Eclipse的Project，有时候为了将一些项目统一管理，可以建一个Project，然后在Project内部建立Module），如下图所示<br><img src="/assets/firstapp3.png" alt="新建项目"></p><p>选择<code>Spring Initializr</code>，点击<code>Next</code>，填写相应信息， 如下图所示<br><img src="/assets/firstapp4.png" alt="项目配置"></p><p>点击<code>Next</code>，选择Spring Boot版本以及相应依赖，如下图（这里选择2.1.5版本及Spring Web Starter依赖）<br><img src="/assets/firstapp5.png" alt="项目配置"></p><p>然后依次点击Next, Finish完成项目创建。可以看到创建的项目结构与第一种方法一致。</p><blockquote><p>有的旧IDEA版本下项目可能不能编译，IDE未将其识别为maven项目，只需在pom.xml文件上右键，点击<code>Add as Maven project</code>即可。</p></blockquote><h3 id="3-自主创建"><a href="#3-自主创建" class="headerlink" title="3. 自主创建"></a>3. 自主创建</h3><p>自主创建即像普通Java Maven项目一样，先创建maven项目，然后参考1、2方法中创建的项目结构与目录，手动进行添加。</p><blockquote><p>上述三种创建方法，第1种需要网站生成再下载解压导入，第2种直接基于IDE创建，第3种完全自主手动创建。实际开发中推荐采用第2种创建初始项目原型，再根据具体需求删除或添加相应目录与文件。</p></blockquote><h3 id="4-项目结构"><a href="#4-项目结构" class="headerlink" title="4. 项目结构"></a>4. 项目结构</h3><p>通过上述方法创建的项目，结构如下图所示</p><p><img src="/assets/firstapp6.png" alt="项目结构"></p><p>其中</p><ul><li>SpringbootFirstappApplication 为项目入口类，通过SpringApplication.run()方法来启动项目</li><li>入口类上的注解 @SpringBootApplication 表明，这是一个Spring Boot项目，它会为你自动做一些Spring Boot项目的处理</li><li>resources 下的static目录为静态资源目录，可以放置js，css，img之类的资源，templates目录可放置模板文件，一般做前后端分离开发，这两个目录可删除</li><li>application.properties 文件为项目的配置文件，可在该文件中配置项目所需要的各项配置属性</li><li>SpringbootFirstappApplicationTests 生成的测试类，可基于此进行单元测试编写</li><li>pom.xml即为maven配置文档，可看到项目已继承<code>spring-boot-starter-parent</code>，并且引入了<code>spring-boot-starter-web</code>，<code>spring-boot-starter-test</code>两项依赖，以及<code>spring-boot-maven-plugin</code></li></ul><h3 id="5-运行"><a href="#5-运行" class="headerlink" title="5. 运行　"></a>5. 运行　</h3><p>上述创建的项目可直接运行，大致有如下几种运行方式：</p><ol><li>直接在项目入口类SpringbootFirstappApplication中右键，点击<code>Run &#39;SpringbootFirstappAp...&#39;</code>运行</li><li>在项目根目录下打开终端，或IDEA的Terminal中执行<code>mvn spring-boot:run</code>（前提是项目pom.xml文件中引入了spring-boot-maven-plugin）</li><li>使用<code>mvn package</code>打包，然后通过<code>java -jar target\springboot-firstapp-1.0.0-SNAPSHOT.jar</code> 启动（一般用于远程环境的部署启动）</li><li>如果打包成war，将war包部署到tomcat等Servlet容器运行</li></ol><p>项目启动后，从启动日志可看出默认端口为8080，但打开 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 会显示一个404报错页面，这是因为我们还没有编写任何服务。<br>下面我们添加一个非常简单的Rest服务接口，在项目的根包下（我这里是cn.jboost.springboot.firstapp，实际项目中一般会创建一个controller的子包）添加HelloController类，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(name = <span class="string">"name"</span>)</span>String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"您好，"</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>@RestController</code>注解会将返回结果以字符串的方式解析，<code>@GetMapping</code>等效于<code>@RequestMapping(method = {RequestMethod.GET})</code><br>重启应用，然后浏览器地址栏中输入 <a href="http://localhost:8080/hello?name=jboost，" target="_blank" rel="noopener">http://localhost:8080/hello?name=jboost，</a> 页面输出如下图：</p><div align=center>![接口调用](/assets/firstapp7.png)</div>至此，一个可运行的Web项目即已搭建完成，是不是非常简单。   <p>本文示例项目源码地址：<a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-firstapp" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-firstapp</a><br></br><br></br><br>我的个人博客地址：<a href="http://blog.jboost.cn">http://blog.jboost.cn</a><br>我的头条空间： <a href="https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112" target="_blank" rel="noopener">https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112</a><br>我的github地址：<a href="https://github.com/ronwxy" target="_blank" rel="noopener">https://github.com/ronwxy</a><br>我的微信公众号：jboost-ksxy</p><p>———————————————————————————————————————————————</p><p><img src="/assets/qrcode-05.jpg" alt="微信公众号"><br>欢迎关注我的微信公众号，及时获取最新分享</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot从入门到实战（一）：Spring Boot简介</title>
      <link href="/springboot-overview.html"/>
      <url>/springboot-overview.html</url>
      
        <content type="html"><![CDATA[<p>Spring Boot这几年非常流行，差不多是基于Spring框架应用开发的首选，同时在微服务架构领域，如Spring Cloud 框架中，Spring Boot也是基础，因此掌握Spring Boot，应成为Java开发人员必不可少的技能。</p><a id="more"></a><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>传统的基于Spring的Java Web应用，需要配置 <code>web.xml</code>, <code>applicationContext.xml</code> 等大量xml配置信息，然后将应用打成war包放入web应用服务器(如Tomcat, Jetty等)中运行。有过实践经验的开发者应能体会到这个过程繁杂且重复。Spring Boot将这种繁杂且重复的工作通过<strong>自动化配置</strong>等手段实现，从而将开发者从复杂的配置工作中解放出来，能够更专注于业务逻辑的开发。因此，Spring Boot并不是Spring的替代解决方案，它本身并不提供Spring框架的核心特性以及扩展功能，而是和Spring框架紧密结合用于提升Spring开发者体验，提高开发效率的的工具框架。截至本文，Spring Boot最新GA版本为2.1.5。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>Spring Boot框架大致包括如下特性：</p><ul><li>自动化配置。Spring Boot 通过autoconfiguration的方式（后面会详细讨论何为autoconfiguration）来简化配置管理。比如如果需要访问数据库，则只需要引入相应的starter依赖包，Spring Boot便会自动为你配置访问数据库所需要的Bean，如 DataSource， JdbcTemplate等。使用Spring Boot，项目中几乎不需要任何 xml 配置文件。</li><li>内嵌的Web服务容器。Spring Boot内嵌了Tomcat、Jetty、Undertow。因此，Spring Boot应用可以像普通java应用一样打成jar包直接通过 <code>java -jar</code> 执行，而不需传统web应用一样需要打成war包部署到独立的web服务容器中。</li><li>简化依赖管理。Spring Boot官方提供了大量的starter依赖包，帮你管理了使用某个功能所需要的依赖，开发者只需要引入starter依赖，即可使用对应的功能。如spring-boot-starter-web，spring-boot-starter-jdbc等。同时自己也可以自定义starter，为某些通用功能提供模块化共享支持。</li><li>提供生产环境级的应用配置、度量指标、操作控制接口。Spring Boot的spring-boot-starter-actuator提供了查看应用配置信息，获取应用运行指标，以及控制应用（如关闭应用）三种类型的接口。通过这些接口，可以排查问题，监控服务运行情况等。   </li></ul><p>Spring Boot的这些特性，使得应用Spring Boot开发Web应用非常便捷、高效，因此在快速应用开发（Rapid Application Development）领域以及微服务架构方面，Spring Boot都是比较好的选择。</p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>该序列涉及的开发工具包括但不限于：</p><ul><li>JDK 1.8+ , 一般用的是1.8</li><li>Maven 3.3+ , 我们用的是Maven3.6.0</li><li>IntelliJ IDEA Ultimate Edition， 需要激活，<a href="http://idea.lanyus.com/" target="_blank" rel="noopener">参考这里</a></li><li>MySQL，可选，数据库访问示例需要 </li><li>Redis， 可选，缓存示例需要</li></ul></br></br>我的个人博客地址：http://blog.jboost.cn   我的头条空间： https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112      我的github地址：https://github.com/ronwxy    我的微信公众号：jboost-ksxy<p>———————————————————————————————————————————————————————————————</p><p><img src="/assets/qrcode-05.jpg" alt="微信公众号"><br>欢迎关注我的微信公众号，及时获取最新分享</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在前面</title>
      <link href="/ahead.html"/>
      <url>/ahead.html</url>
      
        <content type="html"><![CDATA[<h3 id="一点感悟"><a href="#一点感悟" class="headerlink" title="一点感悟"></a>一点感悟</h3><p>在软件与互联网技术领域从业多年，从一个一知半解的职场菜鸟成长为行业“老司机”，也从一个邯郸学步的技术新手晋升成为能带领团队披荆斩棘，在技术范畴能掌握话语权的技术管理者。其间也与大多数同行一样，踩过不少坑，加过不少班，背过不少锅……，但同时，也为自己不断成长、进步——包括技术、能力层面，也包括薪酬、职位层面，而感到欣慰。但技术领域日新月异，接触的越多，越发现自己的无知，因此 <code>Stay hungry，Stay foolish</code>，保持持续学习的热情，永远不要满足于现状，才能保持自身竞争力，不至于在年龄增长时，出现所谓的“中年危机”。</p><h3 id="一点初衷"><a href="#一点初衷" class="headerlink" title="一点初衷"></a>一点初衷</h3><p>大学期间也曾玩过新浪博客，写过一些心路历程与人生感悟（^_^），随着年龄的增长，逐渐失去了用文字来抒发情感的激情。工作后，开始接触技术博客，也断断续续写过一些分享，但终因阶段性忙或懒惰，没能坚持下来。与之前抒发情感与感悟不同，技术博客更多的是一种经验的自我梳理总结与分享。一方面为那些踏入职场不久实践经验较缺乏的同行提供参考，另一方面也是对自我日常技术工作的整理，以达到“好记性不如烂笔头”的效果。<br>因此，虽然现今从事一线编码工作相对较少，心中一直还是有一个将以往及现在所接触的实践经验记录与分享出来的想法。于是，花了点时间整了这个博客，希望能坚持下去。</p><h3 id="一点期望"><a href="#一点期望" class="headerlink" title="一点期望"></a>一点期望</h3><p>凡事做了，总希望有所回报。整理文章其实需要花费不少时间与精力，因此也希望发出来的分享能为大家带来切实的收获，获得大家的肯定与良性反馈。有更好建议，也欢迎大家通过留言或其它方式与我交流。希望这是一个好的开始，加油！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
