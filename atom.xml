<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>空山新雨</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.jboost.cn/"/>
  <updated>2019-06-15T05:52:42.505Z</updated>
  <id>http://blog.jboost.cn/</id>
  
  <author>
    <name>ronwxy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>案例解析：线程池使用不当导致系统崩溃</title>
    <link href="http://blog.jboost.cn/2019/06/15/issue-threadpool.html"/>
    <id>http://blog.jboost.cn/2019/06/15/issue-threadpool.html</id>
    <published>2019-06-15T03:01:58.000Z</published>
    <updated>2019-06-15T05:52:42.505Z</updated>
    
    <content type="html"><![CDATA[<p>前几天，发现一台阿里云服务器上的Web服务不可用。远程SSH登录不上，尝试几次登录上去之后，执行命令都显示<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-bash: fork: Cannot allocate memory</span><br></pre></td></tr></table></figure></p><p>一看以为是内存泄漏导致溢出。因为执行不了任何命令， 只能通过控制台重启服务器恢复服务。<br><a id="more"></a></p><h3 id="初步排查"><a href="#初步排查" class="headerlink" title="初步排查"></a>初步排查</h3><p>服务恢复后，查看系统日志，linux系统日志路径<code>/var/log/messages</code>，可通过<code>journalctl</code>命令查看，如<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">journalctl --since="2019-06-12 06:00:00" --until="2019-06-12 10:00:00"</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><p>可查看since之后，until之前时间段的日志。除了发现<code>crond[14954]: (CRON) CAN&#39;T FORK (do_command): Cannot allocate memory</code> 这个错误日志，未见其它异常（下面的<code>sshd[10764]: error: fork: Cannot allocate memory</code>应是ssh登录执行命名失败的日志）</p><p><img src="http://pso1tuwfq.bkt.clouddn.com/linux-log.png" alt="linux-log"></p><p>通过阿里云-云监控-主机监控查看内存使用率指标，这段时间内，内存使用率一直在40%以下，基本可排除内存溢出的可能。</p><p>通过搜索查阅到进程数超过操作系统限制可能导致<code>bash: fork: Cannot allocate memory</code>的报错(参考： <a href="https://blog.csdn.net/wangshuminjava/article/details/80603847" target="_blank" rel="noopener">https://blog.csdn.net/wangshuminjava/article/details/80603847</a> ）。通过<code>ps -eLf|wc -l</code>查看当前进程线程数(<code>ps -ef</code>只打印进程，<code>ps -eLf</code>会打印所有的线程), 只有1000多个，故障时刻系统到底运行了多少线程已无从得知，只能持续跟进监测。</p><h3 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h3><p>几天后，再次通过<code>ps -eLf|wc -l</code>查看，发现线程数已达16000多个。直接执行<code>ps -eLf</code>可看到大量tomcat进程所产生的线程，猜测是不是线程死锁导致大量线程未完成一直hung在那里。</p><p>执行 <code>jstack 进程号 &gt; ~/jstack.txt</code> 命令将进程所运行线程情况打印出来分析，发现大量的<code>WAITING</code>状态的线程，如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">"pool-19-thread-1" #254 prio=5 os_prio=0 tid=0x00007f0b700a6000 nid=0x29a9 waiting on condition [0x00007f0b274df000]</span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">- parking to wait for  <span class="tag">&lt;<span class="name">0x00000006ce3d8790</span>&gt;</span> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)</span><br><span class="line">at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class="line">at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)</span><br><span class="line">at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure></p><p>根据上述内容可看出线程在等一个条件，并且是在执行<code>LinkedBlockingQueue.take</code>方法的时候，查看该方法的java doc，当队列为空时，该方法将会一直等待直到有元素可用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieves and removes the head of this queue, waiting if necessary</span></span><br><span class="line"><span class="comment"> * until an element becomes available.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the head of this queue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException if interrupted while waiting</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br></pre></td></tr></table></figure></p><p>询问同事在哪里用到了LinkedBlockingQueue，同事回忆起不久前用线程池实现往阿里云OSS服务通过追加的方式上传文件功能，查看代码后发现问题——线程池没有关闭。为了使文件片段保存不存在错乱，每次保存文件时，都new了一个线程池对象，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor saveImgThreadPool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;());</span><br></pre></td></tr></table></figure></p><p>但处理完后， 没有关闭这个线程池对象，这样线程池仍会通过take方法去取等待队列中是否还有未完成的线程任务，等待队列为空时将会一直等待，这样就导致大量的线程hung在这里了（基本是只要方法被调一次，就会产生一个hung住的线程）。</p><h3 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h3><ol><li><p>线程状态为“waiting for monitor entry”：<br>意味着它 在等待进入一个临界区 ，所以它在”Entry Set“队列中等待。此时线程状态一般都是 Blocked：<br>java.lang.Thread.State: BLOCKED (on object monitor)</p></li><li><p>线程状态为“waiting on condition”：<br>说明它在等待另一个条件的发生，来把自己唤醒，或者干脆它是调用了 sleep(N)。此时线程状态大致为以下几种：<br>java.lang.Thread.State: WAITING (parking)：一直等那个条件发生（本文案例即为此种场景）；java.lang.Thread.State: TIMED_WAITING (parking或sleeping)：定时的，那个条件不到来，也将定时唤醒自己。</p></li><li><p>如果大量线程在“waiting for monitor entry”：可能是一个全局锁阻塞住了大量线程。如果短时间内打印的thread dump 文件反映，随着时间流逝，waiting for monitor entry 的线程越来越多，没有减少的趋势，可能意味着某些线程在临界区里呆的时间太长了，以至于越来越多新线程迟迟无法进入临界区。</p></li><li><p>如果大量线程在“waiting on condition”：可能是它们又跑去获取第三方资源，尤其是第三方网络资源，迟迟获取不到Response，导致大量线程进入等待状态。所以如果你发现有大量的线程都处在 Wait on condition，从线程堆栈看，正等待网络读写，这可能是一个网络瓶颈的征兆，因为网络阻塞导致线程无法执行。也可能是如本文所提到的，由于程序编写不当所致。</p></li></ol><p>参考： <a href="https://www.cnblogs.com/rainy-shurun/p/5732341.html" target="_blank" rel="noopener">https://www.cnblogs.com/rainy-shurun/p/5732341.html</a></p><p><br><br><br><br>我的个人博客地址：<a href="http://blog.jboost.cn">http://blog.jboost.cn</a><br>我的头条空间： <a href="https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112" target="_blank" rel="noopener">https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112</a><br>我的github地址：<a href="https://github.com/ronwxy" target="_blank" rel="noopener">https://github.com/ronwxy</a><br>我的微信公众号：jboost-ksxy</p><p>——————————————————————————————————————————————————</p><p><img src="http://pso1tuwfq.bkt.clouddn.com/qrcode-05.jpg" alt="微信公众号"><br>欢迎关注我的微信公众号，及时获取最新分享</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天，发现一台阿里云服务器上的Web服务不可用。远程SSH登录不上，尝试几次登录上去之后，执行命令都显示&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-bash: fork: Cannot allocate memory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一看以为是内存泄漏导致溢出。因为执行不了任何命令， 只能通过控制台重启服务器恢复服务。&lt;br&gt;
    
    </summary>
    
      <category term="案例解析" scheme="http://blog.jboost.cn/categories/%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="JVM" scheme="http://blog.jboost.cn/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot从入门到实战：写一个自己的starter</title>
    <link href="http://blog.jboost.cn/2019/06/14/springboot-starter.html"/>
    <id>http://blog.jboost.cn/2019/06/14/springboot-starter.html</id>
    <published>2019-06-14T07:19:43.000Z</published>
    <updated>2019-06-14T04:27:58.543Z</updated>
    
    <content type="html"><![CDATA[<p>曾遇到几位面试者，简历上写着精通Spring Boot，当聊到自动配置及对starter的理解时，却说不出个所以然来。找工作时，简历一定要注重实际，精通这种字眼还是少用，不然面试官对你期望越高，失望也就越大。其实结合前一篇介绍的<a href="http://blog.jboost.cn/2019/06/11/springboot-config.html">Spring Boot自动配置</a>，对Spring Boot的Starter实现将很容易理解，不论是使用其官方提供的Starter，还是自定义自己的Starter，都变得很容易。<br><a id="more"></a></p><p>根据前面介绍，Spring Boot自动配置的实现，主要由如下几部分完成：</p><ol><li>@EnableAutoConfiguration注解</li><li>SpringApplication类</li><li>spring-boot-autoconfigure jar包</li><li>spring.factories文件</li></ol><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>官方提供的starter，大多包含两个jar包： 一个starter——没有任何实现，只用来管理依赖（即实现这个starter的功能需要依赖哪些jar），一个autoconfigure——包含所有具体实现，包括自动配置类，及META-INF/spring.factories文件。本文示例的自定义starter，为了方便，将两者合并写到了一个。</p><blockquote><p>但是在实际项目中，还是建议像官方一样，定义一个spring-boot-dependencies声明所有依赖及其版本，做统一依赖版本管理，一个spring-boot-autoconfigure，实现所有自动配置类及相应的Bean，一个spring-boot-starters，针对每个模块引入必须的jar依赖，方便项目中引入。</p></blockquote><p>官方提供的starter，命名遵循spring-boot-starter-xxx， 自定义starter，命名遵循xxx-spring-boot-starter。</p><p>示例的项目结构如下图<br><img src="http://pso1tuwfq.bkt.clouddn.com/starter-struct.png" alt="starter项目结构"></p><h2 id="springboot-starter"><a href="#springboot-starter" class="headerlink" title="springboot-starter"></a>springboot-starter</h2><p>这里为了简单，将starter与autoconfigure整到一个项目，命名也为了与前面demo项目保持一致，没按规范来。</p><p><strong>配置类 MyAutoConfig</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(MyProperties.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAutoConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyProperties myProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"my"</span>, name = <span class="string">"disable"</span>, havingValue = <span class="string">"false"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyService <span class="title">myService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyService(<span class="string">"Hi "</span> + myProperties.getName() + <span class="string">", welcome to visit "</span> + myProperties.getWebsite());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该类中通过<code>@EnableConfigurationProperties</code>及<code>@Autowired</code> 引入了配置属性Bean MyProperties 以访问用户配置的属性，<code>@Bean</code>注解即向容器中注入方法返回值类型的Bean，这样在容器其它bean中通过<code>@Autowired</code>即可引用访问， @ConditionalOnProperty是条件注解，这里表明当配置属性my.disable=false时才实例化这个MyService bean。</p><p><strong>配置属性类 MyProperties</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"my"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String website;</span><br><span class="line"></span><br><span class="line">    getter/setter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置属性类封装了用户在配置文件中定义的属性，该示例中将前缀为my的属性封装起来，访问name，website对应配置属性key就是my.name，my.website。</p><p><strong>服务Bean MyService</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String hiStr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">(String hiStr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hiStr = hiStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.hiStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>提供服务功能的bean，也即需要实例化注入到Spring上下文的bean。</p><p><strong>spring.factories</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  cn.jboost.springboot.starter.MyAutoConfig</span><br></pre></td></tr></table></figure></p><p>指定了自动配置类（带包名的全路径类名）</p><h2 id="springboot-usingstarter"><a href="#springboot-usingstarter" class="headerlink" title="springboot-usingstarter"></a>springboot-usingstarter</h2><p>该项目引用springboot-starter，调用MyService服务的项目，主类没什么特别的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootUsingstarterApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootUsingstarterApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置文件application.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my.disable=false</span><br><span class="line">my.name=jboost</span><br><span class="line">my.website=blog.jboost.cn</span><br></pre></td></tr></table></figure></p><p>在测试类SpringbootUsingstarterApplicationTests中编写测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MyService myService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStarter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.printf(myService.sayHi());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>pom.xml中引入springboot-starter依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jboost.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>运行，控制台会打印出 <code>Hi jboost,  welcome to visit blog.jboost.cn</code><br>将配置属性my.disable的值改为true或其它非false的值再运行测试代码试试，会报MyService bean找不到的错误，说明@ConditionalOnProperty注解生效了</p><p>本示例仅作实现自定义starter演示用，项目结构、命名都不够规范，仅供参考，项目实战starter在后面继续分享。</p><p>本文示例项目源码地址：<br><a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-starter" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-starter</a><br><a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-usingstarter" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-usingstarter</a><br><br><br><br><br>我的个人博客地址：<a href="http://blog.jboost.cn">http://blog.jboost.cn</a><br>我的头条空间： <a href="https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112" target="_blank" rel="noopener">https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112</a><br>我的github地址：<a href="https://github.com/ronwxy" target="_blank" rel="noopener">https://github.com/ronwxy</a><br>我的微信公众号：jboost-ksxy</p><p>——————————————————————————————————————————————————</p><p><img src="http://pso1tuwfq.bkt.clouddn.com/qrcode-05.jpg" alt="微信公众号"><br>欢迎关注我的微信公众号，及时获取最新分享</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;曾遇到几位面试者，简历上写着精通Spring Boot，当聊到自动配置及对starter的理解时，却说不出个所以然来。找工作时，简历一定要注重实际，精通这种字眼还是少用，不然面试官对你期望越高，失望也就越大。其实结合前一篇介绍的&lt;a href=&quot;http://blog.jboost.cn/2019/06/11/springboot-config.html&quot;&gt;Spring Boot自动配置&lt;/a&gt;，对Spring Boot的Starter实现将很容易理解，不论是使用其官方提供的Starter，还是自定义自己的Starter，都变得很容易。&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.jboost.cn/categories/SpringBoot/"/>
    
    
      <category term="java" scheme="http://blog.jboost.cn/tags/java/"/>
    
      <category term="springboot" scheme="http://blog.jboost.cn/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot从入门到实战：Spring Boot配置</title>
    <link href="http://blog.jboost.cn/2019/06/11/springboot-config.html"/>
    <id>http://blog.jboost.cn/2019/06/11/springboot-config.html</id>
    <published>2019-06-11T07:46:02.000Z</published>
    <updated>2019-06-14T00:15:51.526Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot之所以受开发者欢迎， 其中最重要的一个因素就是其配置简单。传统的Spring应用需要手动配置各种.xml文件，为数据库访问，事务支持，缓存功能等提供各项繁杂且重复的配置。Spring Boot将这种繁杂且重复的工作通过预定义的启动器（starter）来实现，只要引入即可拥有相应的功能支持，从而将开发者从复杂的配置工作中解放出来，能够更专注于业务逻辑的开发。</p><a id="more"></a><h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><p>在Spring Boot中，虽然仍然可以通过之前的.xml文件方式来进行配置，但最好还是通过基于java的配置来进行配置管理。在Spring Boot中，基于java的配置是通过注解@Configuration来实现的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyService <span class="title">myService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码将一个MyService的Bean注入了容器，这样在其它地方就可以直接通过@Autowired来引用访问。与.xml文件中通过<code>&lt;bean&gt;&lt;/bean&gt;</code>实例化的效果是一样的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MyService myService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hi"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@RequestParam String name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  myService.sayHello(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实际项目开发中，有可能存在一些基于xml配置的旧服务，比如以jar包的形式发布，如果要复用该怎么引入呢？很简单，在@Configuration注解标注的类上，加入@ImportResource注解引用相应的xml文件即可，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ImportResource</span>(<span class="string">"spring.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyService <span class="title">myService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样类路径下spring.xml配置文件中声明的内容都将生效。在一个应用中，可以定义多个@Configuration配置类，这些配置类可以被@ComponentScan自动扫描并注入容器。</p><blockquote><p>如果应用中没有通过@ComponentScan进行自动扫描，则可在主配置类（一般为入口类）上通过@Import({MyConfig.class})的方式类引入其它配置类</p></blockquote><h3 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h3><p>个人认为，自动配置是Spring Boot非常基础但又核心的部分。曾经遇到几个面试者，简历写着精通Spring Boot，当问及自动配置时却支支吾吾不知所云。其实理解Spring Boot的自动配置也不难，基本了解如下几部分差不多就够了：</p><ol><li>@EnableAutoConfiguration注解</li><li>SpringApplication类</li><li>spring-boot-autoconfigure jar包</li><li>spring.factories文件</li></ol><p><strong>@EnableAutoConfiguration注解</strong><br>这个注解的作用是告诉Spring Boot基于添加的jar依赖来自动配置Spring，比如添加了spring-boot-starter-web依赖，则Spring Boot认为你在开发一个web应用，就会自动做好web相应配置。这个注解一般放在主类上。在前面的示例项目中， 我们在主类上都是使用@SpringBootApplication， 查看源码可以知道： </p><ul><li>@SpringBootApplication 这个注解实际上等效于 @SpringBootConfiguration（等效于@Configuration）， </li><li>@EnableAutoConfiguration，启用自动配置 </li><li>@ComponentScan 自动扫描@Component, @Service, @Controller等注解标注的各类组件   </li></ul><p>三者的组合。如果去掉@EnableAutoConfiguration注解，则Spring Boot将不会自动配置Spring（如实例化必要的Bean），将可能导致应用启动失败。</p><p><strong>SpringApplication类</strong><br>在应用主类中，我们是通过SpringApplication的run方法来启动应用的，如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootConfigApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查看源码，SpringApplication的静态run方法，实际也是通过创建SpringApplication实例，调用实例方法执行，在SpringApplication构造器方法中，调用了getSpringFactoriesInstances 方法，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources&#123;</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">this</span>.resourceLoader = resourceLoader;</span></span></span><br><span class="line"><span class="function"><span class="params">Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>)</span></span>;</span><br><span class="line"><span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line"><span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">ApplicationContextInitializer.class));</span><br><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line"><span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>追溯下去，最终会调用到SpringFactoriesLoader的loadSpringFactories方法，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ?</span><br><span class="line">classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">result = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">URL url = urls.nextElement();</span><br><span class="line">UrlResource resource = <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">String factoryClassName = ((String) entry.getKey()).trim();</span><br><span class="line"><span class="keyword">for</span> (String factoryName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class="line">result.add(factoryClassName, factoryName.trim());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cache.put(classLoader, result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to load factories from location ["</span> +</span><br><span class="line">FACTORIES_RESOURCE_LOCATION + <span class="string">"]"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在该方法中，会从所有的META-INF目录下加载spring.factories文件里配置的各类型的类名称（包括初始化器，监听器，自动配置类等）。然后上层方法中通过反射机制实例化这些初始化器、监听器，自动配置等，从而完成相应Bean的自动化配置与注入。</p><p><strong>spring-boot-autoconfigure</strong></p><p>官方提供的starter，如spring-boot-starter-web， 都依赖了spring-boot-starter， 而spring-boot-starter又依赖了spring-boot-autoconfigure。 在spring-boot-autoconfigure中提供了大量官方提供的自动配置类，并且包含META-INF/spring.factories文件，如下图</p><p><img src="http://pso1tuwfq.bkt.clouddn.com/config1.png" alt="spring-boot-autoconfigure"></p><p><strong>spring.factories</strong></p><p>由上图可看出，spring.factories包含了   </p><ul><li>org.springframework.context.ApplicationContextInitializer  应用初始化器</li><li>org.springframework.context.ApplicationListener 应用监听器</li><li>org.springframework.boot.autoconfigure.AutoConfigurationImportListener 自动配置引入监听器</li><li>org.springframework.boot.autoconfigure.AutoConfigurationImportFilter 自动配置引入过滤器</li><li>org.springframework.boot.autoconfigure.EnableAutoConfiguration 自动配置类</li><li>org.springframework.boot.diagnostics.FailureAnalyzer 失败分析器</li><li>org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider 模板提供者   </li></ul><p>其中org.springframework.boot.autoconfigure.EnableAutoConfiguration即实现自动配置的@Configuration配置类列表。</p><p>Spring Boot就是通过这种自动配置机制，以starter依赖包的方式，使开发者非常方便地使用项目开发中的许多常用功能，如数据库访问、缓存、队列等。同时，用户也可以根据自身需求，自定义自己的starter（后面介绍）。   </p><h3 id="通过注解控制自动配置"><a href="#通过注解控制自动配置" class="headerlink" title="通过注解控制自动配置"></a>通过注解控制自动配置</h3><p>Spring Boot自动配置包含了许多条件类注解及顺序类注解，这些注解可方便地让自动配置按照某种条件或者顺序进行配置。</p><p>其中条件类注解包括：</p><ul><li>类级别条件注解 @ConditionalOnClass： 类路径中存在指定的类才进行该配置；@ConditionalOnMissingClass： 类路径中不存在指定的类才进行该配置 </li><li>实例级别条件注解 @ConditionalOnBean：只有在当前上下文中存在指定Bean时，才进行该配置<br>@ConditionalOnMissingBean： 只有在当前上下文不存在指定Bean时，才进行该配置</li><li>属性级别条件注解 @ConditionalOnProperty：当存在某个指定属性，且值为指定值时，才进行该配置</li><li>资源级别条件注解 @ConditionalOnResource：在类路径下存在指定的Resource时，才进行配置</li><li>Web应用条件注解 @ConditionalOnWebApplication：该应用为Web应用时进行该配置<br>@ConditionalOnNotWebApplication： 该应用不为Web应用时进行该配置</li><li>SpEL（ Spring Expression Language）表达式注解 @ConditionalOnExpression： 计算SpEL表达式值，值为true时才进行该配置</li></ul><p>顺序类注解包括：</p><ul><li>@AutoConfigureAfter： 在指定的配置类初始化后再加载</li><li>@AutoConfigureBefore： 在指定的配置类初始化前加载</li><li>@AutoConfigureOrder： 数值越小越先初始化   </li></ul><blockquote><p>注意：自动配置类不应该位于组件扫描路径（@ComponentScan注解指定的扫描路径）下，否则上述条件注解与顺序注解可能不会生效。建议只在自动配置的类上注解@ConditionalOnBean， @ConditionalOnMissingBean，因为这可以保证在用户定义bean已经添加到ApplicationContext之后才会加载。这两个注解放在class上，则相当于class里面每一个@Bean标注的方法都加上了。</p></blockquote><p>自动配置是非侵入式的，你可以在任何地方自定义配置来覆盖自动配置中的某些内容，比如你在应用中通过@Configuration类注入一个自定义的DataSource，默认的基于内存的DataSource将被覆盖</p><h3 id="禁用某个自动配置类"><a href="#禁用某个自动配置类" class="headerlink" title="禁用某个自动配置类"></a>禁用某个自动配置类</h3><p>有时候引入的自动配置可能包含我们不想让其生效的配置类，这时候可以通过@EnableAutoConfiguration注解的属性进行排除，使其不生效。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span>(exclude = &#123;XXAutoConfiguration.class&#125;)</span><br></pre></td></tr></table></figure></p><p>其中XXAutoConfiguration为某个自动配置类，如果该类不在应用的类路径中，则可以通过属性excludeName指定完整类路径来排除。@SpringBootApplicationz注解同样支持<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(exclude = &#123;XXAutoConfiguration.class&#125;)</span><br></pre></td></tr></table></figure></p><p>本文示例项目源码地址：<a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-config" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-config</a><br><br><br><br><br>我的个人博客地址：<a href="http://blog.jboost.cn">http://blog.jboost.cn</a><br>我的头条空间： <a href="https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112" target="_blank" rel="noopener">https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112</a><br>我的github地址：<a href="https://github.com/ronwxy" target="_blank" rel="noopener">https://github.com/ronwxy</a><br>我的微信公众号：jboost-ksxy</p><p>——————————————————————————————————————————————————</p><p><img src="http://pso1tuwfq.bkt.clouddn.com/qrcode-05.jpg" alt="微信公众号"><br>欢迎关注我的微信公众号，及时获取最新分享</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot之所以受开发者欢迎， 其中最重要的一个因素就是其配置简单。传统的Spring应用需要手动配置各种.xml文件，为数据库访问，事务支持，缓存功能等提供各项繁杂且重复的配置。Spring Boot将这种繁杂且重复的工作通过预定义的启动器（starter）来实现，只要引入即可拥有相应的功能支持，从而将开发者从复杂的配置工作中解放出来，能够更专注于业务逻辑的开发。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.jboost.cn/categories/SpringBoot/"/>
    
    
      <category term="java" scheme="http://blog.jboost.cn/tags/java/"/>
    
      <category term="springboot" scheme="http://blog.jboost.cn/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot从入门到实战：Spring Boot自定义属性</title>
    <link href="http://blog.jboost.cn/2019/06/10/springboot-properties.html"/>
    <id>http://blog.jboost.cn/2019/06/10/springboot-properties.html</id>
    <published>2019-06-10T10:47:51.000Z</published>
    <updated>2019-06-14T00:15:25.108Z</updated>
    
    <content type="html"><![CDATA[<p>Web项目开发中，经常需要自定义一些属性，如数据库连接，第三方服务接口地址，第三方服务的appKey、appSecret等，以及针对不同环境，这些属性的值还需要有相应的调整，如开发环境、测试环境、生产环境所用数据库不同，则针对不同环境的同一属性需要配置不同的值。<br><a id="more"></a></p><h3 id="传统自定义属性配置及访问（参考Github示例测试类）"><a href="#传统自定义属性配置及访问（参考Github示例测试类）" class="headerlink" title="传统自定义属性配置及访问（参考Github示例测试类）"></a>传统自定义属性配置及访问（参考<a href="https://github.com/ronwxy/springboot-demos/blob/master/springboot-properties/src/test/java/cn/jboost/springboot/properties/TraditionalPropertiesHandleTest.java" target="_blank" rel="noopener">Github示例测试类</a>）</h3><p>在传统的Spring Web应用中，自定义属性一般是通过在类路径中（如resources目录）添加一个类似my.properties配置文件（文件名自定义），然后在xml配置中通过</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"myProps"</span> <span class="attr">location</span>=<span class="string">"classpath:my.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>引入属性文件。再定义一个Bean来读取这些属性，Bean配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.MethodInvokingFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"staticMethod"</span> <span class="attr">value</span>=<span class="string">"cn.jboost.springboot.properties.MyPropertiesUtil.init"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arguments"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"myProps"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Bean定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPropertiesUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Properties props)</span> </span>&#123;</span><br><span class="line">        properties = props;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getValue</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> properties.getProperty(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在其它需要访问的地方通过 <code>MyPropertiesUtil.getValue()</code> 方法来访问具体某个属性的值。</p><h3 id="Spring-Boot自定义属性配置及优先级"><a href="#Spring-Boot自定义属性配置及优先级" class="headerlink" title="Spring Boot自定义属性配置及优先级"></a>Spring Boot自定义属性配置及优先级</h3><p>在Spring Boot中，可以在多个地方配置属性，包括.properties文件，.yaml文件，环境变量， 系统属性，命令行参数等， 这些属性都会被Spring Boot加载到Environment中，可通过@Value注解，Environment实例，或 @ConfigurationProperties注解的类来访问。</p><p>属性加载优先级顺序：</p><ol><li>如果有使用devtools，devtools 全局设置的属性（用户目录 ~/.spring-bootdevtools.properties）</li><li>测试类的注解@TestPropertySource</li><li>测试类注解 @SpringBootTest#properties 配置的属性</li><li><strong>命令行参数</strong></li><li>SPRING_APPLICATION_JSON里的属性（环境变量或系统属性）</li><li>ServletConfig初始化参数</li><li>ServletContext初始化参数</li><li>JNDI参数   java:comp/env</li><li><strong>Java系统属性  System.getProperties()</strong></li><li><strong>操作系统环境变量</strong></li><li>RandomValuePropertySource 配置的属性 random.*</li><li>jar包外部的applictaion-{profile}.properties，applictaion-{profile}.yml配置文件</li><li><strong>jar包内部的applictaion-{profile}.properties，applictaion-{profile}.yml配置文件</strong></li><li>jar包外部的applictaion.properties，applictaion.yml配置文件</li><li><strong>jar包内部的applictaion.properties，applictaion.yml配置文件</strong></li><li>@Configuration类上的 @PropertySource注解指定的配置文件</li><li>默认属性： SpringApplication.setDefaultProperties</li></ol><blockquote><p>上述属性配置，除了粗体标注的外，其它一般应用较少。序号低的配置优先级高于序号高的配置，即如果存在相同属性配置 ，则序号低的配置会覆盖序号高的配置。applictaion-{profile}.properties 一般用于具体某个环境特有的属性配置，如application-dev.properties用于开发环境，可通过 spring.profiles.active=dev指定加载dev环境配置</p></blockquote><p>常用属性配置方式</p><ol><li>命令行参数<br>启动Spring Boot应用时，可以指定命令行参数，如：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar springboot-properties.jar --my.name=jboost@command_line</span><br></pre></td></tr></table></figure></li></ol><p>该参数值将会覆盖应用在其它地方配置的同名属性值。命令行参数放在xx.jar 的后面。</p><blockquote><p>可以通过SpringApplication.setAddCommandLineProperties(false)  禁用命令行参数配置</p></blockquote><ol start="2"><li>Java系统属性<br>同样在启动Spring Boot应用时，可以指定Java系统属性，一般见于自定义jvm参数，如：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dmy.name=jboost@system_properties -jar springboot-properties.jar</span><br></pre></td></tr></table></figure></li></ol><p>Java系统属性放在java命令之后。</p><ol start="3"><li><p>操作系统环境变量（实际应用其实较少）<br>配置过JAVA_HOME的应该理解何为环境变量。某些操作系统可能不支持.分隔的属性名，可以改为以下划线连接。Spring Boot将myName, my.name, MY_NAME视为等效。</p></li><li><p>应用属性配置文件（.properties文件或 .yml文件）<br>.properties文件属性配置格式：  </p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my.name=jboost</span><br><span class="line">my.list[0]=aaa  //配置列表</span><br><span class="line">my.list[1]=bbb</span><br></pre></td></tr></table></figure><p>.yml文件属性配置格式：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">my:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">devlink</span></span><br><span class="line"><span class="attr">  list:</span>   <span class="string">//配置列表</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">aaa</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">bbb</span></span><br></pre></td></tr></table></figure><p>yml中，属性名与值之间冒号后面必须有空格。</p><p>应用属性配置文件位置：</p><ol><li>jar包所在当前目录下的子目录/config（外置属性文件） </li><li>jar包所在当前目录（外置属性文件） </li><li>classpath根目录下的子目录/config（内置属性文件）</li><li>classpath根目录（内置属性文件）</li></ol><blockquote><p>序号低的优先级高于序号高的优先级，即jar包外的配置优先级高于jar包内的配置。同一目录下，.properties文件的优先级高于.yml文件。application-{profile}.properties的优先级高于application.properties。</p></blockquote><h3 id="Spring-Boot自定义属性访问方式（参考Github示例测试类）"><a href="#Spring-Boot自定义属性访问方式（参考Github示例测试类）" class="headerlink" title="Spring Boot自定义属性访问方式（参考Github示例测试类）"></a>Spring Boot自定义属性访问方式（参考<a href="https://github.com/ronwxy/springboot-demos/blob/master/springboot-properties/src/test/java/cn/jboost/springboot/properties/SpringbootPropertiesHandleTest.java" target="_blank" rel="noopener">Github示例测试类</a>）</h3><ol><li>类中属性上添加 @Value(“${xx}”) 注解方式。如：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;my.name&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li></ol><p>可以指定默认值，如 @Value(“${my.name:jboost}”)， 当my.name未配置时，默认使用值”jboost”</p><ol start="2"><li>通过@ConfigurationProperties注解的类来访问。如定义：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"my"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfigProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String website;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略了getter、setter函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>然后在需要访问的Bean中，通过@Autowired 注入MyConfigProperties实例，通过getName()方法即可访问my.name属性值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MyConfigProperties myConfigProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConfigurationProperties</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"test @ConfigurationProperties =========="</span>);</span><br><span class="line">    System.out.println(myConfigProperties.getName());</span><br><span class="line">    System.out.println(myConfigProperties.getWebsite());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="3"><li>通过Environment 实例访问。如：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEnvironment</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"test Environment =========="</span>);</span><br><span class="line">    System.out.println(env.getProperty(<span class="string">"my.name"</span>));</span><br><span class="line">    System.out.println(env.getProperty(<span class="string">"my.website"</span>, <span class="string">"default value"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>另外也可以通过 spring-boot-starter-actuator 的接口来查看项目加载的属性配置，在pom.xml中加入 spring-boot-starter-actuator 依赖，因为 spring-boot-starter-actuator 在2.x版本中，出于安全性考虑，将actuator 控件中的端口，只默认开放/health 和/info 两个端口，其他端口默认关闭，因此需要添加配置management.endpoints.web.exposure.include= *，<br>management.endpoints.web.exposure.exclude=beans,trace，<br>management.endpoint.health.show-details=ALWAYS，启动项目后，访问 <a href="http://localhost:8080/actuator/env" target="_blank" rel="noopener">http://localhost:8080/actuator/env</a> ，返回的 propertySources 即为加载的所有属性源，优先级从上往下依次降低，与上文所述优先级相符</p></blockquote><p>本文示例项目源码地址：<a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-properties" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-properties</a></p><p><br><br><br><br>我的个人博客地址：<a href="http://blog.jboost.cn">http://blog.jboost.cn</a><br>我的头条空间： <a href="https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112" target="_blank" rel="noopener">https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112</a><br>我的github地址：<a href="https://github.com/ronwxy" target="_blank" rel="noopener">https://github.com/ronwxy</a><br>我的微信公众号：jboost-ksxy</p><p>———————————————————————————————————————————————————————————————</p><p><img src="http://pso1tuwfq.bkt.clouddn.com/qrcode-05.jpg" alt="微信公众号"><br>欢迎关注我的微信公众号，及时获取最新分享</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Web项目开发中，经常需要自定义一些属性，如数据库连接，第三方服务接口地址，第三方服务的appKey、appSecret等，以及针对不同环境，这些属性的值还需要有相应的调整，如开发环境、测试环境、生产环境所用数据库不同，则针对不同环境的同一属性需要配置不同的值。&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.jboost.cn/categories/SpringBoot/"/>
    
    
      <category term="java" scheme="http://blog.jboost.cn/tags/java/"/>
    
      <category term="springboot" scheme="http://blog.jboost.cn/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot从入门到实战：第一个Spring Boot应用</title>
    <link href="http://blog.jboost.cn/2019/06/06/springboot-firstapp.html"/>
    <id>http://blog.jboost.cn/2019/06/06/springboot-firstapp.html</id>
    <published>2019-06-06T12:46:50.000Z</published>
    <updated>2019-06-14T00:15:46.644Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot应用可以通过如下三种方法创建：</p><ol><li>通过 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a> 网站创建</li><li>通过 <code>Spring Initializr</code> 创建</li><li>自主创建<a id="more"></a></li></ol><h3 id="推荐开发工具"><a href="#推荐开发工具" class="headerlink" title="推荐开发工具"></a>推荐开发工具</h3><ul><li>JDK 1.8+</li><li>IntelliJ IDEA</li><li>maven 3.3+</li></ul><p>在开始之前，先确认是否安装上述工具，在命令行输入 <code>java -version</code> 查看JDK是否正确安装， 输入 <code>mvn -version</code> 查看maven是否正确安装，如果未正确安装，请先查阅相关文档完成安装。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PS D:\&gt; java -version</span><br><span class="line">java version "1.8.0_201"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_201-b09)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.201-b09, mixed mode)</span><br><span class="line">PS D:\&gt;</span><br><span class="line">PS D:\&gt;</span><br><span class="line">PS D:\&gt; mvn -version</span><br><span class="line">Apache Maven 3.6.0 (97c98ec64a1fdfee7767ce5ffb20918da4f719f3; 2018-10-25T02:41:47+08:00)</span><br><span class="line">Maven home: D:\tool\apache-maven-3.6.0\bin\..</span><br><span class="line">Java version: 1.8.0_201, vendor: Oracle Corporation, runtime: C:\Program Files\Java\jdk1.8.0_201\jre</span><br><span class="line">Default locale: zh_CN, platform encoding: GBK</span><br><span class="line">OS name: "windows 10", version: "10.0", arch: "amd64", family: "windows"</span><br><span class="line">PS D:\&gt;</span><br></pre></td></tr></table></figure></p><h3 id="1-通过-https-start-spring-io-网站创建"><a href="#1-通过-https-start-spring-io-网站创建" class="headerlink" title="1. 通过 https://start.spring.io/ 网站创建"></a>1. 通过 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a> 网站创建</h3><p>进入 <a href="https://start.spring.io/，填写对应的信息，如下图所示" target="_blank" rel="noopener">https://start.spring.io/，填写对应的信息，如下图所示</a><br><img src="http://pso1tuwfq.bkt.clouddn.com/firstapp1.png" alt="项目配置"><br>其中project选 <code>Maven Project</code>， Spring Boot版本选 <code>2.1.5</code> 版， Project Metadata部分， Group一般用你域名的倒序字符串，Artifact即项目名称，选择Packaging类型为Jar，Java版本为8，在Dependencies部分输入Web，选中第一个Spring Web Starter，然后点击“Generate the project”按钮，下载生成的项目。解压项目，在IntelliJ IDEA中 <code>File -&gt; Open</code> 选中项目解压目录打开，即可看到生成的项目结构如下图<br><img src="http://pso1tuwfq.bkt.clouddn.com/firstapp2.png" alt="项目结构"><br>具体各文件含义后面详述。</p><h3 id="2-通过Spring-Initializr创建（推荐）"><a href="#2-通过Spring-Initializr创建（推荐）" class="headerlink" title="2. 通过Spring Initializr创建（推荐）"></a>2. 通过Spring Initializr创建（推荐）</h3><p>IntelliJ IDEA中<code>File -&gt; New -&gt; Project...</code>打开新建项目窗口（这里也可以选择New Module, IDEA的Project类似于Eclipse的Workspace，Module则类似于Eclipse的Project，有时候为了将一些项目统一管理，可以建一个Project，然后在Project内部建立Module），如下图所示<br><img src="http://pso1tuwfq.bkt.clouddn.com/firstapp3.png" alt="新建项目"></p><p>选择<code>Spring Initializr</code>，点击<code>Next</code>，填写相应信息， 如下图所示<br><img src="http://pso1tuwfq.bkt.clouddn.com/firstapp4.png" alt="项目配置"></p><p>点击<code>Next</code>，选择Spring Boot版本以及相应依赖，如下图（这里选择2.1.5版本及Spring Web Starter依赖）<br><img src="http://pso1tuwfq.bkt.clouddn.com/firstapp5.png" alt="项目配置"></p><p>然后依次点击Next, Finish完成项目创建。可以看到创建的项目结构与第一种方法一致。</p><blockquote><p>有的旧IDEA版本下项目可能不能编译，IDE未将其识别为maven项目，只需在pom.xml文件上右键，点击<code>Add as Maven project</code>即可。</p></blockquote><h3 id="3-自主创建"><a href="#3-自主创建" class="headerlink" title="3. 自主创建"></a>3. 自主创建</h3><p>自主创建即像普通Java Maven项目一样，先创建maven项目，然后参考1、2方法中创建的项目结构与目录，手动进行添加。</p><blockquote><p>上述三种创建方法，第1种需要网站生成再下载解压导入，第2种直接基于IDE创建，第3种完全自主手动创建。实际开发中推荐采用第2种创建初始项目原型，再根据具体需求删除或添加相应目录与文件。</p></blockquote><h3 id="4-项目结构"><a href="#4-项目结构" class="headerlink" title="4. 项目结构"></a>4. 项目结构</h3><p>通过上述方法创建的项目，结构如下图所示</p><p><img src="http://pso1tuwfq.bkt.clouddn.com/firstapp6.png" alt="项目结构"></p><p>其中</p><ul><li>SpringbootFirstappApplication 为项目入口类，通过SpringApplication.run()方法来启动项目</li><li>入口类上的注解 @SpringBootApplication 表明，这是一个Spring Boot项目，它会为你自动做一些Spring Boot项目的处理</li><li>resources 下的static目录为静态资源目录，可以放置js，css，img之类的资源，templates目录可放置模板文件，一般做前后端分离开发，这两个目录可删除</li><li>application.properties 文件为项目的配置文件，可在该文件中配置项目所需要的各项配置属性</li><li>SpringbootFirstappApplicationTests 生成的测试类，可基于此进行单元测试编写</li><li>pom.xml即为maven配置文档，可看到项目已继承<code>spring-boot-starter-parent</code>，并且引入了<code>spring-boot-starter-web</code>，<code>spring-boot-starter-test</code>两项依赖，以及<code>spring-boot-maven-plugin</code></li></ul><h3 id="5-运行"><a href="#5-运行" class="headerlink" title="5. 运行　"></a>5. 运行　</h3><p>上述创建的项目可直接运行，大致有如下几种运行方式：</p><ol><li>直接在项目入口类SpringbootFirstappApplication中右键，点击<code>Run &#39;SpringbootFirstappAp...&#39;</code>运行</li><li>在项目根目录下打开终端，或IDEA的Terminal中执行<code>mvn spring-boot:run</code>（前提是项目pom.xml文件中引入了spring-boot-maven-plugin）</li><li>使用<code>mvn package</code>打包，然后通过<code>java -jar target\springboot-firstapp-1.0.0-SNAPSHOT.jar</code> 启动（一般用于远程环境的部署启动）</li><li>如果打包成war，将war包部署到tomcat等Servlet容器运行</li></ol><p>项目启动后，从启动日志可看出默认端口为8080，但打开 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 会显示一个404报错页面，这是因为我们还没有编写任何服务。<br>下面我们添加一个非常简单的Rest服务接口，在项目的根包下（我这里是cn.jboost.springboot.firstapp，实际项目中一般会创建一个controller的子包）添加HelloController类，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(name = <span class="string">"name"</span>)</span>String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"您好，"</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>@RestController</code>注解会将返回结果以字符串的方式解析，<code>@GetMapping</code>等效于<code>@RequestMapping(method = {RequestMethod.GET})</code><br>重启应用，然后浏览器地址栏中输入 <a href="http://localhost:8080/hello?name=jboost，" target="_blank" rel="noopener">http://localhost:8080/hello?name=jboost，</a> 页面输出如下图：</p><p><div align="center"><img src="http://pso1tuwfq.bkt.clouddn.com/firstapp7.png" alt="接口调用"><br></div><br>至此，一个可运行的Web项目即已搭建完成，是不是非常简单。   </p><p>本文示例项目源码地址：<a href="https://github.com/ronwxy/springboot-demos/tree/master/springboot-firstapp" target="_blank" rel="noopener">https://github.com/ronwxy/springboot-demos/tree/master/springboot-firstapp</a><br><br><br><br><br>我的个人博客地址：<a href="http://blog.jboost.cn">http://blog.jboost.cn</a><br>我的头条空间： <a href="https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112" target="_blank" rel="noopener">https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112</a><br>我的github地址：<a href="https://github.com/ronwxy" target="_blank" rel="noopener">https://github.com/ronwxy</a><br>我的微信公众号：jboost-ksxy</p><p>———————————————————————————————————————————————</p><p><img src="http://pso1tuwfq.bkt.clouddn.com/qrcode-05.jpg" alt="微信公众号"><br>欢迎关注我的微信公众号，及时获取最新分享</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot应用可以通过如下三种方法创建：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过 &lt;a href=&quot;https://start.spring.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://start.spring.io/&lt;/a&gt; 网站创建&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;Spring Initializr&lt;/code&gt; 创建&lt;/li&gt;
&lt;li&gt;自主创建
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.jboost.cn/categories/SpringBoot/"/>
    
    
      <category term="java" scheme="http://blog.jboost.cn/tags/java/"/>
    
      <category term="springboot" scheme="http://blog.jboost.cn/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot从入门到实战：Spring Boot简介</title>
    <link href="http://blog.jboost.cn/2019/06/06/springboot-overview.html"/>
    <id>http://blog.jboost.cn/2019/06/06/springboot-overview.html</id>
    <published>2019-06-06T06:29:02.000Z</published>
    <updated>2019-06-14T00:15:38.150Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot这几年非常流行，差不多是基于Spring框架应用开发的首选，同时在微服务架构领域，如Spring Cloud 框架中，Spring Boot也是基础，因此掌握Spring Boot，应成为Java开发人员必不可少的技能。<br><a id="more"></a></p><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>传统的基于Spring的Java Web应用，需要配置 <code>web.xml</code>, <code>applicationContext.xml</code> 等大量xml配置信息，然后将应用打成war包放入web应用服务器(如Tomcat, Jetty等)中运行。有过实践经验的开发者应能体会到这个过程繁杂且重复。Spring Boot将这种繁杂且重复的工作通过<strong>自动化配置</strong>等手段实现，从而将开发者从复杂的配置工作中解放出来，能够更专注于业务逻辑的开发。因此，Spring Boot并不是Spring的替代解决方案，它本身并不提供Spring框架的核心特性以及扩展功能，而是和Spring框架紧密结合用于提升Spring开发者体验，提高开发效率的的工具框架。截至本文，Spring Boot最新GA版本为2.1.5。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>Spring Boot框架大致包括如下特性：</p><ul><li>自动化配置。Spring Boot 通过autoconfiguration的方式（后面会详细讨论何为autoconfiguration）来简化配置管理。比如如果需要访问数据库，则只需要引入相应的starter依赖包，Spring Boot便会自动为你配置访问数据库所需要的Bean，如 DataSource， JdbcTemplate等。使用Spring Boot，项目中几乎不需要任何 xml 配置文件。</li><li>内嵌的Web服务容器。Spring Boot内嵌了Tomcat、Jetty、Undertow。因此，Spring Boot应用可以像普通java应用一样打成jar包直接通过 <code>java -jar</code> 执行，而不需传统web应用一样需要打成war包部署到独立的web服务容器中。</li><li>简化依赖管理。Spring Boot官方提供了大量的starter依赖包，帮你管理了使用某个功能所需要的依赖，开发者只需要引入starter依赖，即可使用对应的功能。如spring-boot-starter-web，spring-boot-starter-jdbc等。同时自己也可以自定义starter，为某些通用功能提供模块化共享支持。</li><li>提供生产环境级的应用配置、度量指标、操作控制接口。Spring Boot的spring-boot-starter-actuator提供了查看应用配置信息，获取应用运行指标，以及控制应用（如关闭应用）三种类型的接口。通过这些接口，可以排查问题，监控服务运行情况等。   </li></ul><p>Spring Boot的这些特性，使得应用Spring Boot开发Web应用非常便捷、高效，因此在快速应用开发（Rapid Application Development）领域以及微服务架构方面，Spring Boot都是比较好的选择。</p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>该序列涉及的开发工具包括但不限于：</p><ul><li>JDK 1.8+ , 一般用的是1.8</li><li>Maven 3.3+ , 我们用的是Maven3.6.0</li><li>IntelliJ IDEA Ultimate Edition， 需要激活，<a href="http://idea.lanyus.com/" target="_blank" rel="noopener">参考这里</a></li><li>MySQL，可选，数据库访问示例需要 </li><li>Redis， 可选，缓存示例需要</li></ul><p><br><br><br><br>我的个人博客地址：<a href="http://blog.jboost.cn">http://blog.jboost.cn</a><br>我的头条空间： <a href="https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112" target="_blank" rel="noopener">https://www.toutiao.com/c/user/5833678517/#mid=1636101215791112</a><br>我的github地址：<a href="https://github.com/ronwxy" target="_blank" rel="noopener">https://github.com/ronwxy</a><br>我的微信公众号：jboost-ksxy</p><p>———————————————————————————————————————————————————————————————</p><p><img src="http://pso1tuwfq.bkt.clouddn.com/qrcode-05.jpg" alt="微信公众号"><br>欢迎关注我的微信公众号，及时获取最新分享</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot这几年非常流行，差不多是基于Spring框架应用开发的首选，同时在微服务架构领域，如Spring Cloud 框架中，Spring Boot也是基础，因此掌握Spring Boot，应成为Java开发人员必不可少的技能。&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.jboost.cn/categories/SpringBoot/"/>
    
    
      <category term="java" scheme="http://blog.jboost.cn/tags/java/"/>
    
      <category term="springboot" scheme="http://blog.jboost.cn/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>写在前面</title>
    <link href="http://blog.jboost.cn/2019/06/05/ahead.html"/>
    <id>http://blog.jboost.cn/2019/06/05/ahead.html</id>
    <published>2019-06-05T08:48:37.000Z</published>
    <updated>2019-06-10T07:36:24.244Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一点感悟"><a href="#一点感悟" class="headerlink" title="一点感悟"></a>一点感悟</h3><p>在软件与互联网技术领域从业多年，从一个一知半解的职场菜鸟成长为行业“老司机”，也从一个邯郸学步的技术新手晋升成为能带领团队披荆斩棘，在技术范畴能掌握话语权的技术管理者。其间也与大多数同行一样，踩过不少坑，加过不少班，背过不少锅……，但同时，也为自己不断成长、进步——包括技术、能力层面，也包括薪酬、职位层面，而感到欣慰。但技术领域日新月异，接触的越多，越发现自己的无知，因此 <code>Stay hungry，Stay foolish</code>，保持持续学习的热情，永远不要满足于现状，才能保持自身竞争力，不至于在年龄增长时，出现所谓的“中年危机”。</p><h3 id="一点初衷"><a href="#一点初衷" class="headerlink" title="一点初衷"></a>一点初衷</h3><p>大学期间也曾玩过新浪博客，写过一些心路历程与人生感悟（^_^），随着年龄的增长，逐渐失去了用文字来抒发情感的激情。工作后，开始接触技术博客，也断断续续写过一些分享，但终因阶段性忙或懒惰，没能坚持下来。与之前抒发情感与感悟不同，技术博客更多的是一种经验的自我梳理总结与分享。一方面为那些踏入职场不久实践经验较缺乏的同行提供参考，另一方面也是对自我日常技术工作的整理，以达到“好记性不如烂笔头”的效果。<br>因此，虽然现今从事一线编码工作相对较少，心中一直还是有一个将以往及现在所接触的实践经验记录与分享出来的想法。于是，花了点时间整了这个博客，希望能坚持下去。</p><h3 id="一点期望"><a href="#一点期望" class="headerlink" title="一点期望"></a>一点期望</h3><p>凡事做了，总希望有所回报。整理文章其实需要花费不少时间与精力，因此也希望发出来的分享能为大家带来切实的收获，获得大家的肯定与良性反馈。有更好建议，也欢迎大家通过留言或其它方式与我交流。希望这是一个好的开始，加油！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一点感悟&quot;&gt;&lt;a href=&quot;#一点感悟&quot; class=&quot;headerlink&quot; title=&quot;一点感悟&quot;&gt;&lt;/a&gt;一点感悟&lt;/h3&gt;&lt;p&gt;在软件与互联网技术领域从业多年，从一个一知半解的职场菜鸟成长为行业“老司机”，也从一个邯郸学步的技术新手晋升成为能带领团队披
      
    
    </summary>
    
    
  </entry>
  
</feed>
